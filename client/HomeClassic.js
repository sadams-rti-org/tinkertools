// Generated by CoffeeScript 2.3.1
(function() {
  Template.HomeClassic.rendered = function() {
    Session.set('useLabelPrefix', true);
    Session.set('keyForNodeLabel', "null");
    window.wsConnect = function(wsUri) {
      console.log("connecting to ", wsUri);
      document.getElementById('ws-status').innerHTML = "<p style='font-size:16px; background-color: yellow; color: black;'>trying Websocket connection...</p>";
      window.socketToJanus = new WebSocket(wsUri + "/gremlin");
      window.socketToJanus.onmessage = function(msg) { //example send method
        var data, json;
        data = msg.data;
        json = JSON.parse(data);
        return window.dispatcher(json);
      };
      window.socketToJanus.onopen = function() {
        window.WebsocketReonnectionCounts = 0;
        document.getElementById('ws-status').innerHTML = "<p style='font-size:16px; background-color: white; color: green;'>connected via Websocket</p>";
        console.log("connected to", wsUri);
        window.WSURL = wsUri;
        return window.detectGraphSON3();
      };
      return window.socketToJanus.onclose = function() {
        document.getElementById('ws-status').innerHTML = "<p style='font-size:16px; background-color: white; color: red;'>not connected</p>";
        console.log("closed to", window['WSURL'], ' attempting reconnect');
        window.WebsocketReonnectionCounts = window.WebsocketReonnectionCounts + 1;
        if (window.WebsocketReonnectionCounts > 10) {
          document.getElementById('ws-status').innerHTML = "<p style='font-size:16px; background-color: white; color: red;'>gave up reconnecting</p>";
          return console.log("failed 10 times to connect to", window['WSURL'], ' giving up');
        } else {
          return setTimeout(window.wsConnect(window['WSURL']), 3000);
        }
      };
    };
    Session.set("usingWebSockets", true);
    try {
      return window.wsConnect(Session.get("serverURL"));
    } catch (error1) {
      Session.set("usingWebSockets", false);
      return document.getElementById('ws-status').innerHTML = "<p style='font-size:16px; background-color: white; color: black;'>Connected via HTTP</p>";
    }
  };

  //*************** utilities
  window.detectGraphSON3 = function() {
    var bindings, request, script, startTime;
    bindings = {};
    script = '[1]';
    if (Session.get("usingWebSockets")) {
      window.socketToJanus.onmessage = function(msg) {
        var data, endTime, json, results;
        endTime = Date.now();
        data = msg.data;
        json = JSON.parse(data);
        if (json.status.code >= 500) {
          return alert("Error in processing Gremlin script: " + json.status.message);
        } else {
          if (json.status.code === 204) {
            results = [];
          } else {
            results = json.result.data;
          }
          return window.setFlagForGraphSON3(results);
        }
      };
      request = {
        requestId: uuid.new(),
        op: "eval",
        processor: "",
        args: {
          gremlin: script,
          bindings: bindings,
          language: "gremlin-groovy"
        }
      };
      startTime = Date.now();
      return window.socketToJanus.send(JSON.stringify(request));
    } else {
      return Meteor.call('runScript', Session.get('userID'), Session.get('serverURL'), Session.get('tinkerPopVersion'), Session.get('graphName'), 'Built-in Vertex Retriever', script, bindings, function(error, result) {
        return window.setFlagForGraphSON3(results.results);
      });
    }
  };

  window.setFlagForGraphSON3 = function(results) {
    var resultsShouldBe;
    if (results['@type'] === 'g:List') {
      window.UsingGraphSON3 = true;
    } else {
      window.UsingGraphSON3 = false;
    }
    return resultsShouldBe = [
      {
        "@type": "g:List",
        "@value": [
          {
            "@type": "g:Int32",
            "@value": 1
          }
        ]
      }
    ];
  };

  //********************* Widgets
  Meteor.Spinner.options = {
    lines: 13, // The number of lines to draw
    length: 10, // The length of each line
    width: 5, // The line thickness
    radius: 15, // The radius of the inner circle
    corners: 0.7, // Corner roundness (0..1)
    rotate: 0, // The rotation offset
    direction: 1, // 1: clockwise, -1: counterclockwise
    color: '#fff', // #rgb or #rrggbb
    speed: 1, // Rounds per second
    trail: 60, // Afterglow percentage
    shadow: true, // Whether to render a shadow
    hwaccel: false, // Whether to use hardware acceleration
    className: 'spinner', // The CSS class to assign to the spinner
    zIndex: 2e9, // The z-index (defaults to 2000000000)
    top: 'auto', // Top position relative to parent in px
    left: 'auto' // Left position relative to parent in px
  };

  
  //******************** Buttons

  //******************** Helpers
  Template.HomeClassic.helpers({
    isAdmin: function() {
      return (Session.get('userID')) === (Session.get('admin-userID'));
    },
    notAdmin: function() {
      return (Session.get('userID')) !== (Session.get('admin-userID'));
    },
    userLoggedIn: function() {
      return (Session.get('userID')) !== null;
    },
    graphSelected: function() {
      return (Session.get('graphName')) !== null;
    },
    scriptSelected: function() {
      return (Session.get('scriptName')) !== null;
    },
    scriptResult: function() {
      //(Session.get 'scriptResult')
      return Session.get('showJSONResult');
    },
    graphToShow: function() {
      return Session.get('graphFoundInResults');
    },
    drawingGraph: function() {
      //(Session.get 'drawButtonPressed')
      return Session.get('drawGraphResult');
    }
  });

}).call(this);

//# sourceMappingURL=HomeClassic.js.map
