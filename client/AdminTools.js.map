{
  "version": 3,
  "file": "AdminTools.js",
  "sourceRoot": "",
  "sources": [
    "AdminTools.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "Template.AdminTools.rendered = ->\n  $(\".all-user-file-export\").click ->\n    alert 'here'\n    objs = Scripts.find({}).fetch()\n    delete each._id for each in objs\n    delete each.scriptResult for each in objs\n    data = [JSON.stringify objs,null, 4]\n    blob = new Blob(data, {type: \"application/json;charset=utf-8\"})\n    saveAs(blob,'tinkertools-user-db.json')\n\n  $(\".all-user-file-import\").click ->\n    bootbox.dialog\n      title: \"Select a tinkertools db file to be uploaded (JSON)\"\n      message: '<input type=\"file\" id=\"fileName\" onchange=\"startRead()\"/>Preview:<textarea id=\"fileContents\" />'\n      buttons:\n        success:\n          label: \"Import\"\n          className: \"btn-success\"\n          callback: ()->\n            try\n              objs = JSON.parse $('#fileContents').val()\n            catch e\n              alert 'Syntax error in upload file - Expecting JSON'\n              return\n            Scripts.insert each for each in objs\n\n\n#******************** Helpers\n\nTemplate.AdminTools.helpers\n  userNames: ->\n    allEntries = Scripts.find().fetch()\n    all = (each.userID for each in allEntries)\n    nodups = all.filter (v, i, a)->\n      a.indexOf(v) == i\n    if nodups.length == 0\n      return []\n    return nodups\n\n  userName: ->\n    @\n\n  userAccountNames: ->\n    allEntries = Meteor.call 'allUserIDs',  (err,res)->\n      Session.set 'allUserIDs', res\n    return Session.get 'allUserIDs'\n\n\n  userAccountName: ->\n    @\n\n  usersOnline: ->\n    Meteor.users.find({ \"status.online\": true })\n\n  userOnline: ->\n    @.emails[0].address\n\n  serverURLs: ->\n    allEntries = Scripts.find().fetch()\n    all = (each.serverURL for each in allEntries)\n    nodups = all.filter (v, i, a)->\n      a.indexOf(v) == i\n    if nodups.length == 0\n      return []\n    return nodups\n\n  serverURL: ->\n    @"
  ]
}