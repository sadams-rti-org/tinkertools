{
  "version": 3,
  "file": "OtherGraphButtons.js",
  "sourceRoot": "",
  "sources": [
    "OtherGraphButtons.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "Template.OtherGraphButtons.rendered = ->\n  $(\".graph-script-file-import\").click ->\n    bootbox.dialog\n      title: \"Select a script file to be uploaded into this graph only\"\n      message: '<input type=\"file\" id=\"fileName\" onchange=\"startRead()\"/>Preview:<textarea id=\"fileContents\" />'\n      buttons:\n        success:\n          label: \"Import\"\n          className: \"btn-success\"\n          callback: ()->\n            try\n              objs = JSON.parse $('#fileContents').val()\n            catch e\n              alert 'Syntax error in upload file - Expecting JSON'\n              debugger\n              return\n            (each.userID = Session.get('userID')) for each in objs\n            (each.graphName = Session.get('graphName')) for each in objs\n            (each.serverURL = Session.get('serverURL')) for each in objs\n            (each.tinkerPopVersion = Session.get('tinkerPopVersion')) for each in objs\n            if (Session.get 'serverURL') == window.BluemixGraphService\n              (each.bluemixAPI = window.bluemixAPI) for each in objs\n              (each.bluemixUsername = window.bluemixUsername) for each in objs\n              (each.bluemixPassword = window.bluemixPassword) for each in objs\n            Scripts.insert each for each in objs\n            console.log objs\n\n  $(\".graph-script-file-export\").click ->\n    objs = Scripts.find({userID: Session.get('userID'),serverURL: Session.get('serverURL'), graphName: Session.get('graphName')}).fetch()\n    delete each._id for each in objs\n    delete each.bluemixAPI for each in objs\n    delete each.bluemixUsername for each in objs\n    delete each.bluemixPassword for each in objs\n    data = [JSON.stringify objs,null, 4]\n    blob = new Blob(data, {type: \"application/json;charset=utf-8\"})\n    saveAs(blob,'gremlin-scripts-from-'+Session.get('graphName')+'.json')\n\n  $(\".graph-file-import-form\").fileupload({url:'/upload'})\n  $(\".graphML-file-import\").click ->\n    bootbox.dialog\n      title: \"Select a GraphML file to be uploaded into this graph\"\n      message: '<input type=\"file\" id=\"fileName\" onchange=\"window.fileSelected(this.files)\"/>Preview:<textarea id=\"fileContents\" />'  #Blaze.toHTML(Template.GraphUploadPopUp)\n      buttons:\n        success:\n          label: \"Upload and Install\"\n          className: \"btn-success\"\n          callback: ()->\n            #NProgress.configure({ parent: '.progress-goes-here', showSpinner: true,})\n            #NProgress.start()\n            formData = new FormData()\n            for file in window.FilesToUpload\n              uploadName = file.name\n              formData.append('file', file, uploadName)\n              request = new XMLHttpRequest()\n              request.open(\"POST\", 'http://'+window.thisServerAddress+\"/upload\")\n              console.log 'uploading file',file.name\n              request.send(formData)\n              Meteor.call 'onceFileExistsOnServer', window.thisServerAddress, file.name, (er,rs)->\n                if rs\n                  uploadNames = (each.name for each in window.FilesToUpload)\n                  if uploadNames.length > 0\n                    script = \"filesToUpload=\"+(JSON.stringify uploadNames)+\"\\n\n                      filesToUpload.each{fileName->\\n\n                        g.loadGraphML('http://\"+window.thisServerAddress+\"/files/'+fileName)\\n\n                        println 'Finished loading '+fileName\\n\n                      }\"\n                    console.log script\n                    if (Session.get \"usingWebSockets\")\n                      window.socketToJanus.onmessage = (msg) ->\n                        endTime = Date.now()\n                        data = msg.data\n                        json = JSON.parse(data)\n                        if json.status.code >= 500\n                          alert \"Error in processing Gremlin script: \"+json.status.message\n                        else\n                          if json.status.code == 204\n                            results = []\n                          else\n                            results = json.result.data\n                          callback(results)\n                      request =\n                        requestId: uuid.new(),\n                        op:\"eval\",\n                        processor:\"\",\n                        args:{gremlin: script, bindings: {}, language: \"gremlin-groovy\"}\n                      startTime = Date.now()\n                      window.socketToJanus.send(JSON.stringify(request))\n                    else\n                      Meteor.call 'runScript', Session.get('userID'), Session.get('serverURL'),(Session.get 'tinkerPopVersion'),(Session.get 'graphName'),'Built-in GraphML Loader',script, (er,rs)->\n                        console.log er,rs\n                        if er\n                          alert 'Failed to load file, try again, or check file'\n                        if rs.success == true\n                          window.deleteFilesOnServer rs.results\n                          #NProgress.done()\n                        else\n                          #NProgress.done()\n                          debugger\n                else\n                  #NProgress.done()\n                  debugger\n\n  $(\".graphSON-file-import\").click ->   #NOTE this implementation assumes the target graph can reach out of port 80 to the tinkertools server, be sure of the firewall on the graph server\n    bootbox.dialog\n      title: \"Select a GraphSON file to be uploaded into this graph\"\n      message: '<input type=\"file\" id=\"fileName\" onchange=\"window.fileSelected(this.files)\"/>Preview:<textarea id=\"fileContents\" />'  #Blaze.toHTML(Template.GraphUploadPopUp)\n      buttons:\n        success:\n          label: \"Upload and Install\"\n          className: \"btn-success\"\n          callback: ()->\n            #NProgress.configure({ parent: '.progress-goes-here', showSpinner: true,})\n           # NProgress.start()\n            formData = new FormData()\n            for file in window.FilesToUpload\n              uploadName = file.name\n              formData.append('file', file, uploadName)\n              request = new XMLHttpRequest()\n              request.open(\"POST\", 'http://'+window.thisServerAddress+\"/upload\")\n              console.log 'uploading file',file.name\n              request.send(formData)\n              Meteor.call 'onceFileExistsOnServer', window.thisServerAddress, file.name, (er,rs)->\n                if rs\n                  uploadNames = (each.name for each in window.FilesToUpload)\n                  if uploadNames.length > 0\n                    script = \"filesToUpload=\"+(JSON.stringify uploadNames)+\"\\n\n                      filesToUpload.each{fileName->\\n\n                        g.loadGraphSON('http://\"+window.thisServerAddress+\"/files/'+fileName)\\n\n                        println 'Finished loading '+fileName\\n\n                      }\"\n                    console.log script\n                    if (Session.get \"usingWebSockets\")\n                      window.socketToJanus.onmessage = (msg) ->\n                        data = msg.data\n                        json = JSON.parse(data)\n                        if json.status.code >= 500\n                          alert \"Error in processing Gremlin script: \"+json.status.message\n                        else\n                          if json.status.code == 204\n                            results = []\n                          else\n                            results = json.result.data\n                          callback(results)\n                      request =\n                        requestId: uuid.new(),\n                        op:\"eval\",\n                        processor:\"\",\n                        args:{gremlin: script, bindings: {}, language: \"gremlin-groovy\"}\n                      startTime = Date.now()\n                      window.socketToJanus.send(JSON.stringify(request))\n                    else\n                      Meteor.call 'runScript', (Session.get 'userID'),(Session.get 'serverURL'),(Session.get 'tinkerPopVersion'),(Session.get 'graphName'),'Built-in GraphSON Loader',script, (er,rs)->\n                        console.log er,rs\n                        if er\n                          alert 'Failed to load file, try again, or check file'\n                        if rs.success == true\n                          window.deleteFilesOnServer rs.results\n                        else\n                          #NProgress.done()\n              #NProgress.done()\n\n  $('.csv-files-import').click ->\n    bootbox.dialog\n      title: \"Select a CSV Ingestion Template and one or more CSV files to Ingest\"\n      message: '<input type=\"file\" id=\"csv-template-file\" onchange=\"window.csvTemplateFileSelected(this.files)\" />Preview of CSV Ingest Template:<textarea id=\"csvTemplateFileContents\" /><input type=\"file\" id=\"files\" onchange=\"window.filesSelected(this.files)\" multiple/>Preview:<textarea id=\"fileContents\" />'\n      buttons:\n        success:\n          label: \"Upload and Install\"\n          className: \"btn-success\"\n          callback: ()->\n            #NProgress.configure({ parent: '.progress-goes-here', showSpinner: false,})\n            #NProgress.start()\n            Session.set 'totalRecordsParsed', 0\n            $('#csv-template-file').parse\n              config:\n                header: true\n                skipEmptyLines:true\n                chunk: (chunk, handle)->\n                  #NProgress.inc()\n                  file = handle.fileBeingParsed\n                  console.log chunk\n                  window.CSVIngestTemplate = processCSVTemplateRows(chunk.data)\n              before: (file, inputElem)->\n                console.log 'Parsing CSV template file:', file.name\n                Session.set 'fileBeingParsed', file.name\n                Session.set 'recordsParsed',0\n              complete: (file)->\n                if file\n                  console.log 'Completed',file.name\n                console.log 'first...'\n                await firstPass()\n                console.log 'second'\n                await midPass()\n                console.log 'adding twigs and leaves'\n                window.prom = wsp.open()\n                debugger\n                $('#files').parse\n                  config:\n                    header: true\n                    skipEmptyLines:true\n                    chunk: (results, parser)->\n                      console.log \"parsed chunk = \",results.data\n                      ingestCSVRecordsUsingTemplate(results.data, window.CSVIngestTemplate, prom,(err,res)->\n                        #console.log \"Result of ingest = \",res\n                      )\n                    complete: (results,file)->\n                      if file\n                        console.log 'Completed',file.name\n                      #prom.then((response)-> console.log \"Finished with promises = \", response)\n\n\nimport WebSocketAsPromised from 'websocket-as-promised'\nwindow.wsap = WebSocketAsPromised\nwsUrl = \"ws://localhost:8182/gremlin\"\nwindow.wsp = new WebSocketAsPromised(wsUrl,\n  packMessage: (data)->\n    JSON.stringify(data)\n  unpackMessage: (message)->\n    JSON.parse(message)\n  attachRequestId: (data, requestId)->\n    Object.assign({requestId: requestId}, data)\n  extractRequestId: (data)->\n    data && data.requestId\n)\nwindow.wsp.onMessage.addListener((message)-> console.log JSON.parse(message))\n\n\n\ningestCSVRecordsUsingTemplate = (rows, template, priorPromise, callback) ->\n  requests = []\n  for row in rows\n    #console.log \"row = \",row\n    #process verts first\n    verts2Create = []\n    verts2FindOrCreate = []\n    for k1,vTemp of template.verts\n      vert = {label: vTemp.label, id: Number(vTemp.uid), properties:{_class: [{value:vTemp._class}]}, propsToMatch:{}, propsToAdd:{}}\n      for k2,prop of vTemp.props\n        incomingValue = row[prop.property]\n        if incomingValue\n          if prop.dataType == \"String\" then outgoingValue = incomingValue.toString()\n          if prop.dataType == \"Single\" then outgoingValue = Number(incomingValue)\n          if prop.dataType == \"Double\" then outgoingValue = Number(incomingValue)\n          if prop.dataType == \"Bool\" then outgoingValue = JSON.parse(incomingValue.toLowerCase())\n          vert.properties[prop.property] = [{value: outgoingValue}]\n          if vert.properties[prop.findIt] == \"TRUE\"\n            vert.propsToMatch[prop.property] = [{value: outgoingValue}]\n          else\n            vert.propsToAdd[prop.property] = [{value: outgoingValue}]\n      if vert.propsToMatch == {}\n        verts2Create.push vert\n      else\n        verts2FindOrCreate.push vert\n    #process edges\n    edges2FindOrCreate = []\n    for k1,eTemp of template.edges\n      edge = {label: eTemp.label, id: Number(eTemp.uid), properties:{}, outV: Number(eTemp.fromV), inV: Number(eTemp.toV)}\n      for k2,prop of eTemp.props\n        incomingValue = row[prop.property]\n        if incomingValue\n          if prop.dataType == \"String\" then outgoingValue = incomingValue.toString()\n          if prop.dataType == \"Single\" then outgoingValue = JSON.parse(incomingValue)\n          if prop.dataType == \"Double\" then outgoingValue = JSON.parse(incomingValue)\n          if prop.dataType == \"Bool\" then outgoingValue = JSON.parse(incomingValue.toLowerCase())\n          edge.properties[prop.property] = outgoingValue\n      edges2FindOrCreate.push edge\n      #NOTE that edges2Create is ignored in this version\n    bindings = {verts2Create: verts2Create, verts2FindOrCreate: verts2FindOrCreate, edges2FindOrCreate: edges2FindOrCreate, edges2Create:[], transactionContext: \"ingesting from CSV\"}\n    #console.log \"bindings ready to send = \",bindings\n    if (Session.get \"usingWebSockets\")\n      request =\n        op:\"eval\",\n        processor:\"\",\n        args:{gremlin: ingestionScript(), bindings: bindings, language: \"gremlin-groovy\"}\n      requests.push JSON.parse(JSON.stringify(request))\n    else\n      Meteor.call 'runScript', Session.get('userID'), Session.get('serverURL'),(Session.get 'tinkerPopVersion'), Session.get('graphName'),'CSV Ingester', ingestionScript(), bindings, (error,result)->\n        callback(result.results)\n  #console.log \"Requests = \",requests\n  wait = (ms)->\n    new Promise((resolve)-> setTimeout(resolve,ms))\n  sendIt = (req)->\n    await wait(100)\n    wsp.sendRequest(req,{requestId: uuid.new()})\n\n  respondIt = (response)->\n    console.log  \"resp=\",response\n  for req in requests\n    window.prom = window.prom.then(sendIt.bind(null,req))\n    window.prom = window.prom.then(respondIt)\n\n\n\nfirstPass = ()->\n  #First pass to locate and find/create roots and low branch verts\n  new Promise (resolve) ->\n    window.verts2EnsureCreation = {}\n    $('#files').parse\n      config:\n        header: true\n        skipEmptyLines:true\n        step: (results, parser)->\n          row = results.data[0]\n          collectRootsAndLowBranchVerts(row, window.CSVIngestTemplate)\n        complete: (results,file)->\n          resolve()\n\nmidPass = ()->\n  new Promise (resolve) ->\n    ingestVertices(Object.values(window.verts2EnsureCreation), (err,res)->\n      console.log res\n      resolve()\n    )\n\ningestVertices = (verts2Create,callback)->\n  window.prom = wsp.open()\n  bindings = {verts2Create: verts2Create, verts2FindOrCreate: [], edges2FindOrCreate: [], edges2Create:[], transactionContext: \"ingesting from CSV\"}\n  console.log bindings\n  if (Session.get \"usingWebSockets\")\n    request =\n      requestId: uuid.new(),\n      op:\"eval\",\n      processor:\"\",\n      args:{gremlin: ingestionScript(), bindings: bindings, language: \"gremlin-groovy\"}\n    startTime = Date.now()\n    wait = (ms)->\n      new Promise((resolve)-> setTimeout(resolve,ms))\n    sendIt = (req)->\n      await wait(100)\n      wsp.sendRequest(req,{requestId: uuid.new()})\n    respondIt = (response)->\n      console.log  \"resp=\",response\n      callback('no err',response)\n    window.prom = window.prom.then(sendIt.bind(null,request))\n    window.prom = window.prom.then(respondIt)\n  else\n    Meteor.call 'runScript', Session.get('userID'), Session.get('serverURL'),(Session.get 'tinkerPopVersion'), Session.get('graphName'),'CSV Ingester', ingestionScript(), bindings, (error,result)->\n      callback(result.results)\n\n\ncollectRootsAndLowBranchVerts = (row, template) ->\n  console.log \"looking for roots=\",row\n  #process verts first\n  for k1,vTemp of template.verts\n    vert = {label: vTemp.label, id: Number(vTemp.uid), properties:{_class: [{value:vTemp._class}]}, propsToMatch:{}, propsToAdd:{}}\n    for k2,prop of vTemp.props\n      incomingValue = row[prop.property]\n      if incomingValue\n        if prop.dataType == \"String\" then outgoingValue = incomingValue.toString()\n        if prop.dataType == \"Single\" then outgoingValue = Number(incomingValue)\n        if prop.dataType == \"Double\" then outgoingValue = Number(incomingValue)\n        if prop.dataType == \"Bool\" then outgoingValue = JSON.parse(incomingValue.toLowerCase())\n        vert.properties[prop.property] = [{value: outgoingValue}]\n        if prop.findIt == \"TRUE\"\n          vert.propsToMatch[prop.property] = [{value: outgoingValue}]\n        else\n          vert.propsToAdd[prop.property] = [{value: outgoingValue}]\n    if Object.keys(vert.propsToMatch).length == 0\n      a=1\n    else\n      console.log vert\n      window.verts2EnsureCreation[vert.label+':'+vert._class+':'+JSON.stringify(vert.propsToMatch)] = vert\n\n\n\n\n\ningestionScript = ()->\n  \"\"\"\n  //bindings include: {verts2FindOrCreate, edges2FindOrCreate, verts2Create, edges2Create}\n  vMap = [:]\n  vMapFull = [:]\n  eMapFull = [:]\n  eMultimatchMap = [:]\n  verts2FindOrCreate.collect { json ->\n      trav = g.V().hasLabel(json.label)\n      json.properties.each { key, val ->\n          trav = trav.has(key, val[0].value)\n          }\n      results = trav.toList()\n     if (results.size == 0) {oldV = null} else {oldV = results[0]}\n      if (oldV == null){\n          //create it\n          newV = g.addV(json.label).next()\n          json.properties.each { key, val ->\n              g.V(newV.id()).property(key, val[0].value).next()\n              }\n      } else {\n          //reference it\n          newV = oldV\n      }\n      vMap[json.id] = newV.id()\n      vMapFull[json.id] = newV\n  }\n\n\n  verts2Create.collect { json ->\n      newV = g.addV(json.label).next()\n      vMap[json.id] = newV.id()\n      vMapFull[json.id] = newV\n      json.properties.each { key, val ->\n          g.V(newV.id()).property(key, val[0].value).next()\n  }}\n\n  edges2FindOrCreate.collect { json ->\n      fromID = vMap[json.outV] ? vMap[json.outV] : json.outV\n      toID = vMap[json.inV] ? vMap[json.inV] : json.inV\n      /*cases to consider:\n          1) edge does not exist....create it and its properties\n          2) a single edge exists that matches to/from/label....use it and overwrite/add properties\n          3) multiple edges exist that match from/to/label, pick one and overwrite/add properties, and report it in return via eMultimatchMap[ incoming-json-id: chosen existing edge]\n      */\n\n      oldEdges = g.V(fromID).outE(json.label).as('e').inV().hasId(toID).select('e').toList()\n      if (oldEdges.size() == 0){  //none exists so create a new edge\n          newEdge=g.V(fromID).addE(json.label).to(g.V(toID)).next()\n          theEdge = newEdge\n      } else {\n          if (oldEdges.size() == 1){ //only one exists so use it\n              theEdge = oldEdges[0]\n          } else { //multiple exists so pick first one and use it and record the fact in eMultimatchMap\n              theEdge = oldEdges[0]\n              eMultimatchMap[json.id] = theEdge\n          }\n      }\n\n      eMapFull[json.id] = theEdge\n      json.properties.collect { key, val ->\n          g.E(theEdge.id()).property(key, val.value).next()\n\n  }}\n    edges2Create.collect { json ->\n        fromID = vMap[json.outV] //? vMap[json.outV] : json.outV\n        toID = vMap[json.inV] //? vMap[json.inV] : json.inV\n\n\n        newEdge=g.V(fromID).addE(json.label).to(g.V(toID)).next()\n        eMapFull[json.id] = newEdge\n        json.properties.collect { key, val ->\n            g.E(newEdge.id()).property(key, val.value).next()\n        }}\n\n\n  //answer the maps of old element ids to new elements\n  [vMap: vMap, vertMap: vMapFull, edgeMap: eMapFull, eMultimatchMap: eMultimatchMap]\n  \"\"\"\n\ningestionScriptWithBatches = ()->\n  \"\"\"\n  //given arrays of json for verts and edges, generate them into the graph\n  //batches =  incoming binding, an array of bindings for the following\n  //verts2FindOrCreate = incoming binding, an map of objects of properties to use to find existing vertices, or to create them if needed, keyed by fake vertID\n  /* Example:   (needs to be a full description of the verstex in case we need to create it\n  [\n      {label: \"Sensor\", id: 0, properties:{\"sensorID\": [{value: \"v000000ktsmkitch\"}]}}\n  ]\n  */\n  //verts2Create = incoming binding, an array of vertex-structured objects\n  //edges2Create = incoming binding, an array of edge-structured objects\n  //transactionContext = incoming binding, string declaring purpose of graph transaction (comes out in Kafka topic \"graphChange\")\n\n  batches.collect { bindings ->\n      verts2FindOrCreate = bindings.verts2FindOrCreate\n      verts2Create = bindings.verts2Create\n      edges2Create = bindings.edges2Create\n      transactionContext = bindings.transactionContext\n      vMap = [:]\n      vMapFull = [:]\n      eMapFull = [:]\n      verts2FindOrCreate.collect { json ->\n          trav = g.V().hasLabel(json.label)\n          json.properties.each { key, val ->\n              trav = trav.has(key, val[0].value)\n              }\n          results = trav.toList()\n         if (results.size == 0) {oldV = null} else {oldV = results[0]}\n          if (oldV == null){\n              //create it\n              newV = g.addV(json.label).next()\n              json.properties.each { key, val ->\n                  g.V(newV.id()).property(key, val[0].value).next()\n                  }\n          } else {\n              //reference it\n              newV = oldV\n          }\n          vMap[json.id] = newV.id()\n\n      }\n      verts2Create.collect { json ->\n          newV = g.addV(json.label).next()\n          vMap[json.id] = newV.id()\n          vMapFull[json.id] = newV\n          json.properties.each { key, val ->\n              g.V(newV.id()).property(key, val[0].value).next()\n      }}\n      edges2Create.collect { json ->\n          fromID = vMap[json.outV] ? vMap[json.outV] : json.outV\n          toID = vMap[json.inV] ? vMap[json.inV] : json.inV\n          newEdge=g.V(fromID).addE(json.label).to(g.V(toID)).next()\n          eMapFull[json.id] = newEdge\n          json.properties.collect { key, val ->\n              g.E(newEdge.id()).property(key, val.value).next()\n      }}\n      //answer the maps of old element ids to new elements\n      [vertMap: vMapFull, edgeMap: eMapFull]\n  }\n  \"\"\"\n\n\n\n\n\n\nwindow.filesSelected = (files)->\n  window.FilesToUpload = files\n  startRead()\n\nwindow.csvTemplateFileSelected = (file)->\n  window.CSVTemplateFileToUpload = file[0]\n  startReadingCSVTemplate()\n\nwindow.startReadingCSVTemplate = (evt)->\n  element = document.getElementById(\"csv-template-file\")\n  if element\n    if element.files[0].size > 10000000\n      return CSVgetAsTextPreview element.files[0]\n    else\n      return CSVgetAsText element.files[0]\n\nwindow.CSVgetAsTextPreview = (readFile)->\n  reader = new FileReader\n  reader.readAsText (readFile.slice(0,10000000)), \"UTF-8\"\n  reader.onload = csvTemplateFileLoaded\nwindow.CSVgetAsText = (readFile)->\n  reader = new FileReader\n  reader.readAsText (readFile), \"UTF-8\"\n  reader.onload = csvTemplateFileLoaded\n\nwindow.csvTemplateFileLoaded = (evt)->\n  $('#csvTemplateFileContents').val(evt.target.result)\n\n\n\nprocessCSVTemplateRows = (rows) ->\n  verts = {}\n  edges = {}\n  indices = {}\n  for row in rows\n    if row.type == 'vertex'\n      uid = row.uid\n      delete row.type\n      delete row.uid\n      if !verts[uid]\n        verts[uid] =\n          uid: uid\n          type: 'vertex'\n          label: row['label/_class']\n          _class: row['label/_class']\n          props: []\n          edges: {}\n      if row.edgeLabel1\n        verts[uid]['edges'][row.edgeTo1] = row.edgeLabel1\n      delete row.edgeLabel1\n      delete row.edgeTo1\n      if row.edgeLabel2\n        verts[uid]['edges'][row.edgeTo2] = row.edgeLabel2\n      delete row.edgeLabel2\n      delete row.edgeTo2\n      if row.edgeLabel3\n        verts[uid]['edges'][row.edgeTo3] = row.edgeLabel3\n      delete row.edgeLabel3\n      delete row.edgeTo3\n      if row.edgeLabel4\n        verts[uid]['edges'][row.edgeTo4] = row.edgeLabel4\n      delete row.edgeLabel4\n      delete row.edgeTo4\n      if row.edgeLabel5\n        verts[uid]['edges'][row.edgeTo5] = row.edgeLabel5\n      delete row.edgeLabel5\n      delete row.edgeTo5\n      delete row['label/_class']\n\n      #handle index decls\n      if row.indexName\n        if !indices[row.indexName]\n          indices[row.indexName] =\n            indexName: row.indexName\n            indexType: row.indexType\n            keys: []\n        indices[row.indexName].keys.push\n          key: row.property\n          dataType: row.dataType\n          indexOrder: row.indexOrder\n      delete row.indexName\n      delete row.indexType\n      delete row.indexOrder\n\n      #Now add all the rest of the property attributes\n      verts[uid]['props'].push row\n\n    if row.type == 'edge'\n      uid = row.uid\n      delete row.type\n      delete row.uid\n      if !edges[uid]\n        edges[uid] =\n          uid: uid\n          type: 'edge'\n          label: row['label/_class']\n          props: []\n      delete row['label/_class']\n      if row.fromV\n        edges[uid].fromV = row.fromV\n        delete row.fromV\n      if row.toV\n        edges[uid].toV = row.toV\n        delete row.toV\n      edges[uid]['props'].push row\n\n  #post-process verts to collect simple edges\n  nextEdgeId = 1000\n  for key,vert of verts\n    for eKey,edgeLabel of vert.edges\n      edges[nextEdgeId] =\n        uid: nextEdgeId\n        type: 'edge'\n        label: edgeLabel\n        fromV: vert.uid\n        toV: JSON.parse(eKey)\n      nextEdgeId = nextEdgeId + 1\n\n  #post-process the indices to reduce single key cases\n  for key,index of indices\n    ordered = true\n    index.dataType = 'Ordered'\n    for key,specs of index.keys\n      if !specs.indexOrder\n        ordered = false\n        index.dataType = index.keys[0].dataType  #assume they are all the same in this case\n    if !ordered\n      delete index.keys\n\n  result = {\n    verts: verts\n    edges: edges\n    indices: indices\n  }\n  console.log result\n  return result\n\n\n\n\n\n###  mostly junk\n\n\n  console.log \"Starting 1st pass\"\n  window.verts2EnsureCreation = {}\n  await firstPass()\n  console.log \"Starting mid pass\"\n  await midPass()\n  console.log \"Starting 2nd pass\"\n  await secondPass()\n  console.log \"done\"\n\n\n\nfirstPass = ()->\n#First pass to locate and find/create roots and low branch verts\nnew Promise (resolve) ->\n  $('#files').parse\n    config:\n      header: true\n      skipEmptyLines:true\n      step: (results, parser)->\n        row = results.data\n        collectRootsAndLowBranchVerts(row, window.CSVIngestTemplate)\n      complete: (results,file)->\n        resolve()\n\nmidPass = ()->\nnew Promise (resolve) ->\n  ingestVertices(Object.values(window.verts2EnsureCreation), (err,res)->\n    console.log res\n    resolve()\n  )\n\nsecondPass = ()->\n#Second pass to add all high branches and leaf verts\nnew Promise (resolve) ->\n  $('#files').parse\n    config:\n      header: true\n      skipEmptyLines:true\n      chunk: (results, parser)->\n        ingestCSVRecordsUsingTemplate(results.data, window.CSVIngestTemplate, (err,res)->\n          console.log res\n        )\n      complete: (results,file)->\n        if file\n          console.log 'Completed',file.name\n        resolve()\n\n\ningestVertices = (verts2Create,callback)->\nbindings = {verts2Create: verts2Create, verts2FindOrCreate: [], edges2FindOrCreate: [], edges2Create:[], transactionContext: \"ingesting from CSV\"}\nconsole.log bindings\nif (Session.get \"usingWebSockets\")\n  window.socketToJanus.onmessage = (msg) ->\n    endTime = Date.now()\n    data = msg.data\n    json = JSON.parse(data)\n    if json.status.code >= 500\n      alert \"Error in processing Gremlin script: \"+json.status.message\n    else\n      if json.status.code == 204\n        results = []\n      else\n        results = json.result.data\n      callback(results)\n  request =\n    requestId: uuid.new(),\n    op:\"eval\",\n    processor:\"\",\n    args:{gremlin: ingestionScript(), bindings: bindings, language: \"gremlin-groovy\"}\n  startTime = Date.now()\n  window.socketToJanus.send(JSON.stringify(request))\nelse\n  Meteor.call 'runScript', Session.get('userID'), Session.get('serverURL'),(Session.get 'tinkerPopVersion'), Session.get('graphName'),'CSV Ingester', ingestionScript(), bindings, (error,result)->\n    callback(result.results)\n\n\ncollectRootsAndLowBranchVerts = (row, template) ->\n#process verts first\nfor k1,vTemp of template.verts\n  vert = {label: vTemp.label, id: Number(vTemp.uid), properties:{_class: [{value:vTemp._class}]}, propsToMatch:{}, propsToAdd:{}}\n  for k2,prop of vTemp.props\n    incomingValue = row[prop.property]\n    if incomingValue\n      if prop.dataType == \"String\" then outgoingValue = incomingValue.toString()\n      if prop.dataType == \"Single\" then outgoingValue = Number(incomingValue)\n      if prop.dataType == \"Double\" then outgoingValue = Number(incomingValue)\n      if prop.dataType == \"Bool\" then outgoingValue = JSON.parse(incomingValue.toLowerCase())\n      vert.properties[prop.property] = [{value: outgoingValue}]\n      if vert.properties[prop.findIt] == \"TRUE\"\n        vert.propsToMatch[prop.property] = [{value: outgoingValue}]\n      else\n        vert.propsToAdd[prop.property] = [{value: outgoingValue}]\n  if vert.propsToMatch == {}\n  else\n    window.verts2EnsureCreation[vert.label+':'+vert._class+':'+JSON.stringify(vert.propsToMatch)] = vert\n\n\n###"
  ]
}