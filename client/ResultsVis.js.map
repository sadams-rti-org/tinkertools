{
  "version": 3,
  "file": "ResultsVis.js",
  "sourceRoot": "",
  "sources": [
    "ResultsVis.coffee"
  ],
  "names": [],
  "mappings": ";AAAA;AAAA,MAAA,cAAA,EAAA,2BAAA,EAAA,iBAAA,EAAA,cAAA,EAAA,gBAAA,EAAA,gBAAA,EAAA,cAAA,EAAA,4BAAA,EAAA,MAAA,EAAA,aAAA,EAAA,eAAA,EAAA,gBAAA,EAAA,cAAA,EAAA,gBAAA,EAAA,cAAA,EAAA,WAAA,EAAA,gBAAA,EAAA,iBAAA,EAAA,iCAAA,EAAA,YAAA,EAAA,cAAA,EAAA,eAAA,EAAA,eAAA,EAAA,eAAA,EAAA,eAAA,EAAA,4BAAA,EAAA,WAAA,EAAA,iBAAA,EAAA,gBAAA,EAAA,cAAA,EAAA,aAAA,EAAA,qBAAA,EAAA,cAAA,EAAA,sBAAA,EAAA,qCAAA,EAAA,SAAA,EAAA,oBAAA,EAAA,UAAA,EAAA,4BAAA,EAAA,iBAAA,EAAA,YAAA,EAAA,YAAA,EAAA,YAAA,EAAA,YAAA,EAAA,mBAAA,EAAA,cAAA,EAAA,eAAA,EAAA,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EAAA,iBAAA,EAAA,eAAA,EAAA,wBAAA,EAAA,cAAA,EAAA;;EAAA,QAAQ,CAAC,UAAU,CAAC,QAApB,GAA+B,QAAA,CAAA,CAAA;AAC7B,QAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,EAAA,SAAA,EAAA,GAAA,EAAA,EAAA,EAAA;IAAA,OAAO,CAAC,GAAR,CAAY,sBAAZ,EAAmC,cAAnC;IACA,OAAO,CAAC,GAAR,CAAY,iBAAZ,EAA+B,MAA/B;IACA,OAAO,CAAC,GAAR,CAAY,gBAAZ,EAA8B,IAA9B;IACA,MAAM,CAAC,QAAP,CAAA;IACA,OAAO,CAAC,GAAR,CAAY,sBAAZ,EAAmC,cAAnC;IACA,KAAA,GAAQ,OAAO,CAAC,GAAR,CAAY,aAAZ;IACR,OAAO,CAAC,GAAR,CAAY,iBAAZ,EAA+B,MAAA,CAAA,CAAQ,CAAC,MAAT,CAAA,CAA/B;IACA,EAAA,GAAK,IAAI,GAAG,CAAC,OAAR,CAAgB,KAAK,CAAC,KAAtB;IACL,EAAA,GAAK,IAAI,GAAG,CAAC,OAAR,CAAgB,KAAK,CAAC,KAAtB;IACL,MAAM,CAAC,UAAU,CAAC,OAAlB,CAA0B;MAAC,KAAA,EAAO,EAAR;MAAY,KAAA,EAAO;IAAnB,CAA1B;IACA,YAAA,CAAA;IACA,IAAI,OAAO,CAAC,GAAR,CAAY,WAAZ,CAAJ;MACE,SAAA,GAAY,OAAO,CAAC,GAAR,CAAY,WAAZ,EADd;KAAA,MAAA;MAGE,SAAA,GAAY,CAAA,EAHd;;AAIA;IAAA,KAAA,qCAAA;;MACE,MAAA,GAAS,SAAU,CAAA,IAAI,CAAC,EAAL;MACnB,IAAG,MAAH;QACE,IAAI,CAAC,CAAL,GAAS,MAAM,CAAC;QAChB,IAAI,CAAC,CAAL,GAAS,MAAM,CAAC;QAChB,IAAI,CAAC,OAAL,GAAe,MAHjB;;IAFF;WAMA,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAA/C,CAAsD,KAAK,CAAC,KAA5D;EAtB6B,EAA/B;;;EA6BA,QAAQ,CAAC,UAAU,CAAC,OAApB,CACE;IAAA,mBAAA,EAAqB,QAAA,CAAA,CAAA;aACnB,OAAO,CAAC,GAAR,CAAY,qBAAZ;IADmB,CAArB;IAEA,kBAAA,EAAoB,QAAA,CAAA,CAAA;aAClB;IADkB,CAFpB;IAIA,YAAA,EAAc,QAAA,CAAA,CAAA;MACZ,IAAG,MAAM,CAAC,UAAV;QACE,YAAA,CAAA,EADF;;aAEA,OAAO,CAAC,GAAR,CAAY,gBAAZ;IAHY,CAJd;IAQA,WAAA,EAAa,QAAA,CAAA,CAAA;aACX;IADW,CARb;IAUA,QAAA,EAAU,QAAA,CAAA,CAAA;MACR,IAAI,OAAO,CAAC,GAAR,CAAY,UAAZ,CAAJ;eAAkC,OAAO,CAAC,GAAR,CAAY,UAAZ,EAAlC;OAAA,MAAA;eAA+D,OAA/D;;IADQ,CAVV;IAYA,SAAA,EAAW,QAAA,CAAA,CAAA;MACT,IAAI,OAAO,CAAC,GAAR,CAAY,WAAZ,CAAJ;eAAmC,OAAO,CAAC,GAAR,CAAY,WAAZ,EAAnC;OAAA,MAAA;eAAiE,QAAjE;;IADS;EAZX,CADF,EA7BA;;;EA+CA,MAAM,CAAC,oBAAP,GAA8B,QAAA,CAAA,CAAA;AAC5B,QAAA,QAAA,EAAA,KAAA,EAAA,WAAA,EAAA,OAAA,EAAA,MAAA,EAAA,SAAA,EAAA,CAAA,EAAA,WAAA,EAAA,aAAA,EAAA;IAAA,OAAO,CAAC,GAAR,CAAY,aAAZ,EAA2B;MAAC,KAAA,EAAM,EAAP;MAAU,KAAA,EAAM;IAAhB,CAA3B;IACA,KAAA,GAAQ,cAAA,CAAe,OAAO,CAAC,GAAR,CAAY,cAAZ,CAAf;IACR,KAAA,GAAQ,CAAC,CAAC,IAAF,CAAO,KAAP,EAAa,QAAA,CAAC,IAAD,CAAA;AACnB,aAAO,IAAI,CAAC;IADO,CAAb;IAER,KAAA,GAAQ,WAAA,CAAY,OAAO,CAAC,GAAR,CAAY,cAAZ,CAAZ;IACR,WAAA,GAAc,cAAA,CAAe,KAAf;IACd,aAAA,GAAgB;IAChB,aAAA;;AAAsB;MAAA,KAAA,uCAAA;;sBAAL,CAAC,CAAC;MAAG,CAAA;;;IACtB,WAAA,GAAc,CAAC,CAAC,UAAF,CAAa,WAAb,EAA0B,aAA1B;IACd,IAAG,WAAW,CAAC,MAAZ,KAAsB,CAAzB;AACE,aAAO,cAAA,CAAe,KAAf,EAAsB,KAAtB,EADT;;IAEA,QAAA,GAAW;MAAC,IAAA,EAAM;IAAP;IACX,MAAA,GAAS;IACT,IAAI,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAJ;MACE,MAAM,CAAC,aAAa,CAAC,SAArB,GAAiC,QAAA,CAAC,GAAD,CAAA;AAC/B,YAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA;QAAA,OAAA,GAAU,IAAI,CAAC,GAAL,CAAA;QACV,IAAA,GAAO,GAAG,CAAC;QACX,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,IAAX;QACP,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,IAAoB,GAAvB;iBACE,KAAA,CAAM,sCAAA,GAAuC,IAAI,CAAC,MAAM,CAAC,OAAzD,EADF;SAAA,MAAA;UAGE,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,KAAoB,GAAvB;YACE,OAAA,GAAU,GADZ;WAAA,MAAA;YAGE,OAAA,GAAU,IAAI,CAAC,MAAM,CAAC,KAHxB;;UAIA,qBAAA,CAAsB,OAAtB;UACA,qBAAA,CAAsB,KAAtB;UACA,qBAAA,CAAsB,KAAtB;iBACA,OAAO,CAAC,GAAR,CAAY,mBAAZ,EAAiC;YAAC,QAAA,EAAU,KAAX;YAAkB,KAAA,EAAO;UAAzB,CAAjC,EAVF;;MAJ+B;MAejC,OAAA,GACE;QAAA,SAAA,EAAW,IAAI,CAAC,GAAL,CAAA,CAAX;QACA,EAAA,EAAG,MADH;QAEA,SAAA,EAAU,EAFV;QAGA,IAAA,EAAK;UAAC,OAAA,EAAS,MAAV;UAAkB,QAAA,EAAU,QAA5B;UAAsC,QAAA,EAAU;QAAhD;MAHL;MAIF,SAAA,GAAY,IAAI,CAAC,GAAL,CAAA;aACZ,MAAM,CAAC,aAAa,CAAC,IAArB,CAA0B,IAAI,CAAC,SAAL,CAAe,OAAf,CAA1B,EAtBF;KAAA,MAAA;aAwBE,MAAM,CAAC,IAAP,CAAY,WAAZ,EAAyB,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAzB,EAAgD,OAAO,CAAC,GAAR,CAAY,WAAZ,CAAhD,EAA0E,OAAO,CAAC,GAAR,CAAY,kBAAZ,CAA1E,EAA2G,OAAO,CAAC,GAAR,CAAY,WAAZ,CAA3G,EAAoI,2BAApI,EAAiK,MAAjK,EAAyK,QAAzK,EAAmL,QAAA,CAAC,KAAD,EAAO,MAAP,CAAA;QACjL,qBAAA,CAAsB,MAAM,CAAC,OAA7B;QACA,qBAAA,CAAsB,KAAtB;QACA,qBAAA,CAAsB,KAAtB;eACA,OAAO,CAAC,GAAR,CAAY,mBAAZ,EAAiC;UAAC,QAAA,EAAU,KAAX;UAAkB,KAAA,EAAO;QAAzB,CAAjC;MAJiL,CAAnL,EAxBF;;EAd4B;;EA4C9B,MAAM,CAAC,qBAAP,GAA+B,QAAA,CAAC,KAAD,CAAA;AAC7B,QAAA,GAAA,EAAA,KAAA,EAAA;IAAA,KAAA;;AAAqK;MAAA,KAAA,uCAAA;;sBAA5J;UAAC,EAAA,EAAI,MAAA,CAAO,CAAC,CAAC,EAAT,CAAL;UAAkB,KAAA,EAAO,cAAA,CAAe,CAAf,EAAiB,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAjB,CAAzB;UAA0E,cAAA,EAAgB,IAA1F;UAAgG,cAAA,EAAgB,IAAhH;UAAsH,KAAA,EAAO,eAAA,CAAgB,CAAhB,CAA7H;UAAiJ,OAAA,EAAQ;QAAzJ;MAA4J,CAAA;;;IACrK,IAAG,MAAM,CAAC,UAAV;MACE,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAA/C,CAAsD,KAAtD,EADF;;IAEA,IAAG,CAAC,OAAO,CAAC,GAAR,CAAY,aAAZ,CAAD,CAAA,KAA+B,MAAlC;MACE,OAAO,CAAC,GAAR,CAAY,aAAZ,EAA2B;QAAC,KAAA,EAAM,EAAP;QAAU,KAAA,EAAM;MAAhB,CAA3B,EADF;;IAEA,GAAA,GAAM,OAAO,CAAC,GAAR,CAAY,aAAZ;IACN,GAAG,CAAC,KAAJ,GAAU,GAAG,CAAC,KAAK,CAAC,MAAV,CAAiB,KAAjB;IACV,OAAO,CAAC,GAAR,CAAY,aAAZ,EAA0B,GAA1B;IACA,IAAG,GAAG,CAAC,KAAK,CAAC,MAAV,GAAmB,GAAG,CAAC,KAAK,CAAC,MAA7B,GAAsC,CAAzC;aACE,OAAO,CAAC,GAAR,CAAY,qBAAZ,EAAmC,IAAnC,EADF;KAAA,MAAA;aAGE,OAAO,CAAC,GAAR,CAAY,qBAAZ,EAAmC,KAAnC,EAHF;;EAT6B;;EAc/B,MAAM,CAAC,qBAAP,GAA+B,QAAA,CAAC,KAAD,CAAA;AAC7B,QAAA,CAAA,EAAA;IAAA,KAAA;;AAA2H;MAAA,KAAA,uCAAA;;sBAAlH;UAAC,EAAA,EAAI,MAAA,CAAO,CAAC,CAAC,EAAT,CAAL;UAAmB,KAAA,EAAO,CAAC,CAAC,KAA5B;UAAmC,IAAA,EAAM,MAAA,CAAO,CAAC,CAAC,IAAT,CAAzC;UAAyD,EAAA,EAAI,MAAA,CAAO,CAAC,CAAC,GAAT,CAA7D;UAA4E,KAAA,EAAO,eAAA,CAAgB,CAAhB,CAAnF;UAAuG,OAAA,EAAQ;QAA/G;MAAkH,CAAA;;;IAC3H,IAAG,MAAM,CAAC,UAAV;MACE,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAA/C,CAAsD,KAAtD,EADF;;IAEA,IAAG,CAAC,OAAO,CAAC,GAAR,CAAY,aAAZ,CAAD,CAAA,KAA+B,MAAlC;MACE,OAAO,CAAC,GAAR,CAAY,aAAZ,EAA2B;QAAC,KAAA,EAAM,EAAP;QAAU,KAAA,EAAM;MAAhB,CAA3B,EADF;;IAEA,GAAA,GAAM,OAAO,CAAC,GAAR,CAAY,aAAZ,EALN;;IAOA,GAAG,CAAC,KAAJ,GAAU,GAAG,CAAC,KAAK,CAAC,MAAV,CAAiB,KAAjB,EAPV;;IASA,OAAO,CAAC,GAAR,CAAY,aAAZ,EAA0B,GAA1B;IACA,IAAG,GAAG,CAAC,KAAK,CAAC,MAAV,GAAmB,GAAG,CAAC,KAAK,CAAC,MAA7B,GAAsC,CAAzC;aACE,OAAO,CAAC,GAAR,CAAY,qBAAZ,EAAmC,IAAnC,EADF;KAAA,MAAA;aAGE,OAAO,CAAC,GAAR,CAAY,qBAAZ,EAAmC,KAAnC,EAHF;;EAX6B;;EAiB/B,MAAM,CAAC,cAAP,GAAwB,QAAA,CAAC,KAAD,EAAQ,KAAR,CAAA;AACtB,QAAA,CAAA,EAAA,CAAA,EAAA,WAAA,EAAA,KAAA,EAAA;IAAA,WAAA,GAAc,OAAO,CAAC,GAAR,CAAY,iBAAZ;IACd,KAAA;;AAAmJ;MAAA,KAAA,uCAAA;;sBAA1I;UAAC,EAAA,EAAI,MAAA,CAAO,CAAC,CAAC,EAAT,CAAL;UAAkB,KAAA,EAAO,cAAA,CAAe,CAAf,EAAiB,WAAjB,CAAzB;UAAwD,cAAA,EAAgB,IAAxE;UAA8E,cAAA,EAAgB,IAA9F;UAAoG,KAAA,EAAO,eAAA,CAAgB,CAAhB,CAA3G;UAA+H,OAAA,EAAQ;QAAvI;MAA0I,CAAA;;;IACnJ,KAAA;;AAA2H;MAAA,KAAA,uCAAA;;sBAAlH;UAAC,EAAA,EAAI,MAAA,CAAO,CAAC,CAAC,EAAT,CAAL;UAAmB,KAAA,EAAO,CAAC,CAAC,KAA5B;UAAmC,IAAA,EAAM,MAAA,CAAO,CAAC,CAAC,IAAT,CAAzC;UAAyD,EAAA,EAAI,MAAA,CAAO,CAAC,CAAC,GAAT,CAA7D;UAA4E,KAAA,EAAO,eAAA,CAAgB,CAAhB,CAAnF;UAAuG,OAAA,EAAQ;QAA/G;MAAkH,CAAA;;;IAC3H,CAAA,GAAI;MAAC,KAAA,EAAO,KAAR;MAAe,KAAA,EAAO;IAAtB;IACJ,OAAO,CAAC,GAAR,CAAY,aAAZ,EAA0B,CAA1B;IACA,IAAG,CAAC,CAAC,KAAK,CAAC,MAAR,GAAiB,CAAC,CAAC,KAAK,CAAC,MAAzB,GAAkC,CAArC;aACE,OAAO,CAAC,GAAR,CAAY,qBAAZ,EAAmC,IAAnC,EADF;KAAA,MAAA;aAGE,OAAO,CAAC,GAAR,CAAY,qBAAZ,EAAmC,KAAnC,EAHF;;EANsB;;EAWxB,MAAM,CAAC,eAAP,GAAyB,QAAA,CAAA,CAAA;AACvB,QAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA;IAAA,CAAA,GAAI,OAAO,CAAC,GAAR,CAAY,aAAZ;AACJ;IAAA,KAAA,qCAAA;;MACE,IAAI,CAAC,CAAL,GAAO,MAAM,CAAC,QAAP,CAAgB;QAAC,GAAA,EAAI,CAAL;QAAO,GAAA,EAAI;MAAX,CAAhB;MACP,IAAI,CAAC,CAAL,GAAO,MAAM,CAAC,QAAP,CAAgB;QAAC,GAAA,EAAI,CAAL;QAAO,GAAA,EAAI;MAAX,CAAhB;IAFT;WAGA,OAAO,CAAC,GAAR,CAAY,aAAZ,EAA2B,CAA3B;EALuB;;EAOzB,cAAA,GAAiB,QAAA,CAAC,GAAD,CAAA;AACf,QAAA;IAAA,KAAA,GAAQ;IACR,4BAAA,CAA6B,KAA7B,EAAoC,GAApC,EAAyC,MAAzC,EAAiD,QAAjD;AACA,WAAO;EAHQ;;EAKjB,WAAA,GAAc,QAAA,CAAC,GAAD,CAAA;AACZ,QAAA;IAAA,KAAA,GAAQ;IACR,4BAAA,CAA6B,KAA7B,EAAmC,GAAnC,EAAwC,MAAxC,EAAgD,MAAhD;AACA,WAAO;EAHK;;EAKd,cAAA,GAAiB,QAAA,CAAC,KAAD,CAAA;AACf,QAAA,IAAA,EAAA,WAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA;IAAA,WAAA,GAAc;IACY,KAAA,uCAAA;;MAA1B,WAAW,CAAC,IAAZ,CAAiB,IAAI,CAAC,GAAtB;IAA0B;IACC,KAAA,yCAAA;;MAA3B,WAAW,CAAC,IAAZ,CAAiB,IAAI,CAAC,IAAtB;IAA2B;AAG3B,WAAO,CAAC,CAAC,IAAF,CAAO,WAAP;EANQ;;EAQjB,4BAAA,GAA+B,QAAA,CAAC,UAAD,EAAa,GAAb,EAAkB,GAAlB,EAAuB,KAAvB,CAAA;AAC7B,QAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA;IAAA,IAAG,CAAC,OAAO,GAAP,KAAc,QAAf,CAAA,IAA4B,CAAC,OAAO,GAAP,KAAc,SAAf,CAA5B,IAAyD,CAAC,OAAO,GAAP,KAAc,QAAf,CAAzD,IAAqF,CAAC,OAAO,GAAP,KAAc,QAAf,CAArF,IAAiH,CAAC,OAAO,GAAP,KAAc,WAAf,CAAjH,IAAgJ,CAAE,GAAA,KAAO,IAAT,CAAnJ;AACE,aAAO,GADT;;IAEA,IAAG,KAAK,CAAC,OAAN,CAAc,GAAd,CAAH;;MAC4D,KAAA,qCAAA;;QAA1D,4BAAA,CAA6B,UAA7B,EAAwC,MAAxC,EAA+C,GAA/C,EAAmD,KAAnD;MAA0D,CAD5D;KAAA,MAAA;MAGE,IAAG,GAAI,CAAA,GAAA,CAAJ,IAAY,GAAI,CAAA,GAAA,CAAJ,KAAU,KAAzB;QACE,UAAU,CAAC,IAAX,CAAgB,GAAhB,EADF;OAAA,MAAA;AAG+D;QAAA,KAAA,uCAAA;;UAA7D,4BAAA,CAA6B,UAA7B,EAAwC,GAAI,CAAA,IAAA,CAA5C,EAAkD,GAAlD,EAAsD,KAAtD;QAA6D,CAH/D;OAHF;;AAOA,WAAO;EAVsB,EA9J/B;;;EA2KA,MAAA,GAAS,QAAA,CAAC,KAAD,EAAQ,IAAR,CAAA;AACP,QAAA;IAAA,OAAA,GAAU;AACV,WAAO,KAAK,CAAC,MAAb;MACE,OAAO,CAAC,IAAR,CAAa,KAAK,CAAC,MAAN,CAAa,CAAb,EAAgB,IAAhB,CAAb;IADF;AAEA,WAAO;EAJA;;EAMT,sBAAA,GAAyB,QAAA,CAAC,GAAD,EAAM,QAAN,CAAA;AACvB,QAAA,QAAA,EAAA,OAAA,EAAA,MAAA,EAAA;IAAA,IAAG,GAAG,CAAC,MAAJ,KAAc,CAAjB;AACE,aADF;;IAEA,QAAA,GAAW;MAAC,IAAA,EAAM;IAAP;IACX,MAAA,GAAS;IACT,IAAI,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAJ;MACE,MAAM,CAAC,aAAa,CAAC,SAArB,GAAiC,QAAA,CAAC,GAAD,CAAA;AAC/B,YAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA;QAAA,OAAA,GAAU,IAAI,CAAC,GAAL,CAAA;QACV,IAAA,GAAO,GAAG,CAAC;QACX,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,IAAX;QACP,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,IAAoB,GAAvB;iBACE,KAAA,CAAM,sCAAA,GAAuC,IAAI,CAAC,MAAM,CAAC,OAAzD,EADF;SAAA,MAAA;UAGE,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,KAAoB,GAAvB;YACE,OAAA,GAAU,GADZ;WAAA,MAAA;YAGE,OAAA,GAAU,IAAI,CAAC,MAAM,CAAC,KAHxB;;iBAIA,QAAA,CAAS,OAAT,EAPF;;MAJ+B;MAYjC,OAAA,GACE;QAAA,SAAA,EAAW,IAAI,CAAC,GAAL,CAAA,CAAX;QACA,EAAA,EAAG,MADH;QAEA,SAAA,EAAU,EAFV;QAGA,IAAA,EAAK;UAAC,OAAA,EAAS,MAAV;UAAkB,QAAA,EAAU,QAA5B;UAAsC,QAAA,EAAU;QAAhD;MAHL;MAIF,SAAA,GAAY,IAAI,CAAC,GAAL,CAAA;aACZ,MAAM,CAAC,aAAa,CAAC,IAArB,CAA0B,IAAI,CAAC,SAAL,CAAe,OAAf,CAA1B,EAnBF;KAAA,MAAA;aAqBE,MAAM,CAAC,IAAP,CAAY,WAAZ,EAAyB,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAzB,EAAgD,OAAO,CAAC,GAAR,CAAY,WAAZ,CAAhD,EAA0E,OAAO,CAAC,GAAR,CAAY,kBAAZ,CAA1E,EAA2G,OAAO,CAAC,GAAR,CAAY,WAAZ,CAA3G,EAAoI,2BAApI,EAAiK,MAAjK,EAAyK,QAAzK,EAAmL,QAAA,CAAC,KAAD,EAAO,MAAP,CAAA;eACjL,QAAA,CAAS,MAAM,CAAC,OAAhB;MADiL,CAAnL,EArBF;;EALuB;;EA8BzB,eAAA,GAAkB,QAAA,CAAC,KAAD,CAAA;AAEhB,QAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,UAAA,EAAA,EAAA,EAAA,SAAA,EAAA,KAAA;;IAAA,SAAA,GAAY,wBAAA,CAAyB,KAAzB;IACZ,UAAA,GAAa,CAAC,CAAC,MAAF,CAAS,CAAC,CAAC,IAAF,CAAO,SAAP,CAAT,EAA4B,QAAA,CAAC,CAAD,CAAA;AACvC,aAAO,CAAC,CAAC,iBAAF,CAAA;IADgC,CAA5B;IAGb,IAAA,GAAO;IACP,IAAA,GAAO,IAAA,GAAO;IACd,IAAA,GAAO,IAAA,GAAK,UAAL,GAAgB,KAAK,CAAC,IAAtB,GAA2B,aAA3B,GAAyC,KAAK,CAAC,EAA/C,GAAkD;IACzD,IAAA,GAAO,IAAA,GAAK,0BAAL,GAAgC,KAAK,CAAC,KAAtC,GAA4C;IACnD,KAAA,4CAAA;;MACE,KAAA,GAAQ,SAAU,CAAA,GAAA;MAClB,EAAA,GAAK,UAAA,GAAW,GAAX,GAAe,aAAf,GAA6B,KAA7B,GAAmC;MACxC,IAAA,GAAO,IAAA,GAAO;IAHhB;IAIA,IAAA,GAAO,IAAA,GAAO;IACd,IAAA,GAAO,IAAA,GAAO;AACd,WAAO;EAhBS;;EAkBlB,qBAAA,GAAwB,QAAA,CAAC,YAAD,EAAe,WAAf,CAAA;AACtB,QAAA,aAAA,EAAA,WAAA,EAAA,cAAA,EAAA,gBAAA,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,SAAA,EAAA,eAAA,EAAA,WAAA,EAAA,KAAA,EAAA,UAAA,EAAA,EAAA,EAAA,SAAA,EAAA;IAAA,KAAA,GAAQ,YAAY,CAAC;IACrB,SAAA,GAAY,wBAAA,CAAyB,KAAzB;IACZ,UAAA,GAAa,CAAC,CAAC,MAAF,CAAS,CAAC,CAAC,IAAF,CAAO,SAAP,CAAT,EAA4B,QAAA,CAAC,CAAD,CAAA;AACvC,aAAO,CAAC,CAAC,iBAAF,CAAA;IADgC,CAA5B;IAGb,EAAA,GAAK,KAAK,CAAC;IACX,IAAA,GAAO;IACP,IAAA,GAAO,IAAA,GAAO,wDAAP,GAAgE,EAAhE,GAAmE,UAAnE,GAA8E,WAA9E,GAA0F;IACjG,aAAA,GAAgB,0CAAA,GAA2C,EAA3C,GAA8C,kFAA9C,GAAiI,EAAjI,GAAoI;IACpJ,IAAG,WAAA,KAAe,QAAlB;MACE,WAAA,GAAc,0CAAA,GAA2C,EAA3C,GAA8C,uDAA9C,GAAsG,EAAtG,GAAyG,qBADzH;KAAA,MAAA;MAGE,WAAA,GAAc,0CAAA,GAA2C,EAA3C,GAA8C,mDAA9C,GAAkG,EAAlG,GAAqG,qBAHrH;;IAIA,gBAAA,GAAmB,2HAAA,GAA4H,EAA5H,GAA+H;IAClJ,cAAA,GAAiB,sHAAA,GAAuH,EAAvH,GAA0H;IAC3I,eAAA,GAAkB,yHAAA,GAA0H,EAA1H,GAA6H;IAC/I,SAAA,GAAY,wHAAA,GAAyH,EAAzH,GAA4H;IACxI,WAAA,GAAc,4EAAA,GAA6E,EAA7E,GAAgF,WAAhF,GAA4F,YAAY,CAAC,cAAzG,GAAwH,yBAAxH,GAAkJ,EAAlJ,GAAqJ;IACnK,IAAA,GAAO,IAAA,GAAK,6DAAL,GAAmE,aAAnE,GAAiF,eAAjF,GAAiG,SAAjG,GAA2G;IAClH,EAAA,GAAK,wBAAA,GAAyB,EAAzB,GAA4B,4BAA5B,GAAyD,WAAzD,GAAqE;IAC1E,IAAA,GAAO,IAAA,GAAO;IACd,EAAA,GAAK,2BAAA,GAA4B,KAAK,CAAC,KAAlC,GAAwC,gCAAxC,GAAyE,EAAzE,GAA4E,WAA5E,GAAwF,WAAxF,GAAoG,UAApG,GAA+G,GAA/G,GAAmH,IAAnH,GAAwH,WAAxH,GAAoI;IACzI,IAAA,GAAO,IAAA,GAAO;IACd,KAAA,4CAAA;;MACE,KAAA,GAAQ,SAAU,CAAA,GAAA;MAClB,EAAA,GAAK,UAAA,GAAW,GAAX,GAAe,wDAAf,GAAwE,EAAxE,GAA2E,SAA3E,GAAqF,GAArF,GAAyF,UAAzF,GAAoG,KAApG,GAA0G,0CAA1G,GAAqJ,EAArJ,GAAwJ,4CAAxJ,GAAqM,EAArM,GAAwM,WAAxM,GAAoN,WAApN,GAAgO,UAAhO,GAA2O,GAA3O,GAA+O,IAA/O,GAAoP,gBAApP,GAAqQ,cAArQ,GAAoR;MACzR,IAAA,GAAO,IAAA,GAAO;IAHhB;IAIA,IAAA,GAAO,IAAA,GAAO;IACd,IAAA,GAAO,IAAA,GAAO,6EAAP,GAAqF,EAArF,GAAwF,kCAAxF,GAA2H,EAA3H,GAA8H,OAA9H,GAAsI,WAAtI,GAAkJ;IACzJ,IAAA,GAAO,IAAA,GAAO;AACd,WAAO;EA/Be;;EAkCxB,MAAM,CAAC,SAAP,GAAmB,QAAA,CAAC,EAAD,EAAK,KAAL,CAAA;AACjB,QAAA,aAAA,EAAA,GAAA,EAAA,IAAA,EAAA;IAAA,IAAA,GAAO,aAAA,GAAgB,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAM,CAAA,EAAA;IAC5E,KAAA,GAAQ,CAAA,CAAE,qBAAA,GAAsB,IAAI,CAAC,EAA7B,CAAgC,CAAC,KAAjC,CAAA,CAAwC,CAAC,EAAzC,CAA4C,UAA5C;IACR,GAAA,GAAM,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAA/C,CAAA;WACN,GAAG,CAAC,MAAJ,CAAW;MAAC,EAAA,EAAG,IAAI,CAAC,EAAT;MAAa,OAAA,EAAS,CAAI;IAA1B,CAAX;EAJiB;;EAMnB,MAAM,CAAC,kBAAP,GAA4B,QAAA,CAAC,EAAD,EAAI,WAAJ,CAAA;AAC1B,QAAA,aAAA,EAAA,aAAA,EAAA;IAAA,IAAG,WAAA,KAAe,QAAlB;MACE,aAAA,GAAgB,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAM,CAAA,EAAA,EADvE;KAAA,MAAA;MAGE,aAAA,GAAgB,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAM,CAAA,EAAA,EAHvE;;IAIA,KAAA,GAAQ,CAAA;IACR,aAAA,GAAgB,wBAAA,CAAyB,aAAa,CAAC,OAAvC;IAChB,CAAA,CAAE,mBAAA,GAAoB,EAAtB,CAAyB,CAAC,IAA1B,CAA+B,QAAA,CAAA,CAAA;aAC7B,KAAM,CAAA,CAAA,CAAE,IAAF,CAAO,CAAC,IAAR,CAAa,MAAb,CAAA,CAAN,GAA8B,CAAA,CAAE,IAAF,CAAO,CAAC,GAAR,CAAA;IADD,CAA/B;WAEA,MAAM,CAAC,qBAAP,CAA6B,WAA7B,EAAyC,EAAzC,EAA4C,KAA5C,EAAkD,aAAlD;EAT0B;;EAW5B,MAAM,CAAC,qBAAP,GAA+B,QAAA,CAAC,WAAD,EAAc,EAAd,EAAkB,QAAlB,EAA4B,QAA5B,CAAA;AAC7B,QAAA,QAAA,EAAA,YAAA,EAAA,aAAA,EAAA,CAAA,EAAA,GAAA,EAAA,WAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,MAAA,EAAA;IAAA,CAAA,CAAE,2BAAA,GAA4B,EAA9B,CAAiC,CAAC,IAAlC,CAAA;IACA,WAAA,GAAc;AACd;IAAA,KAAA,qCAAA;;MACE,IAAG,QAAS,CAAA,GAAA,CAAT,KAAiB,MAApB;QACE,WAAW,CAAC,IAAZ,CAAiB,GAAjB,EADF;;IADF;IAGA,IAAG,WAAA,KAAe,QAAlB;MACE,aAAA,GAAgB,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAM,CAAA,EAAA,EADvE;KAAA,MAAA;MAGE,aAAA,GAAgB,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAM,CAAA,EAAA,EAHvE;;IAIA,MAAA,GAAS;IACT,IAAG,WAAW,CAAC,MAAZ,GAAqB,CAAxB;;MAEE,IAAG,WAAA,KAAe,QAAlB;QACE,MAAA,GAAS,MAAA,GAAS,qDADpB;OAAA,MAAA;QAGE,MAAA,GAAS,MAAA,GAAS,qDAHpB;;MAIA,QAAA,GAAW;QAAC,WAAA,EAAa,WAAd;QAA2B,GAAA,EAAK;MAAhC;MACX,IAAI,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAJ;QACE,MAAM,CAAC,aAAa,CAAC,SAArB,GAAiC,QAAA,CAAC,GAAD,CAAA;AAC/B,cAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA,OAAA,EAAA;UAAA,OAAA,GAAU,IAAI,CAAC,GAAL,CAAA;UACV,OAAO,CAAC,GAAR,CAAY,GAAZ;UACA,IAAA,GAAO,GAAG,CAAC;UACX,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,IAAX;UACP,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,IAAoB,GAAvB;mBACE,KAAA,CAAM,sCAAA,GAAuC,IAAI,CAAC,MAAM,CAAC,OAAzD,EADF;WAAA,MAAA;YAGE,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,KAAoB,GAAvB;cACE,OAAA,GAAU,GADZ;aAAA,MAAA;cAGE,OAAA,GAAU,IAAI,CAAC,MAAM,CAAC,KAHxB;;AAIA;YAAA,KAAA,+CAAA;;cACE,aAAa,CAAC,OAAO,CAAC,UAAtB,GAAmC,CAAC,CAAC,IAAF,CAAO,aAAa,CAAC,OAAO,CAAC,UAA7B,EAAyC,UAAzC;cACnC,aAAa,CAAC,KAAd,GAAsB,eAAA,CAAgB,aAAa,CAAC,OAA9B;cACtB,IAAG,WAAA,KAAe,QAAlB;8BACE,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAA/C,CAAsD,CAAC,aAAD,CAAtD,EAAuE,EAAvE,GADF;eAAA,MAAA;8BAGE,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAA/C,CAAsD,CAAC,aAAD,CAAtD,EAAuE,EAAvE,GAHF;;YAHF,CAAA;4BAPF;;QAL+B,EAAjC;;QAoBA,OAAA,GACE;UAAA,SAAA,EAAW,IAAI,CAAC,GAAL,CAAA,CAAX;UACA,EAAA,EAAG,MADH;UAEA,SAAA,EAAU,EAFV;UAGA,IAAA,EAAK;YAAC,OAAA,EAAS,MAAV;YAAkB,QAAA,EAAU,QAA5B;YAAsC,QAAA,EAAU;UAAhD;QAHL;QAIF,SAAA,GAAY,IAAI,CAAC,GAAL,CAAA;QACZ,MAAM,CAAC,aAAa,CAAC,IAArB,CAA0B,IAAI,CAAC,SAAL,CAAe,OAAf,CAA1B,EA3BF;OAAA,MAAA;QA6BE,MAAM,CAAC,IAAP,CAAY,WAAZ,EAAyB,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAzB,EAAgD,OAAO,CAAC,GAAR,CAAY,WAAZ,CAAhD,EAA0E,OAAO,CAAC,GAAR,CAAY,kBAAZ,CAA1E,EAA2G,OAAO,CAAC,GAAR,CAAY,WAAZ,CAA3G,EAAoI,2BAApI,EAAiK,MAAjK,EAAyK,QAAzK,EAAkL,QAAA,CAAC,KAAD,EAAO,MAAP,CAAA;AAChL,cAAA,UAAA,EAAA,CAAA,EAAA,IAAA,EAAA;UAAA,IAAG,MAAM,CAAC,OAAP,KAAkB,IAArB;AACE;YAAA,KAAA,+CAAA;;cACE,aAAa,CAAC,OAAO,CAAC,UAAtB,GAAmC,CAAC,CAAC,IAAF,CAAO,aAAa,CAAC,OAAO,CAAC,UAA7B,EAAyC,UAAzC;cACnC,aAAa,CAAC,KAAd,GAAsB,eAAA,CAAgB,aAAa,CAAC,OAA9B;cACtB,IAAG,WAAA,KAAe,QAAlB;8BACE,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAA/C,CAAsD,CAAC,aAAD,CAAtD,EAAuE,EAAvE,GADF;eAAA,MAAA;8BAGE,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAA/C,CAAsD,CAAC,aAAD,CAAtD,EAAuE,EAAvE,GAHF;;YAHF,CAAA;4BADF;WAAA,MAAA;mBASE,KAAA,CAAM,0DAAN,EATF;;QADgL,CAAlL,EA7BF;OAPF;;IA+CA,YAAA,GAAe,CAAA;AACf;IAAA,KAAA,wCAAA;;MACE,IAAG,QAAS,CAAA,GAAA,CAAT,KAAiB,MAApB;QACE,YAAa,CAAA,GAAA,CAAb,GAAoB,QAAS,CAAA,GAAA,EAD/B;OAAA,MAAA;QAGE,IAAG,QAAS,CAAA,GAAA,CAAI,CAAC,QAAd,CAAA,CAAA,KAA4B,QAAS,CAAA,GAAA,CAAI,CAAC,QAAd,CAAA,CAA/B;UACE,YAAa,CAAA,GAAA,CAAb,GAAoB,QAAS,CAAA,GAAA,EAD/B;SAHF;;IADF;IAMA,IAAG,CAAI,CAAC,CAAC,aAAF,CAAgB,YAAhB,CAAP;MACE,IAAG,WAAA,KAAe,QAAlB;QACE,MAAA,GAAS,QAAA,GAAS,EAAT,GAAY,YADvB;OAAA,MAAA;QAGE,MAAA,GAAS,SAAA,GAAU,EAAV,GAAa,aAHxB;;AAIA;MAAA,KAAA,wCAAA;;QACE,MAAA,GAAS,MAAA,GAAS,cAAT,GAAwB,GAAxB,GAA4B,KAA5B,GAAkC,YAAa,CAAA,GAAA,CAA/C,GAAoD;MAD/D;MAEA,MAAA,GAAS,MAAA,GAAS;MAClB,IAAI,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAJ;QACE,MAAM,CAAC,aAAa,CAAC,SAArB,GAAiC,QAAA,CAAC,GAAD,CAAA;AAC/B,cAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA;UAAA,OAAA,GAAU,IAAI,CAAC,GAAL,CAAA;UACV,IAAA,GAAO,GAAG,CAAC;UACX,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,IAAX;UACP,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,IAAoB,GAAvB;mBACE,KAAA,CAAM,sCAAA,GAAuC,IAAI,CAAC,MAAM,CAAC,OAAzD,EADF;WAAA,MAAA;YAGE,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,KAAoB,GAAvB;cACE,OAAA,GAAU,GADZ;aAAA,MAAA;cAGE,OAAA,GAAU,IAAI,CAAC,MAAM,CAAC,KAHxB;;YAIA,IAAG,WAAA,KAAe,QAAlB;cACE,aAAA,GAAgB,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAM,CAAA,EAAA,EADvE;aAAA,MAAA;cAGE,aAAA,GAAgB,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAM,CAAA,EAAA,EAHvE;;YAIA,aAAa,CAAC,OAAd,GAAwB,OAAQ,CAAA,CAAA;YAChC,aAAa,CAAC,KAAd,GAAsB,eAAA,CAAgB,aAAa,CAAC,OAA9B,EATtB;;YAWA,OAAO,aAAa,CAAC;YACrB,OAAO,aAAa,CAAC;YACrB,IAAG,WAAA,KAAe,QAAlB;cACE,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAA/C,CAAsD,CAAC,aAAD,CAAtD,EAAuE,EAAvE,EADF;aAAA,MAAA;cAGE,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAA/C,CAAsD,CAAC,aAAD,CAAtD,EAAuE,EAAvE,EAHF;;mBAIA,YAAA,CAAA,EApBF;;QAJ+B;QAyBjC,OAAA,GACE;UAAA,SAAA,EAAW,IAAI,CAAC,GAAL,CAAA,CAAX;UACA,EAAA,EAAG,MADH;UAEA,SAAA,EAAU,EAFV;UAGA,IAAA,EAAK;YAAC,OAAA,EAAS,MAAV;YAAkB,QAAA,EAAU,CAAA,CAA5B;YAAgC,QAAA,EAAU;UAA1C;QAHL;QAIF,SAAA,GAAY,IAAI,CAAC,GAAL,CAAA;eACZ,MAAM,CAAC,aAAa,CAAC,IAArB,CAA0B,IAAI,CAAC,SAAL,CAAe,OAAf,CAA1B,EAhCF;OAAA,MAAA;eAkCE,MAAM,CAAC,IAAP,CAAY,WAAZ,EAAyB,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAzB,EAAgD,OAAO,CAAC,GAAR,CAAY,WAAZ,CAAhD,EAA0E,OAAO,CAAC,GAAR,CAAY,kBAAZ,CAA1E,EAA2G,OAAO,CAAC,GAAR,CAAY,WAAZ,CAA3G,EAAoI,2BAApI,EAAiK,MAAjK,EAAyK,QAAA,CAAC,KAAD,EAAO,MAAP,CAAA;UACvK,IAAG,MAAM,CAAC,OAAP,KAAkB,IAArB;YACE,IAAG,WAAA,KAAe,QAAlB;cACE,aAAA,GAAgB,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAM,CAAA,EAAA,EADvE;aAAA,MAAA;cAGE,aAAA,GAAgB,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAM,CAAA,EAAA,EAHvE;;YAIA,aAAa,CAAC,OAAd,GAAwB,MAAM,CAAC,OAAQ,CAAA,CAAA;YACvC,aAAa,CAAC,KAAd,GAAsB,eAAA,CAAgB,aAAa,CAAC,OAA9B,EALtB;;YAOA,OAAO,aAAa,CAAC;YACrB,OAAO,aAAa,CAAC;YACrB,IAAG,WAAA,KAAe,QAAlB;cACE,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAA/C,CAAsD,CAAC,aAAD,CAAtD,EAAuE,EAAvE,EADF;aAAA,MAAA;cAGE,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAA/C,CAAsD,CAAC,aAAD,CAAtD,EAAuE,EAAvE,EAHF;;mBAIA,YAAA,CAAA,EAdF;WAAA,MAAA;mBAgBE,KAAA,CAAM,0DAAN,EAhBF;;QADuK,CAAzK,EAlCF;OARF;;EAjE6B;;EA8H/B,YAAA,GAAe,QAAA,CAAA,CAAA;AACb,QAAA,IAAA,EAAA,UAAA,EAAA,YAAA,EAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,UAAA,EAAA,YAAA,EAAA,KAAA,EAAA;IAAA,KAAA,GAAQ,CAAC,CAAC,MAAF,CAAS,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAxD;IACR,KAAA,GAAQ,CAAC,CAAC,MAAF,CAAS,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAxD;IACR,UAAA,GAAa,CAAC,CAAC,IAAF;;AAA0B;MAAA,KAAA,uCAAA;;sBAAnB,IAAI,CAAC,OAAO,CAAC;MAAM,CAAA;;QAA1B;IACb,UAAA,GAAa,CAAC,CAAC,IAAF;;AAA0B;MAAA,KAAA,uCAAA;;sBAAnB,IAAI,CAAC,OAAO,CAAC;MAAM,CAAA;;QAA1B;IACb,YAAA,GAAe;IACf,YAAA,GAAe;IACf,KAAA,uCAAA;;MACE,IAAG,IAAI,CAAC,OAAO,CAAC,UAAhB;QACE,YAAA,GAAe,CAAC,CAAC,KAAF,CAAQ,YAAR,EAAqB,CAAC,CAAC,IAAF,CAAO,IAAI,CAAC,OAAO,CAAC,UAApB,CAArB,EADjB;;IADF;IAGA,KAAA,yCAAA;;MACE,IAAG,IAAI,CAAC,OAAO,CAAC,UAAhB;QACE,YAAA,GAAe,CAAC,CAAC,KAAF,CAAQ,YAAR,EAAqB,CAAC,CAAC,IAAF,CAAO,IAAI,CAAC,OAAO,CAAC,UAApB,CAArB,EADjB;;IADF;IAGA,MAAA,GAAS,CAAC,CAAC,MAAF,CAAS,UAAT,EAAqB,QAAA,CAAC,EAAD,CAAA;aAC5B;IAD4B,CAArB;IAGT,OAAO,CAAC,GAAR,CAAY,gBAAZ,EAA6B,MAA7B;IACA,MAAA,GAAS,CAAC,CAAC,MAAF,CAAS,UAAT,EAAqB,QAAA,CAAC,EAAD,CAAA;aAC5B;IAD4B,CAArB;IAGT,OAAO,CAAC,GAAR,CAAY,cAAZ,EAA2B,MAA3B;IACA,MAAA,GAAS,CAAC,CAAC,MAAF,CAAS,CAAC,CAAC,KAAF,CAAQ,YAAR,EAAqB,YAArB,CAAT,EAA6C,QAAA,CAAC,EAAD,CAAA;aACpD;IADoD,CAA7C;WAGT,OAAO,CAAC,GAAR,CAAY,qBAAZ,EAAkC,MAAlC;EAxBa;;EA2Bf,MAAM,CAAC,wBAAP,GAAkC,QAAA,CAAC,IAAD,CAAA;WAChC,CAAA,CAAE,qDAAF,CAAyD,CAAA,CAAA,CAAE,CAAC,KAA5D,GAAoE,IAAI,CAAC;EADzC;;EAIlC,cAAA,GAAiB,QAAA,CAAC,QAAD,EAAW,QAAX,CAAA;AAEf,QAAA,CAAA,EAAA,WAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,MAAA,EAAA,GAAA,EAAA,UAAA;;IAAA,WAAA,GAAc,OAAO,CAAC,GAAR,CAAY,iBAAZ;IACd,MAAA,GAAS,OAAO,CAAC,GAAR,CAAY,gBAAZ;IACT,iBAAA,GAAoB;IACpB,UAAA,GAAa;IACb,iBAAA,GAAoB,iBAAA,GAAoB;IACxC,KAAA,wCAAA;;MACI,CAAA,QAAA,CAAC,KAAD,CAAA;QACA,UAAA,GAAa,UAAA,GAAW,KAAX,GAAiB;eAC9B,iBAAA,GAAoB,iBAAA,GAAoB;MAFxC,CAAA,CAAF,CAAG,KAAH;IADF;IAIA,iBAAA,GAAoB,iBAAA,GAAoB;IACxC,KAAA,GAAQ;WACR,OAAO,CAAC,MAAR,CAAe,gEAAA,GAAiE,iBAAjE,GAAmF,8EAAlG,EAAkL,QAAA,CAAC,MAAD,CAAA;AAChL,UAAA,OAAA,EAAA,MAAA,EAAA;MAAA,KAAA,GAAQ;MACR,IAAG,KAAA,KAAS,IAAT,IAAiB,KAAA,KAAS,EAA7B;;QAEE,QAAA,CAAS,IAAT;AACA,eAHF;;MAIA,MAAA,GAAS,UAAA,GAAW,KAAX,GAAiB;MAC1B,IAAI,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAJ;QACE,MAAM,CAAC,aAAa,CAAC,SAArB,GAAiC,QAAA,CAAC,GAAD,CAAA;AAC/B,cAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,OAAA,EAAA;UAAA,OAAA,GAAU,IAAI,CAAC,GAAL,CAAA;UACV,IAAA,GAAO,GAAG,CAAC;UACX,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,IAAX;UACP,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,IAAoB,GAAvB;mBACE,KAAA,CAAM,sCAAA,GAAuC,IAAI,CAAC,MAAM,CAAC,OAAzD,EADF;WAAA,MAAA;YAGE,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,KAAoB,GAAvB;cACE,OAAA,GAAU;cACV,QAAA,GAAW,GAFb;aAAA,MAAA;cAIE,OAAA,GAAU,IAAI,CAAC,MAAM,CAAC;cACtB,CAAA,GAAI,OAAQ,CAAA,CAAA;cACZ,IAAG,CAAC,OAAO,CAAC,GAAR,CAAY,kBAAZ,CAAD,CAAA,KAAoC,GAAvC;gBACE,QAAQ,CAAC,EAAT,GAAc,MAAA,CAAO,CAAC,CAAC,EAAT,EADhB;eAAA,MAAA;gBAGE,QAAQ,CAAC,EAAT,GAAc,MAAA,CAAO,CAAC,CAAC,GAAT,EAHhB;;cAIA,QAAQ,CAAC,KAAT,GAAiB,cAAA,CAAe,CAAf,EAAiB,WAAjB;cACjB,QAAQ,CAAC,cAAT,GAA0B;cAC1B,QAAQ,CAAC,cAAT,GAA0B;cAC1B,QAAQ,CAAC,KAAT,GAAiB,eAAA,CAAgB,CAAhB;cACjB,QAAQ,CAAC,OAAT,GAAmB;cACnB,QAAQ,CAAC,OAAT,GAAmB,MAfrB;aAAA;;YAiBA,YAAA,CAAA;mBACA,QAAA,CAAS,QAAT,EArBF;;QAJ+B;QA0BjC,OAAA,GACE;UAAA,SAAA,EAAW,IAAI,CAAC,GAAL,CAAA,CAAX;UACA,EAAA,EAAG,MADH;UAEA,SAAA,EAAU,EAFV;UAGA,IAAA,EAAK;YAAC,OAAA,EAAS,MAAV;YAAkB,QAAA,EAAU,CAAA,CAA5B;YAAgC,QAAA,EAAU;UAA1C;QAHL;QAIF,SAAA,GAAY,IAAI,CAAC,GAAL,CAAA;eACZ,MAAM,CAAC,aAAa,CAAC,IAArB,CAA0B,IAAI,CAAC,SAAL,CAAe,OAAf,CAA1B,EAjCF;OAAA,MAAA;eAmCE,MAAM,CAAC,IAAP,CAAY,WAAZ,EAAyB,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAzB,EAAgD,OAAO,CAAC,GAAR,CAAY,WAAZ,CAAhD,EAA0E,OAAO,CAAC,GAAR,CAAY,kBAAZ,CAA1E,EAA2G,OAAO,CAAC,GAAR,CAAY,WAAZ,CAA3G,EAAoI,2BAApI,EAAiK,MAAjK,EAAyK,QAAA,CAAC,KAAD,EAAO,MAAP,CAAA;AACvK,cAAA;UAAA,IAAG,MAAM,CAAC,OAAP,KAAkB,IAArB;YACE,CAAA,GAAI,MAAM,CAAC,OAAQ,CAAA,CAAA;YACnB,IAAG,CAAC,OAAO,CAAC,GAAR,CAAY,kBAAZ,CAAD,CAAA,KAAoC,GAAvC;cACE,QAAQ,CAAC,EAAT,GAAc,MAAA,CAAO,CAAC,CAAC,EAAT,EADhB;aAAA,MAAA;cAGE,QAAQ,CAAC,EAAT,GAAc,MAAA,CAAO,CAAC,CAAC,GAAT,EAHhB;;YAIA,QAAQ,CAAC,KAAT,GAAiB,cAAA,CAAe,CAAf,EAAiB,WAAjB;YACjB,QAAQ,CAAC,cAAT,GAA0B;YAC1B,QAAQ,CAAC,cAAT,GAA0B;YAC1B,QAAQ,CAAC,KAAT,GAAiB,eAAA,CAAgB,CAAhB;YACjB,QAAQ,CAAC,OAAT,GAAmB;YACnB,QAAQ,CAAC,OAAT,GAAmB,MAVnB;;YAYA,YAAA,CAAA;mBACA,QAAA,CAAS,QAAT,EAdF;WAAA,MAAA;mBAgBE,KAAA,CAAM,uCAAN,EAhBF;;QADuK,CAAzK,EAnCF;;IAPgL,CAAlL;EAbe;;EA2EjB,gBAAA,GAAmB,QAAA,CAAC,EAAD,CAAA;AAEjB,QAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,UAAA,EAAA,GAAA,EAAA,OAAA,EAAA,MAAA,EAAA,SAAA,EAAA,GAAA,EAAA,YAAA;;IAAA,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAM,CAAA,EAAA;IACrD,YAAA,GAAe,UAAU,CAAC;IAC1B,MAAA,GAAS,UAAA,GAAW,YAAY,CAAC,KAAxB,GAA8B;IACvC,GAAA,GAAM,CAAC,CAAC,KAAF,CAAQ,YAAR;IACN,OAAO,GAAG,CAAC;IACX,OAAO,GAAG,CAAC;IACX,OAAO,GAAG,CAAC;AACX;IAAA,KAAA,qCAAA;;MACE,MAAA,GAAS,MAAA,GAAS,aAAT,GAAuB,GAAvB,GAA2B,KAA3B,GAAiC,GAAG,CAAC,UAAW,CAAA,GAAA,CAAK,CAAA,CAAA,CAAE,CAAC,KAAxD,GAA8D;IADzE;IAEA,IAAI,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAJ;MACE,MAAM,CAAC,aAAa,CAAC,SAArB,GAAiC,QAAA,CAAC,GAAD,CAAA;AAC/B,YAAA,IAAA,EAAA,OAAA,EAAA,IAAA,EAAA,OAAA,EAAA,MAAA,EAAA,OAAA,EAAA;QAAA,OAAA,GAAU,IAAI,CAAC,GAAL,CAAA;QACV,IAAA,GAAO,GAAG,CAAC;QACX,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,IAAX;QACP,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,IAAoB,GAAvB;iBACE,KAAA,CAAM,sCAAA,GAAuC,IAAI,CAAC,MAAM,CAAC,OAAzD,EADF;SAAA,MAAA;UAGE,OAAA,GAAU,IAAI,CAAC,MAAM,CAAC;UACtB,CAAA,GAAI,OAAQ,CAAA,CAAA;UACZ,OAAA,GAAU;YAAC,EAAA,EAAI,MAAA,CAAO,CAAC,CAAC,EAAT,CAAL;YAAkB,KAAA,EAAO,cAAA,CAAe,CAAf,EAAiB,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAjB,CAAzB;YAA0E,cAAA,EAAgB,IAA1F;YAAgG,cAAA,EAAgB,IAAhH;YAAsH,KAAA,EAAO,eAAA,CAAgB,CAAhB,CAA7H;YAAiJ,OAAA,EAAQ;UAAzJ;UACV,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAA/C,CAAmD,OAAnD;UACA,MAAA,GAAS,CAAC,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B,CAAC,UAAU,CAAC,EAAZ,CAA/B,CAAD,CAAkD,CAAA,UAAU,CAAC,EAAX;UAC3D,MAAM,CAAC,UAAU,CAAC,QAAlB,CAA2B,OAAO,CAAC,EAAnC,EAAsC,MAAM,CAAC,CAAP,GAAW,EAAjD,EAAoD,MAAM,CAAC,CAAP,GAAW,EAA/D;iBACA,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B;YAAC,KAAA,EAAO,CAAC,OAAO,CAAC,EAAT,CAAR;YAAsB,KAAA,EAAO;UAA7B,CAA/B,EAAgE;YAAC,aAAA,EAAe,KAAhB;YAAuB,cAAA,EAAgB;UAAvC,CAAhE,EATF;;MAJ+B;MAcjC,OAAA,GACE;QAAA,SAAA,EAAW,IAAI,CAAC,GAAL,CAAA,CAAX;QACA,EAAA,EAAG,MADH;QAEA,SAAA,EAAU,EAFV;QAGA,IAAA,EAAK;UAAC,OAAA,EAAS,MAAV;UAAkB,QAAA,EAAU,CAAA,CAA5B;UAAgC,QAAA,EAAU;QAA1C;MAHL;MAIF,SAAA,GAAY,IAAI,CAAC,GAAL,CAAA;aACZ,MAAM,CAAC,aAAa,CAAC,IAArB,CAA0B,IAAI,CAAC,SAAL,CAAe,OAAf,CAA1B,EArBF;KAAA,MAAA;aAuBE,MAAM,CAAC,IAAP,CAAY,WAAZ,EAAyB,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAzB,EAAgD,OAAO,CAAC,GAAR,CAAY,WAAZ,CAAhD,EAA0E,OAAO,CAAC,GAAR,CAAY,kBAAZ,CAA1E,EAA2G,OAAO,CAAC,GAAR,CAAY,WAAZ,CAA3G,EAAoI,eAApI,EAAqJ,MAArJ,EAA6J,QAAA,CAAC,KAAD,EAAO,MAAP,CAAA;AAC3J,YAAA,OAAA,EAAA,MAAA,EAAA;QAAA,IAAG,MAAM,CAAC,OAAP,KAAkB,IAArB;UACE,CAAA,GAAI,MAAM,CAAC,OAAQ,CAAA,CAAA;UACnB,OAAA,GAAU;YAAC,EAAA,EAAI,MAAA,CAAO,CAAC,CAAC,EAAT,CAAL;YAAkB,KAAA,EAAO,cAAA,CAAe,CAAf,EAAiB,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAjB,CAAzB;YAA0E,cAAA,EAAgB,IAA1F;YAAgG,cAAA,EAAgB,IAAhH;YAAsH,KAAA,EAAO,eAAA,CAAgB,CAAhB,CAA7H;YAAiJ,OAAA,EAAQ;UAAzJ;UACV,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAA/C,CAAmD,OAAnD;UACA,MAAA,GAAS,CAAC,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B,CAAC,UAAU,CAAC,EAAZ,CAA/B,CAAD,CAAkD,CAAA,UAAU,CAAC,EAAX;UAC3D,MAAM,CAAC,UAAU,CAAC,QAAlB,CAA2B,OAAO,CAAC,EAAnC,EAAsC,MAAM,CAAC,CAAP,GAAW,EAAjD,EAAoD,MAAM,CAAC,CAAP,GAAW,EAA/D;iBACA,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B;YAAC,KAAA,EAAO,CAAC,OAAO,CAAC,EAAT,CAAR;YAAsB,KAAA,EAAO;UAA7B,CAA/B,EAAgE;YAAC,aAAA,EAAe,KAAhB;YAAuB,cAAA,EAAgB;UAAvC,CAAhE,EANF;SAAA,MAAA;iBAQE,KAAA,CAAM,yCAAA,GAA0C,MAAhD,EARF;;MAD2J,CAA7J,EAvBF;;EAXiB,EA5fnB;;;EA0iBA,gBAAA,GAAmB,QAAA,CAAA,CAAA;AAEjB,QAAA,QAAA,EAAA,QAAA,EAAA,IAAA,EAAA,YAAA,EAAA,IAAA,EAAA,YAAA,EAAA,aAAA,EAAA,aAAA,EAAA,UAAA;;IAAA,QAAA;;AAAoB;AAAA;MAAA,KAAA,qCAAA;;sBAAR,IAAI,CAAC;MAAG,CAAA;;;IACpB,QAAA;;AAAoB;AAAA;MAAA,KAAA,qCAAA;;sBAAR,IAAI,CAAC;MAAG,CAAA;;;IACpB,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,YAAlB,CAAA;IACb,aAAA,GAAgB,UAAU,CAAC;IAC3B,aAAA,GAAgB,UAAU,CAAC;IAC3B,YAAA,GAAe,CAAC,CAAC,UAAF,CAAa,QAAb,EAAsB,aAAtB;IACf,YAAA,GAAe,CAAC,CAAC,UAAF,CAAa,QAAb,EAAsB,aAAtB;WACf,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B;MAAC,KAAA,EAAO,YAAR;MAAsB,KAAA,EAAO;IAA7B,CAA/B;EATiB;;EAWnB,SAAA,GAAY,QAAA,CAAA,CAAA;AAEV,QAAA,IAAA,EAAA,YAAA,EAAA,IAAA,EAAA,YAAA;;IAAA,YAAA;;AAAwB;AAAA;MAAA,KAAA,qCAAA;;sBAAR,IAAI,CAAC;MAAG,CAAA;;;IACxB,YAAA;;AAAwB;AAAA;MAAA,KAAA,qCAAA;;sBAAR,IAAI,CAAC;MAAG,CAAA;;;WACxB,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B;MAAC,KAAA,EAAO,YAAR;MAAsB,KAAA,EAAO;IAA7B,CAA/B,EAA0E;MAAC,aAAA,EAAe,IAAhB;MAAsB,cAAA,EAAgB;IAAtC,CAA1E;EAJU;;EAMZ,UAAA,GAAa,QAAA,CAAA,CAAA,EAAA;;WAEX,MAAM,CAAC,UAAU,CAAC,WAAlB,CAAA;EAFW;;EAIb,aAAA,GAAgB,QAAA,CAAA,CAAA;AACd,QAAA,GAAA,EAAA,UAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,EAAA,GAAA,EAAA;IAAA,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,YAAlB,CAAA;IACb,GAAA,GAAM,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAA/C,CAAA;IACN,GAAA,GAAM,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAA/C,CAAA;AACN;AAAA;IAAA,KAAA,qCAAA;;oBACE,GAAG,CAAC,MAAJ,CAAW;QAAC,EAAA,EAAG,MAAJ;QAAY,OAAA,EAAS;MAArB,CAAX;IADF,CAAA;;EAJc,EA/jBhB;;;;EAwkBA,eAAA,GAAkB,QAAA,CAAA,CAAA;AAChB,QAAA,GAAA,EAAA,UAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,EAAA,GAAA,EAAA;IAAA,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,YAAlB,CAAA;IACb,GAAA,GAAM,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAA/C,CAAA;IACN,GAAA,GAAM,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAA/C,CAAA;AACN;AAAA;IAAA,KAAA,qCAAA;;oBACE,GAAG,CAAC,MAAJ,CAAW;QAAC,EAAA,EAAG,MAAJ;QAAY,OAAA,EAAS;MAArB,CAAX;IADF,CAAA;;EAJgB,EAxkBlB;;;;EAilBA,iBAAA,GAAoB,QAAA,CAAA,CAAA;AAClB,QAAA,MAAA,EAAA,OAAA,EAAA,UAAA,EAAA,WAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA;IAAA,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,YAAlB,CAAA;AACb;IAAA,KAAA,qCAAA;;MACE,WAAA,GAAc;MACd,OAAA,GAAU,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAA/C,CAAmD,MAAnD;MACV,MAAM,CAAC,mBAAP,CAA2B,OAA3B,EAAoC,WAApC;IAHF;AAIA;AAAA;IAAA,KAAA,wCAAA;;MACE,WAAA,GAAc;MACd,OAAA,GAAU,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAA/C,CAAmD,MAAnD;oBACV,MAAM,CAAC,mBAAP,CAA2B,OAA3B,EAAoC,WAApC;IAHF,CAAA;;EANkB;;EAWpB,4BAAA,GAAgC,QAAA,CAAA,CAAA;AAC9B,QAAA,MAAA,EAAA,KAAA,EAAA;IAAA,MAAA,GAAS,qCAAA,CAAA;IACT,GAAA,GAAM,MAAM,CAAC,IAAP,CAAY,EAAZ,EAAgB,EAAhB,EAAoB,QAApB;IACN,KAAA,GAAQ;WACR,GAAG,CAAC,QAAQ,CAAC,KAAb,CAAmB,KAAA,GAAM,aAAN,GAAoB,MAApB,GAA2B,eAA9C;EAJ8B;;EAMhC,4BAAA,GAAgC,QAAA,CAAA,CAAA;AAC9B,QAAA;IAAA,QAAA,GAAW,IAAI,CAAC,KAAL,CAAW,MAAA,CAAO,0BAAP,CAAX;IACX,OAAO,CAAC,GAAR,CAAY,QAAZ;WACA,2BAAA,CAA4B,QAA5B;EAH8B;;EAKhC,iCAAA,GAAqC,QAAA,CAAA,CAAA,EAAA;;;;;;;;AACnC,QAAA,QAAA,EAAA,IAAA,EAAA,MAAA,EAAA,SAAA,EAAA,UAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,EAAA,KAAA,EAAA,SAAA,EAAA;IAAA,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,YAAlB,CAAA;IACb,SAAA,GAAY;IACZ,MAAA,GAAS,CAAA;AACT;IAAA,KAAA,qCAAA;;MACE,IAAA,GAAO,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAA/C,CAAmD,MAAnD;MACP,SAAS,CAAC,IAAV,CAAe,IAAI,CAAC,OAApB;MACA,MAAO,CAAA,MAAA,CAAP,GAAiB,CAAC,CAAC,IAAF,CAAO,IAAP,EAAa,CAAC,SAAD,EAAW,IAAX,EAAgB,GAAhB,EAAoB,GAApB,EAAwB,OAAxB,EAAgC,SAAhC,EAA0C,gBAA1C,EAA2D,gBAA3D,EAA4E,OAA5E,CAAb;IAHnB;IAIA,SAAA,GAAY;AACZ;IAAA,KAAA,wCAAA;;MACE,IAAA,GAAO,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAA/C,CAAmD,MAAnD;MACP,SAAS,CAAC,IAAV,CAAe,IAAI,CAAC,OAApB;MACA,MAAO,CAAA,MAAA,CAAP,GAAiB,CAAC,CAAC,IAAF,CAAO,IAAP,EAAa,CAAC,SAAD,EAAW,IAAX,EAAgB,MAAhB,EAAuB,IAAvB,EAA4B,OAA5B,EAAoC,OAApC,CAAb;IAHnB;IAKA,QAAA,GACE;MAAA,oBAAA,EAAsB,EAAtB;MACA,WAAA,EAAa,SADb;MAEA,WAAA,EAAa,SAFb;MAGA,oBAAA,EAAsB,sBAHtB;MAIA,WAAA,EAAY,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B,UAAU,CAAC,KAA1C,CAJZ;MAKA,QAAA,EAAU;IALV;IAaF,GAAA,GAAM,MAAM,CAAC,IAAP,CAAY,EAAZ,EAAgB,EAAhB,EAAoB,QAApB;IACN,KAAA,GAAQ;WACR,GAAG,CAAC,QAAQ,CAAC,KAAb,CAAmB,KAAA,GAAM,aAAN,GAAoB,IAAI,CAAC,SAAL,CAAe,QAAf,EAAyB,IAAzB,EAA+B,CAA/B,CAApB,GAAsD,eAAzE;EA9BmC;;EAiCrC,cAAA,GAAiB,QAAA,CAAA,CAAA;AACf,QAAA,QAAA,EAAA,QAAA,EAAA;IAAA,QAAA,GAAW,MAAM,CAAC,UAAU,CAAC,gBAAlB,CAAA;IACX,QAAA,GAAW,MAAM,CAAC,UAAU,CAAC,gBAAlB,CAAA;IACX,SAAA,GAAY,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B,QAA/B;WACZ,mBAAA,CAAoB,YAApB,EAAiC,QAAjC,EAA0C,QAA1C,EAAmD,SAAnD;EAJe;;EAMjB,mBAAA,GAAsB,QAAA,CAAC,QAAD,EAAW,QAAX,EAAoB,QAApB,EAA8B,SAA9B,CAAA;AACpB,QAAA,MAAA,EAAA,KAAA,EAAA,oBAAA,EAAA,KAAA,EAAA,GAAA,EAAA;IAAA,MAAA,GAAS,YAAA,GAAa,IAAI,CAAC,SAAL,CAAe,QAAf,CAAb,GAAsC;IAC/C,MAAA,GAAS,MAAA,GAAS,YAAT,GAAsB,IAAI,CAAC,SAAL,CAAe,QAAf,CAAtB,GAA+C;IACxD,MAAA,GAAS,MAAA,GAAS,4DAAT,GAAsE;IAC/E,MAAA,GAAS,MAAA,GAAS,4DAAT,GAAsE;IAC/E,MAAA,GAAS,MAAA,GAAS,SAAT,GAAmB;IAC5B,oBAAA,GAAuB,CAAC,MAAM,CAAC,WAAP,CAAA,CAAD,CAAsB,CAAC,KAAvB,CAA6B,CAA7B,EAA+B,CAAC,CAAhC;IACvB,IAAI,oBAAoB,CAAC,KAArB,CAA2B,CAAC,CAA5B,CAAA,KAAkC,OAAtC;AAAA;KAAA,MAAA;MAEE,oBAAA,GAAuB,oBAAA,GAAuB,QAFhD;;IAGA,GAAA,GAAM,oBAAA,GAAqB,qBAArB,GAA2C,OAAO,CAAC,GAAR,CAAY,WAAZ;IACjD,GAAA,GAAM,GAAA,GAAM;IACZ,GAAA,GAAM,GAAA,GAAM;IACZ,GAAA,GAAM,GAAA,GAAM;IACZ,GAAA,GAAM,GAAA,GAAM;IACZ,KAAA,GAAQ,IAAI,CAAC,SAAL,CAAe;MAAC;QAAC,KAAA,EAAM,eAAP;QAAuB,MAAA,EAAQ;MAA/B,CAAD;KAAf;IACR,GAAA,GAAM,GAAA,GAAM,kBAAA,CAAmB,KAAnB;IACZ,GAAA,GAAM,GAAA,GAAM,aAAN,GAAoB,IAAI,CAAC,SAAL,CAAe,SAAf;IAC1B,GAAA,GAAM,MAAM,CAAC,IAAP,CAAY,EAAZ,EAAgB,EAAhB,EAAoB,QAApB;IACN,KAAA,GAAQ,iBAAA,GAAkB,QAAlB,GAA2B,gBAA3B,GAA4C,CAAC,OAAO,CAAC,GAAR,CAAY,WAAZ,CAAD,CAA5C,GAAsE;WAC9E,GAAG,CAAC,QAAQ,CAAC,KAAb,CAAmB,KAAA,GAAM,8BAAN,GAAqC,CAAC,OAAO,CAAC,GAAR,CAAY,WAAZ,CAAD,CAArC,GAA+D,kDAA/D,GAAkH,MAAlH,GAAyH,2DAAzH,GAAqL,GAArL,GAAyL,IAA5M;EApBoB;;EAsBtB,iBAAA,GAAoB,QAAA,CAAA,CAAA;AAClB,QAAA,QAAA,EAAA,QAAA,EAAA,IAAA,EAAA,IAAA,EAAA;IAAA,QAAA;;AAAoB;AAAA;MAAA,KAAA,qCAAA;;sBAAR,IAAI,CAAC;MAAG,CAAA;;;IACpB,QAAA;;AAAoB;AAAA;MAAA,KAAA,qCAAA;;sBAAR,IAAI,CAAC;MAAG,CAAA;;;IACpB,SAAA,GAAY,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B,QAA/B;WACZ,mBAAA,CAAoB,OAApB,EAA4B,QAA5B,EAAqC,QAArC,EAA8C,SAA9C;EAJkB;;EAOpB,WAAA,GAAc,QAAA,CAAA,CAAA;WACZ,CAAA,CAAE,YAAF,CAAe,CAAC,MAAhB,CAAA;EADY;;EAGd,eAAA,GAAkB,QAAA,CAAA,CAAA;AAChB,QAAA,IAAA,EAAA,UAAA,EAAA,UAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA;IAAA,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,YAAlB,CAAA;IACb,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,GAA/C,CAAmD,UAAU,CAAC,KAA9D;IACb,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,GAA/C,CAAmD,UAAU,CAAC,KAA9D;IACb,MAAM,CAAC,OAAP,GAAoB,MAAM,CAAC,OAAV,GAAuB,MAAM,CAAC,OAA9B,GAA2C;MAAC,KAAA,EAAM,EAAP;MAAU,KAAA,EAAM,EAAhB;MAAoB,SAAA,EAAU,CAAA;IAA9B,EAH5D;;IAKA,KAAA,4CAAA;;MACE,IAAI,CAAC,OAAL,GAAe;IADjB,CALA;;IAQA,KAAA,8CAAA;;MACE,IAAI,CAAC,OAAL,GAAe;IADjB;IAEA,MAAM,CAAC,OAAO,CAAC,KAAf,GAAuB,CAAC,CAAC,KAAF,CAAQ,MAAM,CAAC,OAAO,CAAC,KAAvB,EAA8B,UAA9B;IACvB,MAAM,CAAC,OAAO,CAAC,KAAf,GAAuB,CAAC,CAAC,KAAF,CAAQ,MAAM,CAAC,OAAO,CAAC,KAAvB,EAA8B,UAA9B;IACvB,MAAM,CAAC,OAAO,CAAC,SAAf,GAA2B,CAAC,CAAC,MAAF,CAAS,MAAM,CAAC,OAAO,CAAC,SAAxB,EAAmC,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B,UAAU,CAAC,KAA1C,CAAnC;IAC3B,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,MAA/C,CAAsD,UAAU,CAAC,KAAjE;IACA,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,MAA/C,CAAsD,UAAU,CAAC,KAAjE;IACA,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B;MAAE,KAAA,EAAO,EAAT;MAAa,KAAA,EAAO;IAApB,CAA/B;WACA,CAAA,CAAE,0BAAF,CAA6B,CAAC,IAA9B,CAAmC,EAAA,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,MAAxB,GAA+B,IAA/B,GAAoC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,MAAzD,GAAgE,GAAnG;EAjBgB;;EAmBlB,iBAAA,GAAoB,QAAA,CAAA,CAAA;AAClB,QAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,EAAA;IAAA,MAAM,CAAC,OAAP,GAAoB,MAAM,CAAC,OAAV,GAAuB,MAAM,CAAC,OAA9B,GAA2C;MAAC,KAAA,EAAM,EAAP;MAAU,KAAA,EAAM,EAAhB;MAAoB,SAAA,EAAU,CAAA;IAA9B;IAC5D,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,GAA/C,CAAmD,MAAM,CAAC,OAAO,CAAC,KAAlE;IACA,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,GAA/C,CAAmD,MAAM,CAAC,OAAO,CAAC,KAAlE;IACA,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B;MAAE,KAAA;;AAAgB;AAAA;QAAA,KAAA,qCAAA;;wBAAR,IAAI,CAAC;QAAG,CAAA;;UAAlB;MAAqD,KAAA;;AAAgB;AAAA;QAAA,KAAA,qCAAA;;wBAAR,IAAI,CAAC;QAAG,CAAA;;;IAArE,CAA/B;AACA;IAAA,KAAA,qCAAA;;MACE,MAAA,GAAS,MAAM,CAAC,OAAO,CAAC,SAAU,CAAA,IAAI,CAAC,EAAL;MAClC,MAAM,CAAC,UAAU,CAAC,QAAlB,CAA2B,IAAI,CAAC,EAAhC,EAAmC,MAAM,CAAC,CAA1C,EAA4C,MAAM,CAAC,CAAnD;IAFF;IAGA,MAAM,CAAC,OAAP,GAAiB;MAAC,KAAA,EAAM,EAAP;MAAU,KAAA,EAAM,EAAhB;MAAoB,SAAA,EAAU,CAAA;IAA9B;WACjB,CAAA,CAAE,0BAAF,CAA6B,CAAC,IAA9B,CAAmC,OAAnC;EATkB;;EAUpB,MAAM,CAAC,OAAP,GAAiB;IAAC,KAAA,EAAM,EAAP;IAAU,KAAA,EAAM,EAAhB;IAAoB,SAAA,EAAU,CAAA;EAA9B;;EAEjB,YAAA,GAAe,QAAA,CAAA,CAAA;AACb,QAAA,IAAA,EAAA,WAAA,EAAA;IAAA,WAAA;;AAAuB;AAAA;MAAA,KAAA,qCAAA;;sBAAR,IAAI,CAAC;MAAG,CAAA;;;IACvB,WAAA;;AAAuB;AAAA;MAAA,KAAA,qCAAA;;sBAAR,IAAI,CAAC;MAAG,CAAA;;;WACvB,mBAAA,CAAoB,6BAApB,EAAmD,WAAnD,EAA+D,WAA/D,EAA2E,MAAM,CAAC,OAAO,CAAC,SAA1F;EAHa;;EAMf,eAAA,GAAkB,QAAA,CAAA,CAAA;AAChB,QAAA,IAAA,EAAA,UAAA,EAAA,UAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA;IAAA,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,YAAlB,CAAA;IACb,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,GAA/C,CAAmD,UAAU,CAAC,KAA9D;IACb,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,GAA/C,CAAmD,UAAU,CAAC,KAA9D;IACb,MAAM,CAAC,OAAP,GAAoB,MAAM,CAAC,OAAV,GAAuB,MAAM,CAAC,OAA9B,GAA2C;MAAC,KAAA,EAAM,EAAP;MAAU,KAAA,EAAM,EAAhB;MAAoB,SAAA,EAAU,CAAA;IAA9B,EAH5D;;IAKA,KAAA,4CAAA;;MACE,IAAI,CAAC,OAAL,GAAe;IADjB,CALA;;IAQA,KAAA,8CAAA;;MACE,IAAI,CAAC,OAAL,GAAe;IADjB;IAEA,MAAM,CAAC,OAAO,CAAC,KAAf,GAAuB,CAAC,CAAC,KAAF,CAAQ,MAAM,CAAC,OAAO,CAAC,KAAvB,EAA8B,UAA9B;IACvB,MAAM,CAAC,OAAO,CAAC,KAAf,GAAuB,CAAC,CAAC,KAAF,CAAQ,MAAM,CAAC,OAAO,CAAC,KAAvB,EAA8B,UAA9B;IACvB,MAAM,CAAC,OAAO,CAAC,SAAf,GAA2B,CAAC,CAAC,MAAF,CAAS,MAAM,CAAC,OAAO,CAAC,SAAxB,EAAmC,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B,UAAU,CAAC,KAA1C,CAAnC;IAC3B,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,MAA/C,CAAsD,UAAU,CAAC,KAAjE;IACA,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,MAA/C,CAAsD,UAAU,CAAC,KAAjE;IACA,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B;MAAE,KAAA,EAAO,EAAT;MAAa,KAAA,EAAO;IAApB,CAA/B;WACA,CAAA,CAAE,0BAAF,CAA6B,CAAC,IAA9B,CAAmC,EAAA,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,MAAxB,GAA+B,IAA/B,GAAoC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,MAAzD,GAAgE,GAAnG;EAjBgB;;EAmBlB,iBAAA,GAAoB,QAAA,CAAA,CAAA;AAClB,QAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,EAAA;IAAA,MAAM,CAAC,OAAP,GAAoB,MAAM,CAAC,OAAV,GAAuB,MAAM,CAAC,OAA9B,GAA2C;MAAC,KAAA,EAAM,EAAP;MAAU,KAAA,EAAM,EAAhB;MAAoB,SAAA,EAAU,CAAA;IAA9B;IAC5D,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,GAA/C,CAAmD,MAAM,CAAC,OAAO,CAAC,KAAlE;IACA,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,GAA/C,CAAmD,MAAM,CAAC,OAAO,CAAC,KAAlE;IACA,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B;MAAE,KAAA;;AAAgB;AAAA;QAAA,KAAA,qCAAA;;wBAAR,IAAI,CAAC;QAAG,CAAA;;UAAlB;MAAqD,KAAA;;AAAgB;AAAA;QAAA,KAAA,qCAAA;;wBAAR,IAAI,CAAC;QAAG,CAAA;;;IAArE,CAA/B;AACA;IAAA,KAAA,qCAAA;;MACE,MAAA,GAAS,MAAM,CAAC,OAAO,CAAC,SAAU,CAAA,IAAI,CAAC,EAAL;MAClC,MAAM,CAAC,UAAU,CAAC,QAAlB,CAA2B,IAAI,CAAC,EAAhC,EAAmC,MAAM,CAAC,CAA1C,EAA4C,MAAM,CAAC,CAAnD;IAFF;IAGA,MAAM,CAAC,OAAP,GAAiB;MAAC,KAAA,EAAM,EAAP;MAAU,KAAA,EAAM,EAAhB;MAAoB,SAAA,EAAU,CAAA;IAA9B;WACjB,CAAA,CAAE,0BAAF,CAA6B,CAAC,IAA9B,CAAmC,OAAnC;EATkB;;EAUpB,MAAM,CAAC,OAAP,GAAiB;IAAC,KAAA,EAAM,EAAP;IAAU,KAAA,EAAM,EAAhB;IAAoB,SAAA,EAAU,CAAA;EAA9B;;EAEjB,YAAA,GAAe,QAAA,CAAA,CAAA;AACb,QAAA,IAAA,EAAA,WAAA,EAAA;IAAA,WAAA;;AAAuB;AAAA;MAAA,KAAA,qCAAA;;sBAAR,IAAI,CAAC;MAAG,CAAA;;;IACvB,WAAA;;AAAuB;AAAA;MAAA,KAAA,qCAAA;;sBAAR,IAAI,CAAC;MAAG,CAAA;;;WACvB,mBAAA,CAAoB,6BAApB,EAAmD,WAAnD,EAA+D,WAA/D,EAA2E,MAAM,CAAC,OAAO,CAAC,SAA1F;EAHa;;EAKf,eAAA,GAAkB,QAAA,CAAA,CAAA;AAChB,QAAA,IAAA,EAAA,UAAA,EAAA,UAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA;IAAA,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,YAAlB,CAAA;IACb,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,GAA/C,CAAmD,UAAU,CAAC,KAA9D;IACb,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,GAA/C,CAAmD,UAAU,CAAC,KAA9D;IACb,MAAM,CAAC,OAAP,GAAoB,MAAM,CAAC,OAAV,GAAuB,MAAM,CAAC,OAA9B,GAA2C;MAAC,KAAA,EAAM,EAAP;MAAU,KAAA,EAAM,EAAhB;MAAoB,SAAA,EAAU,CAAA;IAA9B,EAH5D;;IAKA,KAAA,4CAAA;;MACE,IAAI,CAAC,OAAL,GAAe;IADjB,CALA;;IAQA,KAAA,8CAAA;;MACE,IAAI,CAAC,OAAL,GAAe;IADjB;IAEA,MAAM,CAAC,OAAO,CAAC,KAAf,GAAuB,CAAC,CAAC,KAAF,CAAQ,MAAM,CAAC,OAAO,CAAC,KAAvB,EAA8B,UAA9B;IACvB,MAAM,CAAC,OAAO,CAAC,KAAf,GAAuB,CAAC,CAAC,KAAF,CAAQ,MAAM,CAAC,OAAO,CAAC,KAAvB,EAA8B,UAA9B;IACvB,MAAM,CAAC,OAAO,CAAC,SAAf,GAA2B,CAAC,CAAC,MAAF,CAAS,MAAM,CAAC,OAAO,CAAC,SAAxB,EAAmC,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B,UAAU,CAAC,KAA1C,CAAnC;IAC3B,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,MAA/C,CAAsD,UAAU,CAAC,KAAjE;IACA,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,MAA/C,CAAsD,UAAU,CAAC,KAAjE;IACA,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B;MAAE,KAAA,EAAO,EAAT;MAAa,KAAA,EAAO;IAApB,CAA/B;WACA,CAAA,CAAE,0BAAF,CAA6B,CAAC,IAA9B,CAAmC,EAAA,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,MAAxB,GAA+B,IAA/B,GAAoC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,MAAzD,GAAgE,GAAnG;EAjBgB;;EAmBlB,iBAAA,GAAoB,QAAA,CAAA,CAAA;AAClB,QAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,EAAA;IAAA,MAAM,CAAC,OAAP,GAAoB,MAAM,CAAC,OAAV,GAAuB,MAAM,CAAC,OAA9B,GAA2C;MAAC,KAAA,EAAM,EAAP;MAAU,KAAA,EAAM,EAAhB;MAAoB,SAAA,EAAU,CAAA;IAA9B;IAC5D,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,GAA/C,CAAmD,MAAM,CAAC,OAAO,CAAC,KAAlE;IACA,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,GAA/C,CAAmD,MAAM,CAAC,OAAO,CAAC,KAAlE;IACA,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B;MAAE,KAAA;;AAAgB;AAAA;QAAA,KAAA,qCAAA;;wBAAR,IAAI,CAAC;QAAG,CAAA;;UAAlB;MAAqD,KAAA;;AAAgB;AAAA;QAAA,KAAA,qCAAA;;wBAAR,IAAI,CAAC;QAAG,CAAA;;;IAArE,CAA/B;AACA;IAAA,KAAA,qCAAA;;MACE,MAAA,GAAS,MAAM,CAAC,OAAO,CAAC,SAAU,CAAA,IAAI,CAAC,EAAL;MAClC,MAAM,CAAC,UAAU,CAAC,QAAlB,CAA2B,IAAI,CAAC,EAAhC,EAAmC,MAAM,CAAC,CAA1C,EAA4C,MAAM,CAAC,CAAnD;IAFF;IAGA,MAAM,CAAC,OAAP,GAAiB;MAAC,KAAA,EAAM,EAAP;MAAU,KAAA,EAAM,EAAhB;MAAoB,SAAA,EAAU,CAAA;IAA9B;WACjB,CAAA,CAAE,0BAAF,CAA6B,CAAC,IAA9B,CAAmC,OAAnC;EATkB;;EAUpB,MAAM,CAAC,OAAP,GAAiB;IAAC,KAAA,EAAM,EAAP;IAAU,KAAA,EAAM,EAAhB;IAAoB,SAAA,EAAU,CAAA;EAA9B;;EAEjB,YAAA,GAAe,QAAA,CAAA,CAAA;AACb,QAAA,IAAA,EAAA,WAAA,EAAA;IAAA,WAAA;;AAAuB;AAAA;MAAA,KAAA,qCAAA;;sBAAR,IAAI,CAAC;MAAG,CAAA;;;IACvB,WAAA;;AAAuB;AAAA;MAAA,KAAA,qCAAA;;sBAAR,IAAI,CAAC;MAAG,CAAA;;;WACvB,mBAAA,CAAoB,6BAApB,EAAmD,WAAnD,EAA+D,WAA/D,EAA2E,MAAM,CAAC,OAAO,CAAC,SAA1F;EAHa;;EAKf,eAAA,GAAkB,QAAA,CAAA,CAAA;AAChB,QAAA,IAAA,EAAA,UAAA,EAAA,UAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA;IAAA,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,YAAlB,CAAA;IACb,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,GAA/C,CAAmD,UAAU,CAAC,KAA9D;IACb,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,GAA/C,CAAmD,UAAU,CAAC,KAA9D;IACb,MAAM,CAAC,OAAP,GAAoB,MAAM,CAAC,OAAV,GAAuB,MAAM,CAAC,OAA9B,GAA2C;MAAC,KAAA,EAAM,EAAP;MAAU,KAAA,EAAM,EAAhB;MAAoB,SAAA,EAAU,CAAA;IAA9B,EAH5D;;IAKA,KAAA,4CAAA;;MACE,IAAI,CAAC,OAAL,GAAe;IADjB,CALA;;IAQA,KAAA,8CAAA;;MACE,IAAI,CAAC,OAAL,GAAe;IADjB;IAEA,MAAM,CAAC,OAAO,CAAC,KAAf,GAAuB,CAAC,CAAC,KAAF,CAAQ,MAAM,CAAC,OAAO,CAAC,KAAvB,EAA8B,UAA9B;IACvB,MAAM,CAAC,OAAO,CAAC,KAAf,GAAuB,CAAC,CAAC,KAAF,CAAQ,MAAM,CAAC,OAAO,CAAC,KAAvB,EAA8B,UAA9B;IACvB,MAAM,CAAC,OAAO,CAAC,SAAf,GAA2B,CAAC,CAAC,MAAF,CAAS,MAAM,CAAC,OAAO,CAAC,SAAxB,EAAmC,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B,UAAU,CAAC,KAA1C,CAAnC;IAC3B,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,MAA/C,CAAsD,UAAU,CAAC,KAAjE;IACA,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,MAA/C,CAAsD,UAAU,CAAC,KAAjE;IACA,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B;MAAE,KAAA,EAAO,EAAT;MAAa,KAAA,EAAO;IAApB,CAA/B;WACA,CAAA,CAAE,0BAAF,CAA6B,CAAC,IAA9B,CAAmC,EAAA,GAAG,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,MAAxB,GAA+B,IAA/B,GAAoC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,MAAzD,GAAgE,GAAnG;EAjBgB;;EAmBlB,iBAAA,GAAoB,QAAA,CAAA,CAAA;AAClB,QAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,MAAA,EAAA;IAAA,MAAM,CAAC,OAAP,GAAoB,MAAM,CAAC,OAAV,GAAuB,MAAM,CAAC,OAA9B,GAA2C;MAAC,KAAA,EAAM,EAAP;MAAU,KAAA,EAAM,EAAhB;MAAoB,SAAA,EAAU,CAAA;IAA9B;IAC5D,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,GAA/C,CAAmD,MAAM,CAAC,OAAO,CAAC,KAAlE;IACA,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,GAA/C,CAAmD,MAAM,CAAC,OAAO,CAAC,KAAlE;IACA,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B;MAAE,KAAA;;AAAgB;AAAA;QAAA,KAAA,qCAAA;;wBAAR,IAAI,CAAC;QAAG,CAAA;;UAAlB;MAAqD,KAAA;;AAAgB;AAAA;QAAA,KAAA,qCAAA;;wBAAR,IAAI,CAAC;QAAG,CAAA;;;IAArE,CAA/B;AACA;IAAA,KAAA,qCAAA;;MACE,MAAA,GAAS,MAAM,CAAC,OAAO,CAAC,SAAU,CAAA,IAAI,CAAC,EAAL;MAClC,MAAM,CAAC,UAAU,CAAC,QAAlB,CAA2B,IAAI,CAAC,EAAhC,EAAmC,MAAM,CAAC,CAA1C,EAA4C,MAAM,CAAC,CAAnD;IAFF;IAGA,MAAM,CAAC,OAAP,GAAiB;MAAC,KAAA,EAAM,EAAP;MAAU,KAAA,EAAM,EAAhB;MAAoB,SAAA,EAAU,CAAA;IAA9B;WACjB,CAAA,CAAE,0BAAF,CAA6B,CAAC,IAA9B,CAAmC,OAAnC;EATkB;;EAUpB,MAAM,CAAC,OAAP,GAAiB;IAAC,KAAA,EAAM,EAAP;IAAU,KAAA,EAAM,EAAhB;IAAoB,SAAA,EAAU,CAAA;EAA9B;;EAEjB,YAAA,GAAe,QAAA,CAAA,CAAA;AACb,QAAA,IAAA,EAAA,WAAA,EAAA;IAAA,WAAA;;AAAuB;AAAA;MAAA,KAAA,qCAAA;;sBAAR,IAAI,CAAC;MAAG,CAAA;;;IACvB,WAAA;;AAAuB;AAAA;MAAA,KAAA,qCAAA;;sBAAR,IAAI,CAAC;MAAG,CAAA;;;WACvB,mBAAA,CAAoB,6BAApB,EAAmD,WAAnD,EAA+D,WAA/D,EAA2E,MAAM,CAAC,OAAO,CAAC,SAA1F;EAHa;;EAMf,gBAAA,GAAmB,QAAA,CAAA,CAAA;AACjB,QAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAS;AAAA;IAAA,KAAA,qCAAA;;oBAAR,IAAI,CAAC;IAAG,CAAA;;EADQ;;EAGnB,gBAAA,GAAmB,QAAA,CAAA,CAAA;AACjB,QAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;AAAS;AAAA;IAAA,KAAA,qCAAA;;oBAAR,IAAI,CAAC;IAAG,CAAA;;EADQ;;EAGnB,cAAA,GAAiB,QAAA,CAAA,CAAA;AACf,QAAA,UAAA,EAAA,UAAA,EAAA;IAAA,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,YAAlB,CAAA;IACb,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,GAA/C,CAAmD,UAAU,CAAC,KAA9D;IACb,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,GAA/C,CAAmD,UAAU,CAAC,KAA9D;IACb,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,MAA/C,CAAsD,UAAU,CAAC,KAAjE;WACA,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,MAA/C,CAAsD,UAAU,CAAC,KAAjE;EALe;;EAQjB,cAAA,GAAiB,QAAA,CAAA,CAAA;AAEf,QAAA,QAAA,EAAA,UAAA,EAAA,EAAA,EAAA,OAAA,EAAA,MAAA,EAAA,SAAA;;IAAA,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,YAAlB,CAAA;IACb,IAAG,UAAU,CAAC,KAAK,CAAC,MAAjB,GAA0B,CAA7B;MACE,QAAA,GAAW;QAAC,IAAA,EAAM,UAAU,CAAC;MAAlB;MACX,EAAA,GAAK;MACL,MAAA,GAAS,6DAAA,GAAgE,EAAhE,GACP,+CADO,GAC2C,EAD3C,GAEP,gCAFO,GAE4B,EAF5B,GAGP,iDAHO,GAG6C,EAH7C,GAIP,kCAJO,GAI8B,EAJ9B,GAKP,gDALO,GAK4C,EAL5C,GAMP,gCANO,GAM4B,EAN5B,GAOP,kDAPO,GAO8C,EAP9C,GAQP,kCARO,GAQ8B,EAR9B,GASP;MACF,IAAI,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAJ;QACE,MAAM,CAAC,aAAa,CAAC,SAArB,GAAiC,QAAA,CAAC,GAAD,CAAA;AAC/B,cAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,YAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,YAAA,EAAA,KAAA,EAAA,KAAA,EAAA;UAAA,OAAA,GAAU,IAAI,CAAC,GAAL,CAAA;UACV,IAAA,GAAO,GAAG,CAAC;UACX,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,IAAX;UACP,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,IAAoB,GAAvB;mBACE,KAAA,CAAM,sCAAA,GAAuC,IAAI,CAAC,MAAM,CAAC,OAAzD,EADF;WAAA,MAAA;YAGE,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,KAAoB,GAAvB;qBACE,OAAA,GAAU,GADZ;aAAA,MAAA;cAGE,OAAA,GAAU,IAAI,CAAC,MAAM,CAAC;cACtB,GAAA,GAAM,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA;cACN,GAAA,GAAM,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA;cACN,IAAA,GAAO,CAAC,CAAC,MAAF,CAAS,OAAQ,CAAA,CAAA,CAAjB,EAAqB,QAAA,CAAC,CAAD,CAAA;uBAC1B,GAAG,CAAC,GAAJ,CAAQ,CAAC,CAAC,EAAV,CAAA,KAAiB;cADS,CAArB;cAGP,KAAA,GAAQ,CAAC,CAAC,MAAF,CAAS,OAAQ,CAAA,CAAA,CAAjB,EAAqB,QAAA,CAAC,CAAD,CAAA;uBAC3B,GAAG,CAAC,GAAJ,CAAQ,CAAC,CAAC,EAAV,CAAA,KAAiB;cADU,CAArB;cAGR,IAAA,GAAO,CAAC,CAAC,MAAF,CAAS,OAAQ,CAAA,CAAA,CAAjB,EAAqB,QAAA,CAAC,CAAD,CAAA;uBAC1B,GAAG,CAAC,GAAJ,CAAQ,CAAC,CAAC,EAAV,CAAA,KAAiB;cADS,CAArB;cAGP,KAAA,GAAQ,CAAC,CAAC,MAAF,CAAS,OAAQ,CAAA,CAAA,CAAjB,EAAqB,QAAA,CAAC,CAAD,CAAA;uBAC3B,GAAG,CAAC,GAAJ,CAAQ,CAAC,CAAC,EAAV,CAAA,KAAiB;cADU,CAArB;cAIR,IAAA,GAAO,CAAC,CAAC,IAAF,CAAO,CAAC,CAAC,KAAF,CAAQ,IAAR,EAAa,KAAb,CAAP;cACP,GAAA,GAAM,gBAAA,CAAA;cACN,IAAA,GAAO,CAAC,CAAC,MAAF,CAAS,IAAT,EAAe,QAAA,CAAC,IAAD,CAAA;uBACpB,CAAC,CAAC,QAAF,CAAW,GAAX,EAAe,IAAI,CAAC,EAAL,GAAQ,EAAvB;cADoB,CAAf;cAEP,IAAA,GAAO,CAAC,CAAC,IAAF,CAAO,CAAC,CAAC,KAAF,CAAQ,IAAR,EAAa,KAAb,CAAP;cACP,GAAA,GAAM,gBAAA,CAAA;cACN,IAAA,GAAO,CAAC,CAAC,MAAF,CAAS,IAAT,EAAe,QAAA,CAAC,IAAD,CAAA;uBACpB,CAAC,CAAC,QAAF,CAAW,GAAX,EAAe,IAAI,CAAC,EAApB;cADoB,CAAf;cAEP,YAAA,GAAe,CAAC,CAAC,OAAF,CAAU,UAAU,CAAC,KAArB,EAA4B,CAA5B;cACf,YAAA,GAAe,CAAC,CAAC,OAAF,CAAU,UAAU,CAAC,KAArB,EAA4B,CAA5B;cACf,IAAG,IAAI,CAAC,MAAL,GAAc,GAAjB;;uBAEE,oBAAA,CAAqB,YAArB,EAAkC,YAAlC,EAA+C,IAA/C,EAAoD,IAApD,EAFF;eAAA,MAAA;uBAIE,iBAAA,CAAkB,YAAlB,EAA+B,YAA/B,EAA4C,IAA5C,EAAiD,IAAjD,EAJF;eA7BF;aAHF;;QAJ+B;QAyCjC,OAAA,GACE;UAAA,SAAA,EAAW,IAAI,CAAC,GAAL,CAAA,CAAX;UACA,EAAA,EAAG,MADH;UAEA,SAAA,EAAU,EAFV;UAGA,IAAA,EAAK;YAAC,OAAA,EAAS,MAAV;YAAkB,QAAA,EAAU,QAA5B;YAAsC,QAAA,EAAU;UAAhD;QAHL;QAIF,SAAA,GAAY,IAAI,CAAC,GAAL,CAAA;eACZ,MAAM,CAAC,aAAa,CAAC,IAArB,CAA0B,IAAI,CAAC,SAAL,CAAe,OAAf,CAA1B,EAhDF;OAAA,MAAA;eAkDE,MAAM,CAAC,IAAP,CAAY,WAAZ,EAAyB,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAzB,EAAgD,OAAO,CAAC,GAAR,CAAY,WAAZ,CAAhD,EAA0E,OAAO,CAAC,GAAR,CAAY,kBAAZ,CAA1E,EAA2G,OAAO,CAAC,GAAR,CAAY,WAAZ,CAA3G,EAAoI,eAApI,EAAqJ,MAArJ,EAA6J,QAA7J,EAAuK,QAAA,CAAC,KAAD,EAAO,MAAP,CAAA;AACrK,cAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,YAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,YAAA,EAAA,KAAA,EAAA,KAAA,EAAA;UAAA,IAAG,MAAM,CAAC,OAAP,KAAkB,IAArB;YACE,OAAA,GAAU,MAAM,CAAC;YACjB,OAAO,CAAC,GAAR,CAAY,OAAZ;YACA,GAAA,GAAM,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA;YACN,GAAA,GAAM,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA;YACN,IAAA,GAAO,CAAC,CAAC,MAAF,CAAS,OAAQ,CAAA,CAAA,CAAjB,EAAqB,QAAA,CAAC,CAAD,CAAA;qBAC1B,GAAG,CAAC,GAAJ,CAAQ,CAAC,CAAC,EAAV,CAAA,KAAiB;YADS,CAArB;YAGP,KAAA,GAAQ,CAAC,CAAC,MAAF,CAAS,OAAQ,CAAA,CAAA,CAAjB,EAAqB,QAAA,CAAC,CAAD,CAAA;qBAC3B,GAAG,CAAC,GAAJ,CAAQ,CAAC,CAAC,EAAV,CAAA,KAAiB;YADU,CAArB;YAGR,IAAA,GAAO,CAAC,CAAC,MAAF,CAAS,OAAQ,CAAA,CAAA,CAAjB,EAAqB,QAAA,CAAC,CAAD,CAAA;qBAC1B,GAAG,CAAC,GAAJ,CAAQ,CAAC,CAAC,EAAV,CAAA,KAAiB;YADS,CAArB;YAGP,KAAA,GAAQ,CAAC,CAAC,MAAF,CAAS,OAAQ,CAAA,CAAA,CAAjB,EAAqB,QAAA,CAAC,CAAD,CAAA;qBAC3B,GAAG,CAAC,GAAJ,CAAQ,CAAC,CAAC,EAAV,CAAA,KAAiB;YADU,CAArB;YAGR,IAAA,GAAO,CAAC,CAAC,IAAF,CAAO,CAAC,CAAC,KAAF,CAAQ,IAAR,EAAa,KAAb,CAAP;YACP,GAAA,GAAM,gBAAA,CAAA;YACN,IAAA,GAAO,CAAC,CAAC,MAAF,CAAS,IAAT,EAAe,QAAA,CAAC,IAAD,CAAA;qBACpB,CAAC,CAAC,QAAF,CAAW,GAAX,EAAe,IAAI,CAAC,EAAL,GAAQ,EAAvB;YADoB,CAAf;YAEP,IAAA,GAAO,CAAC,CAAC,IAAF,CAAO,CAAC,CAAC,KAAF,CAAQ,IAAR,EAAa,KAAb,CAAP;YACP,GAAA,GAAM,gBAAA,CAAA;YACN,IAAA,GAAO,CAAC,CAAC,MAAF,CAAS,IAAT,EAAe,QAAA,CAAC,IAAD,CAAA;qBACpB,CAAC,CAAC,QAAF,CAAW,GAAX,EAAe,IAAI,CAAC,EAApB;YADoB,CAAf;YAEP,YAAA,GAAe,CAAC,CAAC,OAAF,CAAU,UAAU,CAAC,KAArB,EAA4B,CAA5B;YACf,YAAA,GAAe,CAAC,CAAC,OAAF,CAAU,UAAU,CAAC,KAArB,EAA4B,CAA5B;YACf,IAAG,IAAI,CAAC,MAAL,GAAc,IAAI,CAAC,MAAnB,GAA4B,EAA/B;;qBAEE,oBAAA,CAAqB,YAArB,EAAkC,YAAlC,EAA+C,IAA/C,EAAoD,IAApD,EAFF;aAAA,MAAA;qBAIE,iBAAA,CAAkB,YAAlB,EAA+B,YAA/B,EAA4C,IAA5C,EAAiD,IAAjD,EAJF;aA3BF;WAAA,MAAA;mBAiCE,KAAA,CAAM,0DAAN,EAjCF;;QADqK,CAAvK,EAlDF;OAbF;;EAHe;;EAuGjB,gBAAA,GAAmB,QAAA,CAAA,CAAA;AAEjB,QAAA,MAAA,EAAA,YAAA,EAAA,UAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,EAAA,CAAA,EAAA,OAAA,EAAA,QAAA,EAAA,OAAA,EAAA,QAAA,EAAA,MAAA,EAAA,YAAA,EAAA,GAAA,EAAA,IAAA;;IAAA,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,YAAlB,CAAA;IACb,YAAA,GAAe,CAAC,CAAC,OAAF,CAAU,UAAU,CAAC,KAArB,EAA4B,CAA5B;IACf,YAAA,GAAe,CAAC,CAAC,OAAF,CAAU,UAAU,CAAC,KAArB,EAA4B,CAA5B;AACf;IAAA,KAAA,qCAAA;;MACE,QAAA,GAAW,MAAM,CAAC,UAAU,CAAC,iBAAlB,CAAoC,MAApC;MACX,KAAA,4CAAA;;QACE,YAAY,CAAC,IAAb,CAAkB,OAAlB;MADF;IAFF;AAIA;IAAA,KAAA,wCAAA;;MACE,QAAA,GAAW,MAAM,CAAC,UAAU,CAAC,iBAAlB,CAAoC,MAApC;MACX,KAAA,4CAAA;;QACE,YAAY,CAAC,IAAb,CAAkB,OAAlB;MADF;IAFF;WAIA,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B;MAAC,KAAA,EAAO,CAAC,CAAC,IAAF,CAAO,YAAP,CAAR;MAA8B,KAAA,EAAO,CAAC,CAAC,IAAF,CAAO,YAAP;IAArC,CAA/B;EAbiB;;EAenB,iBAAA,GAAoB,QAAA,CAAA,CAAA,EAAA;;;IAGlB,gBAAA,CAAA;IACA,gBAAA,CAAA;IACA,gBAAA,CAAA;IACA,gBAAA,CAAA;WACA,gBAAA,CAAA;EAPkB;;EASpB,gBAAA,GAAmB,QAAA,CAAA,CAAA;AACjB,QAAA,QAAA,EAAA,UAAA,EAAA,OAAA,EAAA,MAAA,EAAA;IAAA,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,YAAlB,CAAA;IACb,QAAA,GAAW;MAAC,SAAA,EAAW,UAAU,CAAC,KAAvB;MAA8B,SAAA,EAAW,UAAU,CAAC;IAApD;IACX,MAAA,GAAS,6EAAA,GAA8E;IACvF,IAAG,UAAU,CAAC,KAAK,CAAC,MAAjB,GAA0B,CAA7B;MACE,MAAA,GAAS,MAAA,GAAS,+BAAT,GAAyC,KADpD;;IAEA,IAAG,UAAU,CAAC,KAAK,CAAC,MAAjB,GAA0B,CAA7B;MACE,MAAA,GAAS,MAAA,GAAS,+BAAT,GAAyC,KADpD;;IAEA,IAAI,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAJ;MACE,MAAM,CAAC,aAAa,CAAC,SAArB,GAAiC,QAAA,CAAC,GAAD,CAAA;AAC/B,YAAA,IAAA,EAAA,OAAA,EAAA;QAAA,OAAA,GAAU,IAAI,CAAC,GAAL,CAAA;QACV,IAAA,GAAO,GAAG,CAAC;QACX,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,IAAX;QACP,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,IAAoB,GAAvB;iBACE,KAAA,CAAM,sCAAA,GAAuC,IAAI,CAAC,MAAM,CAAC,OAAzD,EADF;SAAA,MAAA;UAGE,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,MAA/C,CAAsD,UAAU,CAAC,KAAjE;iBACA,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,MAA/C,CAAsD,UAAU,CAAC,KAAjE,EAJF;;MAJ+B;MASjC,OAAA,GACE;QAAA,SAAA,EAAW,IAAI,CAAC,GAAL,CAAA,CAAX;QACA,EAAA,EAAG,MADH;QAEA,SAAA,EAAU,EAFV;QAGA,IAAA,EAAK;UAAC,OAAA,EAAS,MAAV;UAAkB,QAAA,EAAU,QAA5B;UAAsC,QAAA,EAAU;QAAhD;MAHL;MAIF,SAAA,GAAY,IAAI,CAAC,GAAL,CAAA;aACZ,MAAM,CAAC,aAAa,CAAC,IAArB,CAA0B,IAAI,CAAC,SAAL,CAAe,OAAf,CAA1B,EAhBF;KAAA,MAAA;aAkBE,MAAM,CAAC,IAAP,CAAY,WAAZ,EAAyB,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAzB,EAAgD,OAAO,CAAC,GAAR,CAAY,WAAZ,CAAhD,EAA0E,OAAO,CAAC,GAAR,CAAY,kBAAZ,CAA1E,EAA2G,OAAO,CAAC,GAAR,CAAY,kBAAZ,CAA3G,EAA2I,gDAA3I,EAA6L,MAA7L,EAAqM,QAArM,EAA+M,QAAA,CAAC,KAAD,EAAO,MAAP,CAAA;QAC7M,IAAG,MAAM,CAAC,OAAP,KAAkB,IAArB;UACE,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,MAA/C,CAAsD,UAAU,CAAC,KAAjE;iBACA,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAAlC,CAAA,CAA8C,CAAC,MAA/C,CAAsD,UAAU,CAAC,KAAjE,EAFF;SAAA,MAAA;iBAIE,KAAA,CAAM,+CAAA,GAAgD,MAAtD,EAJF;;MAD6M,CAA/M,EAlBF;;EARiB;;EAiCnB,eAAA,GAAkB,QAAA,CAAA,CAAA;AAChB,QAAA;IAAA,UAAA,GAAa,MAAM,CAAC,UAAU,CAAC,YAAlB,CAAA;WACb,aAAA,CAAc,UAAd;EAFgB,EA9+BlB;;;EAo/BA,2BAAA,GAA8B,QAAA,CAAC,QAAD,CAAA;AAC5B,QAAA,OAAA,EAAA,MAAA,EAAA;IAAA,KAAA,CAAM,0CAAN;IACA,MAAA,GACA;IAiDA,IAAI,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAJ;MACE,MAAM,CAAC,aAAa,CAAC,SAArB,GAAiC,QAAA,CAAC,GAAD,CAAA;AAC/B,YAAA,IAAA,EAAA,IAAA,EAAA,eAAA,EAAA,OAAA,EAAA,IAAA,EAAA,GAAA,EAAA,IAAA,EAAA,OAAA,EAAA,OAAA,EAAA,IAAA,EAAA,eAAA,EAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,YAAA,EAAA,YAAA,EAAA;QAAA,OAAA,GAAU,IAAI,CAAC,GAAL,CAAA;QACV,IAAA,GAAO,GAAG,CAAC;QACX,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,IAAX;QACP,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,IAAoB,GAAvB;iBACE,KAAA,CAAM,sCAAA,GAAuC,IAAI,CAAC,MAAM,CAAC,OAAzD,EADF;SAAA,MAAA;UAGE,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,KAAoB,GAAvB;mBACE,OAAA,GAAU,GADZ;WAAA,MAAA;YAGE,OAAA,GAAU,IAAI,CAAC,MAAM,CAAC;YACtB,IAAA,GAAO,OAAQ,CAAA,CAAA;YACf,IAAA,GAAO,OAAQ,CAAA,CAAA;YACf,eAAA,GAAkB;YAClB,eAAA,GAAkB;YAClB,KAAA,cAAA;;cACE,OAAA,GAAU;gBAAC,OAAA,EAAS,KAAV;gBAAiB,EAAA,EAAI,MAAA,CAAO,IAAI,CAAC,EAAZ,CAArB;gBAAqC,KAAA,EAAO,cAAA,CAAe,IAAf,EAAoB,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAApB,CAA5C;gBAAiG,cAAA,EAAgB,IAAjH;gBAAuH,cAAA,EAAgB,IAAvI;gBAA6I,KAAA,EAAO,eAAA,CAAgB,IAAhB,CAApJ;gBAA2K,OAAA,EAAQ;cAAnL;cACV,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAA/C,CAAmD,OAAnD;cACA,IAAG,QAAS,CAAA,WAAA,CAAT,IAAyB,QAAQ,CAAC,SAAU,CAAA,MAAA,CAA/C;gBACE,GAAA,GAAM,QAAQ,CAAC,SAAU,CAAA,MAAM,CAAC,QAAP,CAAA,CAAA;gBACzB,MAAM,CAAC,UAAU,CAAC,QAAlB,CAA2B,OAAO,CAAC,EAAnC,EAAsC,GAAG,CAAC,CAA1C,EAA4C,GAAG,CAAC,CAAhD,EAFF;eAAA,MAAA;gBAIE,MAAM,CAAC,UAAU,CAAC,QAAlB,CAA2B,OAAO,CAAC,EAAnC,EAAsC,CAAtC,EAAwC,CAAxC,EAJF;;cAKA,IAAG,QAAS,CAAA,QAAA,CAAT,IAAsB,QAAQ,CAAC,MAAO,CAAA,MAAM,CAAC,QAAP,CAAA,CAAA,CAAzC;gBACE,YAAA,GAAe,QAAQ,CAAC,MAAO,CAAA,MAAM,CAAC,QAAP,CAAA,CAAA;gBAC/B,OAAA,GAAU,CAAC,CAAC,MAAF,CAAS,OAAT,EAAiB,YAAjB;gBACV,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAA/C,CAAA,CAA2D,CAAC,MAA5D,CAAmE,OAAnE;gBACA,MAAM,CAAC,UAAU,CAAC,QAAlB,CAA2B,OAAO,CAAC,EAAnC,EAAsC,GAAG,CAAC,CAA1C,EAA4C,GAAG,CAAC,CAAhD,EAJF;;cAKA,eAAe,CAAC,IAAhB,CAAqB,OAAO,CAAC,EAA7B;YAbF;YAcA,KAAA,cAAA;;cACE,OAAA,GAAU;gBAAC,EAAA,EAAI,MAAA,CAAO,IAAI,CAAC,EAAZ,CAAL;gBAAqB,KAAA,EAAO,IAAI,CAAC,KAAjC;gBAAwC,IAAA,EAAM,IAAI,CAAC,IAAnD;gBAAyD,EAAA,EAAI,IAAI,CAAC,GAAlE;gBAAuE,KAAA,EAAO,eAAA,CAAgB,IAAhB,CAA9E;gBAAqG,OAAA,EAAQ;cAA7G;cACV,IAAG,QAAS,CAAA,QAAA,CAAT,IAAsB,QAAQ,CAAC,MAAO,CAAA,MAAM,CAAC,QAAP,CAAA,CAAA,CAAzC;gBACE,YAAA,GAAe,QAAQ,CAAC,MAAO,CAAA,MAAM,CAAC,QAAP,CAAA,CAAA;gBAC/B,OAAA,GAAU,CAAC,CAAC,MAAF,CAAS,OAAT,EAAiB,YAAjB,EAFZ;;cAGA,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAA/C,CAAmD,OAAnD;cACA,eAAe,CAAC,IAAhB,CAAqB,OAAO,CAAC,EAA7B;YANF;mBAOA,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B;cAAC,KAAA,EAAO,eAAR;cAAyB,KAAA,EAAO;YAAhC,CAA/B,EAAgF;cAAC,aAAA,EAAe,IAAhB;cAAsB,cAAA,EAAgB;YAAtC,CAAhF,EA7BF;WAHF;;MAJ+B;MAqCjC,OAAA,GACE;QAAA,SAAA,EAAW,IAAI,CAAC,GAAL,CAAA,CAAX;QACA,EAAA,EAAG,MADH;QAEA,SAAA,EAAU,EAFV;QAGA,IAAA,EAAK;UAAC,OAAA,EAAS,MAAV;UAAkB,QAAA,EAAU;YAAC,QAAA,EAAU;UAAX,CAA5B;UAAkD,QAAA,EAAU;QAA5D;MAHL;MAIF,SAAA,GAAY,IAAI,CAAC,GAAL,CAAA;aACZ,MAAM,CAAC,aAAa,CAAC,IAArB,CAA0B,IAAI,CAAC,SAAL,CAAe,OAAf,CAA1B,EA5CF;KAAA,MAAA;aA8CE,MAAM,CAAC,IAAP,CAAY,WAAZ,EAAyB,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAzB,EAAgD,OAAO,CAAC,GAAR,CAAY,WAAZ,CAAhD,EAA0E,OAAO,CAAC,GAAR,CAAY,kBAAZ,CAA1E,EAA2G,OAAO,CAAC,GAAR,CAAY,WAAZ,CAA3G,EAAoI,sCAApI,EAA4K,MAA5K,EAAoL;QAAC,QAAA,EAAU;MAAX,CAApL,EAA0M,QAAA,CAAC,KAAD,EAAO,MAAP,CAAA;AACxM,YAAA,IAAA,EAAA,eAAA,EAAA,IAAA,EAAA,OAAA,EAAA,OAAA,EAAA,IAAA,EAAA,eAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA;QAAA,IAAG,MAAM,CAAC,OAAP,KAAkB,IAArB;UACE,IAAA,GAAO,MAAM,CAAC,OAAQ,CAAA,CAAA;UACtB,IAAA,GAAO,MAAM,CAAC,OAAQ,CAAA,CAAA;UACtB,eAAA,GAAkB;UAClB,eAAA,GAAkB;UAClB,KAAA,cAAA;;YACE,OAAA,GAAU;cAAC,EAAA,EAAI,MAAA,CAAO,IAAI,CAAC,EAAZ,CAAL;cAAqB,KAAA,EAAO,cAAA,CAAe,IAAf,EAAoB,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAApB,CAA5B;cAAiF,cAAA,EAAgB,IAAjG;cAAuG,cAAA,EAAgB,IAAvH;cAA6H,KAAA,EAAO,eAAA,CAAgB,IAAhB,CAApI;cAA2J,OAAA,EAAQ;YAAnK;YACV,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAA/C,CAAmD,OAAnD;YACA,MAAA,GAAS,CAAC,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B,CAAC,MAAD,CAA/B,CAAD,CAA2C,CAAA,MAAA;YACpD,MAAM,CAAC,UAAU,CAAC,QAAlB,CAA2B,OAAO,CAAC,EAAnC,EAAsC,MAAM,CAAC,CAAP,GAAW,EAAjD,EAAoD,MAAM,CAAC,CAAP,GAAW,EAA/D;YACA,eAAe,CAAC,IAAhB,CAAqB,OAAO,CAAC,EAA7B;UALF;UAMA,KAAA,cAAA;;YACE,OAAA,GAAU;cAAC,EAAA,EAAI,MAAA,CAAO,IAAI,CAAC,EAAZ,CAAL;cAAqB,KAAA,EAAO,IAAI,CAAC,KAAjC;cAAwC,IAAA,EAAM,IAAI,CAAC,IAAnD;cAAyD,EAAA,EAAI,IAAI,CAAC,GAAlE;cAAuE,KAAA,EAAO,eAAA,CAAgB,IAAhB,CAA9E;cAAqG,OAAA,EAAQ;YAA7G;YACV,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAA/C,CAAmD,OAAnD;YACA,eAAe,CAAC,IAAhB,CAAqB,OAAO,CAAC,EAA7B;UAHF;iBAIA,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B;YAAC,KAAA,EAAO,eAAR;YAAyB,KAAA,EAAO;UAAhC,CAA/B,EAAgF;YAAC,aAAA,EAAe,IAAhB;YAAsB,cAAA,EAAgB;UAAtC,CAAhF,EAfF;SAAA,MAAA;iBAiBE,KAAA,CAAM,8CAAA,GAA+C,MAArD,EAjBF;;MADwM,CAA1M,EA9CF;;EApD4B;;EA2H9B,aAAA,GAAgB,QAAA,CAAC,UAAD,CAAA;AACd,QAAA,QAAA,EAAA,OAAA,EAAA,MAAA,EAAA;IAAA,QAAA,GAAW;MAAC,SAAA,EAAW,UAAU,CAAC,KAAvB;MAA8B,SAAA,EAAW,UAAU,CAAC;IAApD;IACX,MAAA,GAAS,oFAAA,GAAqF,KAD9F;;;;IAKA,MAAA,GAAS,MAAA,GAAS,wBAAT,GAAkC;IAC3C,MAAA,GAAS,MAAA,GAAS,YAAT,GAAsB;IAC/B,MAAA,GAAS,MAAA,GAAS,gBAAT,GAA0B;IACnC,MAAA,GAAS,MAAA,GAAS,sBAAT,GAAgC;IACzC,MAAA,GAAS,MAAA,GAAS,6BAAT,GAAuC;IAChD,MAAA,GAAS,MAAA,GAAS,6CAAT,GAAuD;IAChE,MAAA,GAAS,MAAA,GAAS,sCAAT,GAAgD;IACzD,MAAA,GAAS,MAAA,GAAS,qCAAT,GAA+C;IACxD,MAAA,GAAS,MAAA,GAAS,mDAAT,GAA6D;IACtE,MAAA,GAAS,MAAA,GAAS,sEAAT,GAAgF;IACzF,MAAA,GAAS,MAAA,GAAS,IAAT,GAAc;IACvB,MAAA,GAAS,MAAA,GAAS,eAAT,GAAyB;IAClC,MAAA,GAAS,MAAA,GAAS,gBAAT,GAA0B;IACnC,MAAA,GAAS,MAAA,GAAS,sBAAT,GAAgC;IACzC,MAAA,GAAS,MAAA,GAAS,6BAAT,GAAuC;IAChD,MAAA,GAAS,MAAA,GAAS,wGAAT,GAAkH;IAC3H,MAAA,GAAS,MAAA,GAAS,mGAAT,GAA6G;IACtH,MAAA,GAAS,MAAA,GAAS,mEAAT,GAA6E;IACtF,MAAA,GAAS,MAAA,GAAS,qCAAT,GAA+C;IACxD,MAAA,GAAS,MAAA,GAAS,oDAAT,GAA8D;IACvE,MAAA,GAAS,MAAA,GAAS,oEAAT,GAA8E;IACvF,MAAA,GAAS,MAAA,GAAS,IAAT,GAAc;IACvB,MAAA,GAAS,MAAA,GAAS,mBAAT,GAA6B;IACtC,MAAA,GAAS,MAAA,GAAS,qBAAT,GAA+B;IACxC,IAAI,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAJ;MACE,MAAM,CAAC,aAAa,CAAC,SAArB,GAAiC,QAAA,CAAC,GAAD,CAAA;AAC/B,YAAA,IAAA,EAAA,IAAA,EAAA,eAAA,EAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,OAAA,EAAA,IAAA,EAAA,eAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA;QAAA,OAAA,GAAU,IAAI,CAAC,GAAL,CAAA;QACV,IAAA,GAAO,GAAG,CAAC;QACX,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,IAAX;QACP,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,IAAoB,GAAvB;iBACE,KAAA,CAAM,sCAAA,GAAuC,IAAI,CAAC,MAAM,CAAC,OAAzD,EADF;SAAA,MAAA;UAGE,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,KAAoB,GAAvB;mBACE,OAAA,GAAU,GADZ;WAAA,MAAA;YAGE,OAAA,GAAU,IAAI,CAAC,MAAM,CAAC;YACtB,IAAA,GAAO,OAAQ,CAAA,CAAA;YACf,IAAA,GAAO,OAAQ,CAAA,CAAA;YACf,eAAA,GAAkB;YAClB,eAAA,GAAkB;YAClB,KAAA,cAAA;;cACE,OAAA,GAAU;gBAAC,EAAA,EAAI,MAAA,CAAO,IAAI,CAAC,EAAZ,CAAL;gBAAqB,KAAA,EAAO,cAAA,CAAe,IAAf,EAAoB,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAApB,CAA5B;gBAAiF,cAAA,EAAgB,IAAjG;gBAAuG,cAAA,EAAgB,IAAvH;gBAA6H,KAAA,EAAO,eAAA,CAAgB,IAAhB,CAApI;gBAA2J,OAAA,EAAQ;cAAnK;cACV,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAA/C,CAAmD,OAAnD;cACA,MAAA,GAAS,CAAC,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B,CAAC,MAAD,CAA/B,CAAD,CAA2C,CAAA,MAAA;cACpD,MAAM,CAAC,UAAU,CAAC,QAAlB,CAA2B,OAAO,CAAC,EAAnC,EAAsC,MAAM,CAAC,CAAP,GAAW,EAAjD,EAAoD,MAAM,CAAC,CAAP,GAAW,EAA/D;cACA,eAAe,CAAC,IAAhB,CAAqB,OAAO,CAAC,EAA7B;YALF;YAMA,KAAA,cAAA;;cACE,OAAA,GAAU;gBAAC,EAAA,EAAI,MAAA,CAAO,IAAI,CAAC,EAAZ,CAAL;gBAAqB,KAAA,EAAO,IAAI,CAAC,KAAjC;gBAAwC,IAAA,EAAM,IAAI,CAAC,IAAnD;gBAAyD,EAAA,EAAI,IAAI,CAAC,GAAlE;gBAAuE,KAAA,EAAO,eAAA,CAAgB,IAAhB,CAA9E;gBAAqG,OAAA,EAAQ;cAA7G;cACV,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAA/C,CAAmD,OAAnD;cACA,eAAe,CAAC,IAAhB,CAAqB,OAAO,CAAC,EAA7B;YAHF;mBAIA,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B;cAAC,KAAA,EAAO,eAAR;cAAyB,KAAA,EAAO;YAAhC,CAA/B,EAAgF;cAAC,aAAA,EAAe,IAAhB;cAAsB,cAAA,EAAgB;YAAtC,CAAhF,EAlBF;WAHF;;MAJ+B;MA0BjC,OAAA,GACE;QAAA,SAAA,EAAW,IAAI,CAAC,GAAL,CAAA,CAAX;QACA,EAAA,EAAG,MADH;QAEA,SAAA,EAAU,EAFV;QAGA,IAAA,EAAK;UAAC,OAAA,EAAS,MAAV;UAAkB,QAAA,EAAU,QAA5B;UAAsC,QAAA,EAAU;QAAhD;MAHL;MAIF,SAAA,GAAY,IAAI,CAAC,GAAL,CAAA;aACZ,MAAM,CAAC,aAAa,CAAC,IAArB,CAA0B,IAAI,CAAC,SAAL,CAAe,OAAf,CAA1B,EAjCF;KAAA,MAAA;aAmCE,MAAM,CAAC,IAAP,CAAY,WAAZ,EAAyB,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAzB,EAAgD,OAAO,CAAC,GAAR,CAAY,WAAZ,CAAhD,EAA0E,OAAO,CAAC,GAAR,CAAY,kBAAZ,CAA1E,EAA2G,OAAO,CAAC,GAAR,CAAY,WAAZ,CAA3G,EAAoI,iBAApI,EAAuJ,MAAvJ,EAA+J,QAA/J,EAAyK,QAAA,CAAC,KAAD,EAAO,MAAP,CAAA;AACvK,YAAA,IAAA,EAAA,eAAA,EAAA,IAAA,EAAA,OAAA,EAAA,OAAA,EAAA,IAAA,EAAA,eAAA,EAAA,MAAA,EAAA,MAAA,EAAA,MAAA,EAAA;QAAA,IAAG,MAAM,CAAC,OAAP,KAAkB,IAArB;UACE,IAAA,GAAO,MAAM,CAAC,OAAQ,CAAA,CAAA;UACtB,IAAA,GAAO,MAAM,CAAC,OAAQ,CAAA,CAAA;UACtB,eAAA,GAAkB;UAClB,eAAA,GAAkB;UAClB,KAAA,cAAA;;YACE,OAAA,GAAU;cAAC,EAAA,EAAI,MAAA,CAAO,IAAI,CAAC,EAAZ,CAAL;cAAqB,KAAA,EAAO,cAAA,CAAe,IAAf,EAAoB,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAApB,CAA5B;cAAiF,cAAA,EAAgB,IAAjG;cAAuG,cAAA,EAAgB,IAAvH;cAA6H,KAAA,EAAO,eAAA,CAAgB,IAAhB,CAApI;cAA2J,OAAA,EAAQ;YAAnK;YACV,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAA/C,CAAmD,OAAnD;YACA,MAAA,GAAS,CAAC,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B,CAAC,MAAD,CAA/B,CAAD,CAA2C,CAAA,MAAA;YACpD,MAAM,CAAC,UAAU,CAAC,QAAlB,CAA2B,OAAO,CAAC,EAAnC,EAAsC,MAAM,CAAC,CAAP,GAAW,EAAjD,EAAoD,MAAM,CAAC,CAAP,GAAW,EAA/D;YACA,eAAe,CAAC,IAAhB,CAAqB,OAAO,CAAC,EAA7B;UALF;UAMA,KAAA,cAAA;;YACE,OAAA,GAAU;cAAC,EAAA,EAAI,MAAA,CAAO,IAAI,CAAC,EAAZ,CAAL;cAAqB,KAAA,EAAO,IAAI,CAAC,KAAjC;cAAwC,IAAA,EAAM,IAAI,CAAC,IAAnD;cAAyD,EAAA,EAAI,IAAI,CAAC,GAAlE;cAAuE,KAAA,EAAO,eAAA,CAAgB,IAAhB,CAA9E;cAAqG,OAAA,EAAQ;YAA7G;YACV,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAA/C,CAAmD,OAAnD;YACA,eAAe,CAAC,IAAhB,CAAqB,OAAO,CAAC,EAA7B;UAHF;iBAIA,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B;YAAC,KAAA,EAAO,eAAR;YAAyB,KAAA,EAAO;UAAhC,CAA/B,EAAgF;YAAC,aAAA,EAAe,IAAhB;YAAsB,cAAA,EAAgB;UAAtC,CAAhF,EAfF;SAAA,MAAA;iBAiBE,KAAA,CAAM,8CAAA,GAA+C,MAArD,EAjBF;;MADuK,CAAzK,EAnCF;;EA9Bc;;EAsFhB,cAAA,GAAiB,QAAA,CAAC,QAAD,EAAW,QAAX,CAAA;AAEf,QAAA,CAAA,EAAA,KAAA,EAAA,iBAAA,EAAA,MAAA,EAAA,GAAA,EAAA,UAAA;;IAAA,MAAA,GAAS,OAAO,CAAC,GAAR,CAAY,cAAZ;IACT,iBAAA,GAAoB;IACpB,UAAA,GAAa;IACb,iBAAA,GAAoB,iBAAA,GAAoB;IACxC,KAAA,wCAAA;;MACI,CAAA,QAAA,CAAC,KAAD,CAAA;QACA,UAAA,GAAa,UAAA,GAAW,KAAX,GAAiB;eAC9B,iBAAA,GAAoB,iBAAA,GAAoB;MAFxC,CAAA,CAAF,CAAG,KAAH;IADF;IAIA,iBAAA,GAAoB,iBAAA,GAAoB;IACxC,OAAO,CAAC,MAAR,CAAe,8DAAA,GAA+D,iBAA/D,GAAiF,4EAAhG,EAA8K,QAAA,CAAC,MAAD,CAAA;AAC5K,UAAA,OAAA,EAAA,MAAA,EAAA;MAAA,KAAA,GAAQ;MACR,IAAG,KAAA,KAAS,IAAT,IAAiB,KAAA,KAAS,EAA7B;;QAEE,QAAA,CAAS,IAAT;AACA,eAHF;;MAIA,MAAA,GAAS,eAAA,GAAgB,QAAQ,CAAC,IAAzB,GAA8B;MACvC,MAAA,GAAS,MAAA,GAAS,aAAT,GAAuB,QAAQ,CAAC,EAAhC,GAAmC;MAC5C,MAAA,GAAS,MAAA,GAAS,kBAAT,GAA4B,KAA5B,GAAkC;MAC3C,IAAI,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAJ;QACE,MAAM,CAAC,aAAa,CAAC,SAArB,GAAiC,QAAA,CAAC,GAAD,CAAA;AAC/B,cAAA,IAAA,EAAA,CAAA,EAAA,OAAA,EAAA,IAAA,EAAA;UAAA,OAAA,GAAU,IAAI,CAAC,GAAL,CAAA;UACV,IAAA,GAAO,GAAG,CAAC;UACX,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,IAAX;UACP,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,IAAoB,GAAvB;mBACE,KAAA,CAAM,sCAAA,GAAuC,IAAI,CAAC,MAAM,CAAC,OAAzD,EADF;WAAA,MAAA;YAGE,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,KAAoB,GAAvB;cACE,OAAA,GAAU;cACV,QAAA,GAAW,GAFb;aAAA,MAAA;cAIE,OAAA,GAAU,IAAI,CAAC,MAAM,CAAC;cACtB,CAAA,GAAI,OAAQ,CAAA,CAAA;cACZ,QAAQ,CAAC,EAAT,GAAc,MAAA,CAAO,CAAC,CAAC,EAAT;cACd,QAAQ,CAAC,IAAT,GAAgB,MAAA,CAAO,CAAC,CAAC,IAAT;cAChB,QAAQ,CAAC,EAAT,GAAc,MAAA,CAAO,CAAC,CAAC,GAAT;cACd,QAAQ,CAAC,KAAT,GAAiB,CAAC,CAAC;cACnB,QAAQ,CAAC,KAAT,GAAiB,eAAA,CAAgB,CAAhB;cACjB,QAAQ,CAAC,OAAT,GAAmB,EAXrB;;YAYA,YAAA,CAAA;mBACA,QAAA,CAAS,QAAT,EAhBF;;QAJ+B;QAsBjC,OAAA,GACE;UAAA,SAAA,EAAW,IAAI,CAAC,GAAL,CAAA,CAAX;UACA,EAAA,EAAG,MADH;UAEA,SAAA,EAAU,EAFV;UAGA,IAAA,EAAK;YAAC,OAAA,EAAS,MAAV;YAAkB,QAAA,EAAU,CAAA,CAA5B;YAAgC,QAAA,EAAU;UAA1C;QAHL;QAIF,SAAA,GAAY,IAAI,CAAC,GAAL,CAAA;eACZ,MAAM,CAAC,aAAa,CAAC,IAArB,CAA0B,IAAI,CAAC,SAAL,CAAe,OAAf,CAA1B,EA7BF;OAAA,MAAA;eA+BE,MAAM,CAAC,IAAP,CAAY,WAAZ,EAAyB,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAzB,EAAgD,OAAO,CAAC,GAAR,CAAY,WAAZ,CAAhD,EAA0E,OAAO,CAAC,GAAR,CAAY,kBAAZ,CAA1E,EAA2G,OAAO,CAAC,GAAR,CAAY,WAAZ,CAA3G,EAAoI,2BAApI,EAAiK,MAAjK,EAAyK,QAAA,CAAC,KAAD,EAAO,MAAP,CAAA;AACvK,cAAA;UAAA,IAAG,MAAM,CAAC,OAAP,KAAkB,IAArB;YACE,CAAA,GAAI,MAAM,CAAC,OAAQ,CAAA,CAAA;YACnB,QAAQ,CAAC,EAAT,GAAc,MAAA,CAAO,CAAC,CAAC,EAAT;YACd,QAAQ,CAAC,IAAT,GAAgB,MAAA,CAAO,CAAC,CAAC,IAAT;YAChB,QAAQ,CAAC,EAAT,GAAc,MAAA,CAAO,CAAC,CAAC,GAAT;YACd,QAAQ,CAAC,KAAT,GAAiB,CAAC,CAAC;YACnB,QAAQ,CAAC,KAAT,GAAiB,eAAA,CAAgB,CAAhB;YACjB,QAAQ,CAAC,OAAT,GAAmB;YACnB,YAAA,CAAA;mBACA,QAAA,CAAS,QAAT,EATF;WAAA,MAAA;mBAWE,KAAA,CAAM,uCAAN,EAXF;;QADuK,CAAzK,EA/BF;;IAT4K,CAA9K,EATA;;WAgEA,YAAA,CAAA;EAlEe;;EAoEjB,cAAA,GAAiB,QAAA,CAAC,UAAD,EAAY,QAAZ,CAAA;AAEf,QAAA,QAAA,EAAA,OAAA,EAAA,OAAA,EAAA,OAAA,EAAA,MAAA,EAAA,SAAA;;IAAA,OAAA,GAAU,UAAU,CAAC;IACrB,OAAA,GAAU,UAAU,CAAC;IACrB,MAAA,GAAS;IACT,QAAA,GAAW;MAAC,OAAA,EAAS,OAAV;MAAmB,OAAA,EAAQ;IAA3B;IACX,IAAI,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAJ;MACE,MAAM,CAAC,aAAa,CAAC,SAArB,GAAiC,QAAA,CAAC,GAAD,CAAA;AAC/B,YAAA,IAAA,EAAA,OAAA,EAAA;QAAA,OAAA,GAAU,IAAI,CAAC,GAAL,CAAA;QACV,IAAA,GAAO,GAAG,CAAC;QACX,IAAA,GAAO,IAAI,CAAC,KAAL,CAAW,IAAX;QACP,IAAG,IAAI,CAAC,MAAM,CAAC,IAAZ,IAAoB,GAAvB;iBACE,KAAA,CAAM,sCAAA,GAAuC,IAAI,CAAC,MAAM,CAAC,OAAzD,EADF;SAAA,MAAA;iBAGE,QAAA,CAAS,UAAT,EAHF;;MAJ+B;MAQjC,OAAA,GACE;QAAA,SAAA,EAAW,IAAI,CAAC,GAAL,CAAA,CAAX;QACA,EAAA,EAAG,MADH;QAEA,SAAA,EAAU,EAFV;QAGA,IAAA,EAAK;UAAC,OAAA,EAAS,MAAV;UAAkB,QAAA,EAAU;YAAC,OAAA,EAAS,OAAV;YAAmB,OAAA,EAAS;UAA5B,CAA5B;UAAkE,QAAA,EAAU;QAA5E;MAHL;MAIF,SAAA,GAAY,IAAI,CAAC,GAAL,CAAA;aACZ,MAAM,CAAC,aAAa,CAAC,IAArB,CAA0B,IAAI,CAAC,SAAL,CAAe,OAAf,CAA1B,EAfF;KAAA,MAAA;aAiBE,MAAM,CAAC,IAAP,CAAY,WAAZ,EAAyB,OAAO,CAAC,GAAR,CAAY,QAAZ,CAAzB,EAAgD,OAAO,CAAC,GAAR,CAAY,WAAZ,CAAhD,EAA0E,OAAO,CAAC,GAAR,CAAY,kBAAZ,CAA1E,EAA2G,OAAO,CAAC,GAAR,CAAY,WAAZ,CAA3G,EAAoI,2BAApI,EAAiK,MAAjK,EAAyK,QAAzK,EAAmL,QAAA,CAAC,KAAD,EAAO,MAAP,CAAA;QACjL,IAAG,MAAM,CAAC,OAAP,KAAkB,IAArB;iBACE,QAAA,CAAS,UAAT,EADF;SAAA,MAAA;iBAGE,KAAA,CAAM,uCAAN,EAHF;;MADiL,CAAnL,EAjBF;;EANe;;EA6BjB,wBAAA,GAA2B,QAAA,CAAC,OAAD,CAAA;AAEzB,QAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA;;IAAA,KAAA,GAAQ,CAAA;IACR,IAAG,OAAQ,CAAA,YAAA,CAAR,KAAyB,MAA5B;AACE;MAAA,KAAA,qCAAA;;QACE,IAAG,OAAO,CAAC,IAAR,KAAgB,QAAnB;UACE,KAAM,CAAA,GAAA,CAAN,GAAa,OAAO,CAAC,UAAW,CAAA,GAAA,CAAK,CAAA,CAAA,CAAE,CAAC,MAD1C;SAAA,MAAA;UAGE,KAAM,CAAA,GAAA,CAAN,GAAa,OAAO,CAAC,UAAW,CAAA,GAAA,EAHlC;;MADF,CADF;;AAMA,WAAO;EATkB;;EAW3B,cAAA,GAAiB,QAAA,CAAC,MAAD,EAAS,WAAT,CAAA;AACf,QAAA,GAAA,EAAA,WAAA,EAAA,EAAA,EAAA;IAAA,IAAG,WAAA,KAAe,MAAlB;MACE,GAAA,GAAM,OADR;KAAA,MAAA;MAGE,GAAA,GAAM,YAHR;;IAIA,IAAG,OAAO,CAAC,GAAR,CAAY,gBAAZ,CAAH;MACE,WAAA,GAAc,MAAM,CAAC,MADvB;KAAA,MAAA;MAGE,WAAA,GAAc,GAHhB;;IAIA,MAAA,GAAS;IACT,IAAI,MAAO,CAAA,GAAA,CAAP,KAAe,MAAnB;MACE,IAAG,MAAM,CAAC,UAAW,CAAA,GAAA,CAAlB,KAA0B,MAA7B;QACE,MAAA,GAAS,GAAA,GAAI,IAAJ,GAAS,MAAM,CAAC,UAAW,CAAA,GAAA,CAAK,CAAA,CAAA,CAAE,CAAC,MAD9C;OAAA,MAAA;QAGE,MAAA,GAAS;QACT,EAAA,GAAK,GAJP;OADF;KAAA,MAAA;MAOE,MAAA,GAAS,GAAA,GAAI,IAAJ,GAAS,MAAO,CAAA,GAAA,EAP3B;;IAQA,IAAG,MAAA,KAAU,EAAb;MACE,EAAA,GAAK,KADP;KAAA,MAAA;MAGE,EAAA,GAAK,GAHP;;AAKA,WAAO,WAAA,GAAY,EAAZ,GAAe;EAvBP;;EA2BjB,cAAA,GAAiB,QAAA,CAAC,KAAD,CAAA;AAGf,QAAA,OAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,CAAA;;;IAAA,OAAA,GAAU,CAAC,IAAD,EAAM,OAAN;IACV,KAAA,uCAAA;;AACkB;MAAA,KAAA,uCAAA;;QAAhB,OAAO,CAAC,IAAR,CAAa,CAAb;MAAgB;IADlB;AAEA,WAAO,CAAC,CAAC,IAAF,CAAO,OAAP;EANQ;;EASjB,MAAM,CAAC,gBAAP,GAA0B,QAAA,CAAA,CAAA;AACxB,QAAA,IAAA,EAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA;IAAA,IAAA,GAAO,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC;AACtC;AAAA;IAAA,KAAA,qCAAA;;MACE,OAAO,CAAC,GAAR,CAAY,IAAZ;MACA,IAAG,IAAI,CAAC,KAAL,KAAc,MAAjB;QACE,IAAI,CAAC,KAAL,GAAa,CAAA,EADf;;MAEA,IAAI,CAAC,KAAL,GAAa,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;MAC9B,IAAI,CAAC,KAAK,CAAC,SAAX,GAAuB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;MACxC,IAAI,CAAC,KAAK,CAAC,KAAX,GAAmB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;MACpC,IAAI,CAAC,KAAK,CAAC,OAAX,GAAqB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;MACtC,IAAI,CAAC,KAAK,CAAC,OAAX,GAAqB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC;oBACtC,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAA/C,CAAsD,CAAC,IAAD,CAAtD,EAA8D,EAA9D;IATF,CAAA;;EAFwB;;EAe1B,MAAM,CAAC,WAAP,GAAsB,QAAA,CAAA,CAAA;IACpB,OAAO,CAAC,GAAR,CAAY,sBAAZ,EAAmC,cAAnC,EAAA;;WAEA,OAAO,CAAC,GAAR,CAAY,iBAAZ,EAA+B,MAAA,CAAA,CAAQ,CAAC,MAAT,CAAA,CAA/B;EAHoB,EAp2CtB;;;;;EA62CA,MAAM,CAAC,QAAP,GAAkB,QAAA,CAAA,CAAA;AAChB,QAAA,MAAA,EAAA,MAAA,EAAA,SAAA,EAAA,GAAA,EAAA,IAAA,EAAA,cAAA,EAAA,IAAA,EAAA,uBAAA,EAAA,aAAA,EAAA,OAAA,EAAA,IAAA,EAAA,qBAAA,EAAA,kBAAA,EAAA,WAAA,EAAA,WAAA,EAAA,wBAAA,EAAA,gBAAA,EAAA;IAAA,IAAI,CAAC,IAAL,CAAU,cAAV,CAAyB,CAAC;IAC1B,SAAA,GAAY,QAAQ,CAAC,cAAT,CAAwB,WAAxB;IACZ,MAAA,GAAS,QAAQ,CAAC,cAAT,CAAwB,YAAxB;IACT,CAAA,CAAE,MAAF,CAAS,CAAC,IAAV,CAAA;IACA,UAAA,GAAa,OAAO,CAAC,GAAR,CAAY,YAAZ;IACb,cAAA,GACE;MAAA,WAAA,EACE;QAAA,KAAA,EAAO,IAAP;QACA,iBAAA,EAAmB,IADnB;QAEA,WAAA,EAAa,IAFb;QAGA,QAAA,EAAU,IAHV;QAIA,oBAAA,EAAsB;MAJtB,CADF;MAMA,YAAA,EACE;QAAA,OAAA,EAAS,QAAA,CAAC,QAAD,EAAU,QAAV,CAAA;iBACP,cAAA,CAAe,QAAf,EAAwB,QAAxB;QADO,CAAT;QAEA,OAAA,EAAS,QAAA,CAAC,QAAD,EAAU,QAAV,CAAA;iBACP,cAAA,CAAe,QAAf,EAAwB,QAAxB;QADO,CAFT;QAIA,UAAA,EAAY,QAAA,CAAC,UAAD,EAAa,QAAb,CAAA;iBACV,cAAA,CAAe,UAAf,EAA0B,QAA1B;QADU,CAJZ;QAMA,UAAA,EAAY,QAAA,CAAC,UAAD,EAAa,QAAb,CAAA;iBACV,cAAA,CAAe,UAAf,EAA0B,QAA1B;QADU,CANZ;QAQA,QAAA,EAAU,QAAA,CAAC,IAAD,EAAM,QAAN,CAAA;UACR,MAAM,CAAC,mBAAP,CAA2B,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAA/C,CAAmD,IAAI,CAAC,EAAxD,CAA3B,EAAwF,QAAxF;iBACA,QAAA,CAAA;QAFQ,CARV;QAWA,QAAA,EAAU;MAXV,CAPF;MAmBA,SAAA,EACE;QAAA,OAAA,EAAS,IAAT;QACA,SAAA,EAAW,MADX;QAEA,UAAA,EAAY;MAFZ,CApBF;MAuBA,OAAA,EAAS,IAvBT;MAwBA,KAAA,EACE;QAAA,KAAA,EAAO,KAAP;QACA,kBAAA,EAAoB,IADpB;QAEA,IAAA,EACE;UAAA,IAAA,EAAM;QAAN,CAHF;QAIA,MAAA,EAAQ,KAJR;QAKA,WAAA,EAAa,CALb;QAMA,KAAA,EACE;UAAA,KAAA,EACE;YAAA,MAAA,EAAQ,SAAR;YACA,UAAA,EAAY;UADZ,CADF;UAGA,SAAA,EACE;YAAA,MAAA,EAAQ,SAAR;YACA,UAAA,EAAY;UADZ;QAJF;MAPF,CAzBF;MAsCA,KAAA,EACE;QAAA,MAAA,EAAQ,KAAR;QACA,MAAA,EACE;UAAA,EAAA,EACE;YAAA,OAAA,EAAS,IAAT;YACA,WAAA,EAAa;UADb;QADF,CAFF;QAKA,KAAA,EACE;UAAA,SAAA,EAAU,SAAV;UACA,KAAA,EAAM;QADN;MANF;IAvCF;IA+CF,IAAG,UAAA,KAAc,MAAjB;MACE,OAAA,GAAU,eADZ;KAAA,MAAA;MAGE,OAAA,GAAU,WAHZ;;IAIA,IAAA,GAAO;IACP,OAAO,CAAC,GAAR,CAAY,8BAAZ;IACA,MAAM,CAAC,UAAP,GAAoB,IAAI,GAAG,CAAC,OAAR,CAAgB,SAAhB,EAA2B,IAA3B,EAAiC,OAAjC;IAEpB,MAAM,CAAC,UAAU,CAAC,EAAlB,CAAqB,cAArB,EAAqC,QAAA,CAAC,MAAD,CAAA;AACnC,UAAA,CAAA,EAAA,KAAA,EAAA;MAAA,IAAG,CAAC,OAAO,CAAC,GAAR,CAAY,aAAZ,CAAD,CAAA,KAA+B,CAAlC;QACE,cAAA,GAAiB,MAAA,CAAA;QACjB,CAAA,GAAI,MAAM,CAAC,QAAP,CAAgB,IAAI,CAAC,KAAL,CAAW,CAAC,cAAA,GAAe,MAAA,CAAO,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAP,CAAhB,CAAA,GAAuD,IAAlE,CAAA,GAAwE,IAAxF;QACJ,OAAO,CAAC,GAAR,CAAY,mBAAZ,EAAiC,gBAAA,CAAiB,CAAjB,CAAjC;QACA,KAAA,GAAQ,OAAO,CAAC,GAAR,CAAY,aAAZ;QACR,IAAG,KAAK,CAAC,KAAK,CAAC,MAAZ,GAAqB,CAAxB;UACE,OAAO,CAAC,GAAR,CAAY,sBAAZ,EAAoC,WAAA,GAAY,KAAK,CAAC,KAAK,CAAC,MAAxB,GAA+B,KAA/B,GAAqC,KAAK,CAAC,KAAK,CAAC,MAAjD,GAAwD,GAA5F,EADF;SALF;;aAOA,OAAO,CAAC,GAAR,CAAY,aAAZ,EAA2B,CAAC,OAAO,CAAC,GAAR,CAAY,aAAZ,CAAD,CAAA,GAA4B,CAAvD;IARmC,CAArC;IAWA,MAAM,CAAC,UAAU,CAAC,EAAlB,CAAqB,aAArB,EAAoC,QAAA,CAAC,MAAD,CAAA,EAAA;AAClC,UAAA,OAAA,EAAA;MAAA,IAAG,MAAM,CAAC,KAAK,CAAC,MAAb,KAAuB,CAA1B;QACE,WAAA,GAAc;QACd,OAAA,GAAU,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAA/C,CAAmD,MAAM,CAAC,KAAM,CAAA,CAAA,CAAhE,EAFZ;OAAA,MAAA;QAIE,IAAG,MAAM,CAAC,KAAK,CAAC,MAAb,KAAuB,CAA1B;UACE,WAAA,GAAc;UACd,OAAA,GAAW,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAA/C,CAAmD,MAAM,CAAC,KAAM,CAAA,CAAA,CAAhE,EAFb;SAAA,MAAA;AAIE,iBAJF;SAJF;;aASA,MAAM,CAAC,mBAAP,CAA2B,OAA3B,EAAoC,WAApC;IAVkC,CAApC;IAYA,CAAA,CAAE,0BAAF,CAA6B,CAAC,KAA9B,CAAoC,QAAA,CAAA,CAAA;AAClC,UAAA;MAAA,MAAA,GAAS,MAAM,CAAC,UAAU,CAAC,YAAlB,CAAA;aACT,eAAA,CAAgB,MAAM,CAAC,KAAvB,EAA8B,MAAM,CAAC,KAArC;IAFkC,CAApC;IAIA,CAAA,CAAE,2BAAF,CAA8B,CAAC,KAA/B,CAAqC,QAAA,CAAA,CAAA;AACnC,UAAA;MAAA,MAAA,GAAS,MAAM,CAAC,UAAU,CAAC,YAAlB,CAAA;aACT,OAAO,CAAC,OAAR,CACE;QAAA,OAAA,EAAS,+BAAA,GAAgC,MAAM,CAAC,KAAK,CAAC,MAA7C,GAAoD,gBAApD,GAAqE,MAAM,CAAC,KAAK,CAAC,MAAlF,GAAyF,oBAAlG;QACA,OAAA,EAAS;UACP,OAAA,EAAS;YACP,KAAA,EAAO,kBADA;YAEP,SAAA,EAAW;UAFJ,CADF;UAKP,MAAA,EAAQ;YACN,KAAA,EAAO,2BADD;YAEN,SAAA,EAAW;UAFL;QALD,CADT;QAWA,QAAA,EAAU,QAAA,CAAC,MAAD,CAAA;UACR,IAAG,MAAH;mBACE,gBAAA,CAAiB,MAAM,CAAC,KAAxB,EAA+B,MAAM,CAAC,KAAtC,EADF;;QADQ;MAXV,CADF;IAFmC,CAArC;IAkBA,CAAA,CAAE,2BAAF,CAA8B,CAAC,KAA/B,CAAqC,QAAA,CAAA,CAAA;aACnC,gBAAA,CAAA;IADmC,CAArC;IAGA,CAAA,CAAE,4BAAF,CAA+B,CAAC,KAAhC,CAAsC,QAAA,CAAA,CAAA;aACpC,iBAAA,CAAA;IADoC,CAAtC;IAGA,CAAA,CAAE,yBAAF,CAA4B,CAAC,KAA7B,CAAmC,QAAA,CAAA,CAAA;aACjC,cAAA,CAAA;IADiC,CAAnC;IAGA,CAAA,CAAE,yBAAF,CAA4B,CAAC,KAA7B,CAAmC,QAAA,CAAA,CAAA;aACjC,cAAA,CAAA;IADiC,CAAnC;IAGA,CAAA,CAAE,oBAAF,CAAuB,CAAC,KAAxB,CAA8B,QAAA,CAAA,CAAA;aAC5B,SAAA,CAAA;IAD4B,CAA9B;IAGA,CAAA,CAAE,qBAAF,CAAwB,CAAC,KAAzB,CAA+B,QAAA,CAAA,CAAA;aAC7B,UAAA,CAAA;IAD6B,CAA/B;IAGA,CAAA,CAAE,2BAAF,CAA8B,CAAC,KAA/B,CAAqC,QAAA,CAAA,CAAA;aACnC,gBAAA,CAAA;IADmC,CAArC;IAGA,CAAA,CAAE,0BAAF,CAA6B,CAAC,KAA9B,CAAoC,QAAA,CAAA,CAAA;aAClC,eAAA,CAAA;IADkC,CAApC;IAEA,CAAA,CAAE,4BAAF,CAA+B,CAAC,KAAhC,CAAsC,QAAA,CAAA,CAAA;aACpC,iBAAA,CAAA;IADoC,CAAtC;IAEA,CAAA,CAAE,uBAAF,CAA0B,CAAC,KAA3B,CAAiC,QAAA,CAAA,CAAA;aAC/B,YAAA,CAAA;IAD+B,CAAjC;IAIA,CAAA,CAAE,0BAAF,CAA6B,CAAC,KAA9B,CAAoC,QAAA,CAAA,CAAA;aAClC,eAAA,CAAA;IADkC,CAApC;IAEA,CAAA,CAAE,4BAAF,CAA+B,CAAC,KAAhC,CAAsC,QAAA,CAAA,CAAA;aACpC,iBAAA,CAAA;IADoC,CAAtC;IAEA,CAAA,CAAE,uBAAF,CAA0B,CAAC,KAA3B,CAAiC,QAAA,CAAA,CAAA;aAC/B,YAAA,CAAA;IAD+B,CAAjC;IAGA,CAAA,CAAE,0BAAF,CAA6B,CAAC,KAA9B,CAAoC,QAAA,CAAA,CAAA;aAClC,eAAA,CAAA;IADkC,CAApC;IAEA,CAAA,CAAE,4BAAF,CAA+B,CAAC,KAAhC,CAAsC,QAAA,CAAA,CAAA;aACpC,iBAAA,CAAA;IADoC,CAAtC;IAEA,CAAA,CAAE,uBAAF,CAA0B,CAAC,KAA3B,CAAiC,QAAA,CAAA,CAAA;aAC/B,YAAA,CAAA;IAD+B,CAAjC;IAGA,CAAA,CAAE,0BAAF,CAA6B,CAAC,KAA9B,CAAoC,QAAA,CAAA,CAAA;aAClC,eAAA,CAAA;IADkC,CAApC;IAEA,CAAA,CAAE,4BAAF,CAA+B,CAAC,KAAhC,CAAsC,QAAA,CAAA,CAAA;aACpC,iBAAA,CAAA;IADoC,CAAtC;IAEA,CAAA,CAAE,uBAAF,CAA0B,CAAC,KAA3B,CAAiC,QAAA,CAAA,CAAA;aAC/B,YAAA,CAAA;IAD+B,CAAjC;IAGA,CAAA,CAAE,4BAAF,CAA+B,CAAC,KAAhC,CAAsC,QAAA,CAAA,CAAA;aACpC,iBAAA,CAAA;IADoC,CAAtC;IAGA,CAAA,CAAE,sBAAF,CAAyB,CAAC,KAA1B,CAAgC,QAAA,CAAA,CAAA;aAC9B,WAAA,CAAA;IAD8B,CAAhC;IAGA,CAAA,CAAE,wBAAF,CAA2B,CAAC,KAA5B,CAAkC,QAAA,CAAA,CAAA;aAChC,aAAA,CAAA;IADgC,CAAlC;IAGA,CAAA,CAAE,0BAAF,CAA6B,CAAC,KAA9B,CAAoC,QAAA,CAAA,CAAA;aAClC,eAAA,CAAA;IADkC,CAApC;IAGA,CAAA,CAAE,4CAAF,CAA+C,CAAC,KAAhD,CAAsD,QAAA,CAAA,CAAA;aACpD,iCAAA,CAAA;IADoD,CAAtD;IAGA,CAAA,CAAE,uCAAF,CAA0C,CAAC,KAA3C,CAAiD,QAAA,CAAA,CAAA;aAC/C,4BAAA,CAAA;IAD+C,CAAjD;IAGA,CAAA,CAAE,uCAAF,CAA0C,CAAC,KAA3C,CAAiD,QAAA,CAAA,CAAA;aAC/C,4BAAA,CAAA;IAD+C,CAAjD;IAGA,CAAA,CAAE,yBAAF,CAA4B,CAAC,KAA7B,CAAmC,QAAA,CAAA,CAAA;aACjC,cAAA,CAAA;IADiC,CAAnC;IAGA,CAAA,CAAE,4BAAF,CAA+B,CAAC,KAAhC,CAAsC,QAAA,CAAA,CAAA;aACpC,iBAAA,CAAA;IADoC,CAAtC;IAGA,MAAM,CAAC,mBAAP,GAA6B,QAAA,CAAC,OAAD,EAAU,WAAV,CAAA;AAC3B,UAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA;MAAA,EAAA,GAAK,OAAO,CAAC,OAAO,CAAC;MACrB,IAAA,GAAO,qBAAA,CAAsB,OAAtB,EAA+B,WAA/B;MACP,KAAA,GAAQ,WAAA,GAAc,IAAd,GAAqB;MAC7B,GAAA,GAAM,QAAQ,CAAC,aAAT,CAAuB,KAAvB;MACN,GAAG,CAAC,KAAJ,GAAY;MACZ,GAAG,CAAC,SAAJ,GAAgB;MAChB,CAAA,CAAE,cAAF,CAAiB,CAAC,MAAlB,CAAyB,GAAzB;MACA,CAAA,CAAE,GAAF,CAAM,CAAC,MAAP,CACE;QAAA,KAAA,EAAO,KAAP;QACA,SAAA,EAAW,IADX;QAEA,KAAA,EAAO,GAFP;QAGA,MAAA,EAAQ,MAHR;QAIA,WAAA,EAAa,QAAA,CAAE,KAAF,EAAS,EAAT,CAAA;iBACX,CAAA,CAAE,wBAAA,GAAyB,EAA3B,CAA8B,CAAC,MAA/B,CAAA;QADW;MAJb,CADF;MAQA,CAAA,CAAE,yBAAA,GAA0B,EAA5B,CAA+B,CAAC,KAAhC,CAAsC,QAAA,CAAA,CAAA;QACpC,CAAA,CAAE,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,UAAnD,CAA8D,CAAC,IAA/D,CAAA,CAAqE,CAAC,IAAtE,CAAA;eACA,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,MAAtC,CAAA;MAFoC,CAAtC;MAIA,CAAA,CAAE,uBAAA,GAAwB,EAA1B,CAA6B,CAAC,KAA9B,CAAoC,QAAA,CAAA,CAAA;AAClC,YAAA,GAAA,EAAA;QAAA,GAAA,GAAM,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,QAAS,CAAA,CAAA,CAAE,CAAC,SAAS,CAAC,KAA5D,CAAkE,CAAlE,EAAoE,CAAC,CAArE;QACN,KAAA,GAAQ,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,QAAS,CAAA,CAAA,CAAE,CAAC,QAAS,CAAA,CAAA,CAAE,CAAC;QACtE,OAAO,CAAC,GAAR,CAAY,gBAAZ,EAA6B;UAAC,GAAA,EAAK,GAAN;UAAU,KAAA,EAAO;QAAjB,CAA7B;eACA,OAAO,CAAC,GAAR,CAAY,SAAZ,EAAsB,GAAtB,EAA0B,KAA1B;MAJkC,CAApC;MAMA,CAAA,CAAE,wBAAA,GAAyB,EAA3B,CAA8B,CAAC,KAA/B,CAAqC,QAAA,CAAA,CAAA;AACnC,YAAA,cAAA,EAAA,gBAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,EAAA;QAAA,IAAA,GAAO,OAAO,CAAC,GAAR,CAAY,gBAAZ;QACP,IAAG,IAAH;UACE,GAAA,GAAM,IAAI,CAAC;UACX,KAAA,GAAQ,IAAI,CAAC;UACb,CAAA,CAAE,wBAAA,GAAyB,EAA3B,CAA8B,CAAC,IAA/B,CAAA,CAAqC,CAAC,IAAtC,CAAA;UACA,gBAAA,GAAmB,2HAAA,GAA4H,EAA5H,GAA+H;UAClJ,cAAA,GAAiB,sHAAA,GAAuH,EAAvH,GAA0H;UAC3I,EAAA,GAAK,UAAA,GAAW,GAAX,GAAe,wDAAf,GAAwE,EAAxE,GAA2E,SAA3E,GAAqF,GAArF,GAAyF,UAAzF,GAAoG,KAApG,GAA0G,gDAA1G,GAA2J,EAA3J,GAA8J,4CAA9J,GAA2M,EAA3M,GAA8M,WAA9M,GAA0N,WAA1N,GAAsO,UAAtO,GAAiP,GAAjP,GAAqP,IAArP,GAA0P,gBAA1P,GAA2Q,cAA3Q,GAA0R;UAC/R,CAAA,CAAE,wBAAA,GAAyB,EAA3B,CAA8B,CAAC,MAA/B,CAAsC,EAAtC;iBACA,CAAA,CAAE,yBAAA,GAA0B,EAA5B,CAA+B,CAAC,KAAhC,CAAsC,QAAA,CAAA,CAAA;YACpC,CAAA,CAAE,wBAAA,GAAyB,EAA3B,CAA8B,CAAC,IAA/B,CAAA,CAAqC,CAAC,IAAtC,CAAA;mBACA,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,MAAtC,CAAA;UAFoC,CAAtC,EARF;SAAA,MAAA;iBAYE,KAAA,CAAM,gDAAN,EAZF;;MAFmC,CAArC;MAgBA,CAAA,CAAE,cAAA,GAAe,EAAjB,CAAoB,CAAC,KAArB,CAA2B,QAAA,CAAA,CAAA;AACzB,YAAA,IAAA,EAAA;QAAA,IAAA,GAAO,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAA/C,CAAmD,EAAnD;QACP,IAAG,IAAH;iBACE,OAAO,CAAC,GAAR,CAAY,IAAZ,EADF;SAAA,MAAA;UAGE,IAAA,GAAO,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAA/C,CAAmD,EAAnD;iBACP,OAAO,CAAC,GAAR,CAAY,IAAZ,EAJF;;MAFyB,CAA3B;MAQA,CAAA,CAAE,eAAA,GAAgB,EAAlB,CAAqB,CAAC,KAAtB,CAA4B,QAAA,CAAA,CAAA;eAC1B,gBAAA,CAAiB,EAAjB;MAD0B,CAA5B;MAGA,CAAA,CAAE,aAAA,GAAc,EAAhB,CAAmB,CAAC,KAApB,CAA0B,QAAA,CAAA,CAAA;eACxB,aAAA,CAAc;UAAC,OAAA,EAAQ,EAAT;UAAa,OAAA,EAAQ,CAAC,EAAD;QAArB,CAAd;MADwB,CAA1B;aAGA,CAAA,CAAE,sBAAA,GAAuB,EAAzB,CAA4B,CAAC,KAA7B,CAAmC,QAAA,CAAA,CAAA;eACjC,OAAO,CAAC,MAAR,CACE;UAAA,KAAA,EAAO,mCAAP;UACA,OAAA,EAAS,qBAAA,GACP,0BADO,GAEP,iCAFO,GAGP,2BAHO,GAIP,+DAJO,GAKP,yBALO,GAMP,gBANO,GAMU,EANV,GAMa,sFANb,GAOP,SAPO,GAQP,iEARO,GASP,yBATO,GAUP,kBAVO,GAUY,EAVZ,GAUe,oFAVf,GAWP,SAXO,GAYP,wBAbF;UAcA,OAAA,EACE;YAAA,OAAA,EACE;cAAA,KAAA,EAAO,MAAP;cACA,SAAA,EAAW,aADX;cAEA,QAAA,EAAU,QAAA,CAAA,CAAA;AACR,oBAAA,cAAA,EAAA,gBAAA,EAAA,GAAA,EAAA,EAAA,EAAA;gBAAA,GAAA,GAAM,CAAA,CAAE,MAAA,GAAO,EAAP,GAAU,EAAZ,CAAe,CAAC,GAAhB,CAAA;gBACN,KAAA,GAAQ,CAAA,CAAE,QAAA,GAAS,EAAT,GAAY,EAAd,CAAiB,CAAC,GAAlB,CAAA;gBACR,IAAG,GAAA,KAAO,IAAP,GAAc,GAAA,KAAO,OAArB,GAA8B,GAAA,KAAO,MAAxC;yBACE,MAAM,CAAC,KAAP,CAAa,qCAAA,GAAsC,GAAnD,EADF;iBAAA,MAAA;kBAGE,CAAA,CAAE,wBAAA,GAAyB,EAA3B,CAA8B,CAAC,IAA/B,CAAA,CAAqC,CAAC,IAAtC,CAAA;kBACA,gBAAA,GAAmB,2HAAA,GAA4H,EAA5H,GAA+H;kBAClJ,cAAA,GAAiB,sHAAA,GAAuH,EAAvH,GAA0H;kBAC3I,EAAA,GAAK,UAAA,GAAW,GAAX,GAAe,wDAAf,GAAwE,EAAxE,GAA2E,SAA3E,GAAqF,GAArF,GAAyF,UAAzF,GAAoG,KAApG,GAA0G,gDAA1G,GAA2J,EAA3J,GAA8J,4CAA9J,GAA2M,EAA3M,GAA8M,WAA9M,GAA0N,WAA1N,GAAsO,UAAtO,GAAiP,GAAjP,GAAqP,IAArP,GAA0P,gBAA1P,GAA2Q,cAA3Q,GAA0R;kBAC/R,CAAA,CAAE,wBAAA,GAAyB,EAA3B,CAA8B,CAAC,MAA/B,CAAsC,EAAtC;yBACA,CAAA,CAAE,yBAAA,GAA0B,EAA5B,CAA+B,CAAC,KAAhC,CAAsC,QAAA,CAAA,CAAA;oBACpC,CAAA,CAAE,wBAAA,GAAyB,EAA3B,CAA8B,CAAC,IAA/B,CAAA,CAAqC,CAAC,IAAtC,CAAA;2BACA,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,UAAU,CAAC,MAAtC,CAAA;kBAFoC,CAAtC,EARF;;cAHQ;YAFV;UADF;QAfF,CADF;MADiC,CAAnC;IAxD2B;IA6F7B,CAAA,CAAE,oBAAF,CAAuB,CAAC,KAAxB,CAA8B,QAAA,CAAA,CAAA;aAC5B,MAAM,CAAC,UAAU,CAAC,GAAlB,CAAA;IAD4B,CAA9B,EApRA;;IAwRA,IAAA,GAAO,CAAA;IACP,IAAA,GAAO;IACP,MAAA,GAAS,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC;IACxC,GAAA,GAAM,MAAM,CAAC,UAAP,CAAkB,IAAlB;IACN,uBAAA,GAA0B,GAAG,CAAC,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,MAAM,CAAC,KAA9B,EAAqC,MAAM,CAAC,MAA5C;IAG1B,kBAAA,GAAqB,QAAA,CAAA,CAAA;MACnB,uBAAA,GAA0B,GAAG,CAAC,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,MAAM,CAAC,KAA9B,EAAqC,MAAM,CAAC,MAA5C;IADP;IAIrB,qBAAA,GAAwB,QAAA,CAAA,CAAA;MACtB,GAAG,CAAC,YAAJ,CAAiB,uBAAjB,EAA0C,CAA1C,EAA6C,CAA7C;IADsB;IAIxB,wBAAA,GAA2B,QAAA,CAAA,CAAA;AACzB,UAAA,QAAA,EAAA,OAAA,EAAA,CAAA,EAAA,YAAA,EAAA,MAAA,EAAA,gBAAA,EAAA,MAAA,EAAA;MAAA,gBAAA,GAAmB,OAAO,CAAC,GAAR,CAAY,eAAZ;MACnB,MAAA,GAAS,aAAA,CAAc,IAAI,CAAC,MAAnB,EAA2B,IAAI,CAAC,CAAhC;MACT,MAAA,GAAS,aAAA,CAAc,IAAI,CAAC,MAAnB,EAA2B,IAAI,CAAC,CAAhC;MACT,QAAA,GAAW,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAA/C,CAAA;MACX,CAAA,GAAI;AACJ,aAAM,CAAA,GAAI,QAAQ,CAAC,MAAnB;QACE,OAAA,GAAU,QAAS,CAAA,CAAA;QACnB,YAAA,GAAe,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B,CAAE,OAAO,CAAC,EAAV,CAA/B;QACf,MAAA,GAAS,MAAM,CAAC,UAAU,CAAC,WAAlB,CACP;UAAA,CAAA,EAAG,YAAa,CAAA,OAAO,CAAC,EAAR,CAAW,CAAC,CAA5B;UACA,CAAA,EAAG,YAAa,CAAA,OAAO,CAAC,EAAR,CAAW,CAAC;QAD5B,CADO;QAGT,IAAG,MAAM,CAAC,KAAP,IAAgB,MAAM,CAAC,CAAvB,IAA6B,MAAM,CAAC,CAAP,IAAY,MAAM,CAAC,GAAhD,IAAwD,MAAM,CAAC,KAAP,IAAgB,MAAM,CAAC,CAA/E,IAAqF,MAAM,CAAC,CAAP,IAAY,MAAM,CAAC,GAA3G;UACE,gBAAgB,CAAC,IAAjB,CAAsB,OAAO,CAAC,EAA9B,EADF;;QAEA,CAAA;MARF;MAUA,MAAM,CAAC,UAAU,CAAC,WAAlB,CAA8B,gBAA9B;IAhByB;IAmB3B,aAAA,GAAgB,QAAA,CAAC,KAAD,EAAQ,MAAR,CAAA;AACd,UAAA;MAAA,IAAG,MAAA,GAAS,CAAZ;QACE,GAAA,GACE;UAAA,KAAA,EAAO,KAAP;UACA,GAAA,EAAK,KAAA,GAAQ;QADb,EAFJ;OAAA,MAAA;QAKE,GAAA,GACE;UAAA,KAAA,EAAO,KAAA,GAAQ,MAAf;UACA,GAAA,EAAK;QADL,EANJ;;AAQA,aAAO;IATO;IAWhB,SAAA,GAAY,CAAA,CAAE,YAAF;IACZ,SAAS,CAAC,EAAV,CAAa,WAAb,EAA0B,QAAA,CAAC,CAAD,CAAA;MACxB,IAAG,IAAH;QACE,qBAAA,CAAA;QACA,IAAI,CAAC,CAAL,GAAS,CAAC,CAAC,KAAF,GAAW,IAAC,CAAA,UAAZ,GAA2B,IAAI,CAAC;QACzC,IAAI,CAAC,CAAL,GAAS,CAAC,CAAC,KAAF,GAAW,IAAC,CAAA,SAAZ,GAA0B,IAAI,CAAC;QACxC,GAAG,CAAC,WAAJ,CAAgB,CAAE,CAAF,CAAhB;QACA,GAAG,CAAC,WAAJ,GAAkB;QAClB,GAAG,CAAC,UAAJ,CAAe,IAAI,CAAC,MAApB,EAA4B,IAAI,CAAC,MAAjC,EAAyC,IAAI,CAAC,CAA9C,EAAiD,IAAI,CAAC,CAAtD;QACA,GAAG,CAAC,WAAJ,CAAgB,EAAhB;QACA,GAAG,CAAC,SAAJ,GAAgB;QAChB,GAAG,CAAC,QAAJ,CAAa,IAAI,CAAC,MAAlB,EAA0B,IAAI,CAAC,MAA/B,EAAuC,IAAI,CAAC,CAA5C,EAA+C,IAAI,CAAC,CAApD,EATF;;IADwB,CAA1B;IAaA,SAAS,CAAC,EAAV,CAAa,WAAb,EAA0B,QAAA,CAAC,CAAD,CAAA;AACxB,UAAA,iBAAA,EAAA;MAAA,OAAO,CAAC,GAAR,CAAY,eAAZ,EAA6B,EAA7B;MACA,IAAG,CAAC,CAAC,MAAF,KAAY,CAAf;QACE,IAAG,CAAC,CAAC,QAAL;UACE,iBAAA,GAAoB,MAAM,CAAC,UAAU,CAAC,gBAAlB,CAAA;UACpB,OAAO,CAAC,GAAR,CAAY,eAAZ,EAA6B,iBAA7B,EAFF;;QAGA,kBAAA,CAAA;QACA,IAAA,GAAO;QACP,IAAI,CAAC,MAAL,GAAc,CAAC,CAAC,KAAF,GAAW,IAAC,CAAA;QAC1B,IAAI,CAAC,MAAL,GAAc,CAAC,CAAC,KAAF,GAAW,IAAC,CAAA;QAC1B,IAAA,GAAO;QACP,SAAU,CAAA,CAAA,CAAE,CAAC,KAAK,CAAC,MAAnB,GAA4B,YAT9B;;IAFwB,CAA1B;IAaA,SAAS,CAAC,EAAV,CAAa,SAAb,EAAwB,QAAA,CAAC,CAAD,CAAA;MACtB,IAAG,CAAC,CAAC,MAAF,KAAY,CAAf;QACE,qBAAA,CAAA;QACA,IAAA,GAAO;QACP,SAAU,CAAA,CAAA,CAAE,CAAC,KAAK,CAAC,MAAnB,GAA4B;QAC5B,wBAAA,CAAA,EAJF;;IADsB,CAAxB;IAOA,QAAQ,CAAC,IAAI,CAAC,aAAd,GAA8B,QAAA,CAAA,CAAA;aAC5B;IAD4B,EAvW9B;;IA8WA,CAAA,CAAE,4BAAF,CAA+B,CAAC,IAAhC,CAAqC,SAArC,EAAgD,IAAhD;IACA,CAAA,CAAE,4BAAF,CAA+B,CAAC,MAAhC,CAAuC,QAAA,CAAA,CAAA;AACrC,UAAA,QAAA,EAAA;MAAA,QAAA,GAAW,CAAA,CAAE,4BAAF,CAA+B,CAAC,IAAhC,CAAqC,SAArC;MACX,QAAA,GAAW,CAAC;aACZ,MAAM,CAAC,UAAU,CAAC,UAAlB,CAA6B;QAAC,KAAA,EAAM;UAAC,MAAA,EAAQ;QAAT;MAAP,CAA7B;IAHqC,CAAvC;IAKA,CAAA,CAAE,4BAAF,CAA+B,CAAC,IAAhC,CAAqC,SAArC,EAAgD,IAAhD;IACA,CAAA,CAAE,4BAAF,CAA+B,CAAC,MAAhC,CAAuC,QAAA,CAAA,CAAA;AACrC,UAAA,QAAA,EAAA;MAAA,QAAA,GAAW,CAAA,CAAE,4BAAF,CAA+B,CAAC,IAAhC,CAAqC,SAArC;MACX,QAAA,GAAW,CAAC;aACZ,MAAM,CAAC,UAAU,CAAC,UAAlB,CAA6B;QAAC,KAAA,EAAM;UAAC,MAAA,EAAQ;QAAT;MAAP,CAA7B;IAHqC,CAAvC;IAKA,CAAA,CAAE,6BAAF,CAAgC,CAAC,IAAjC,CAAsC,SAAtC,EAAiD,IAAjD;IACA,CAAA,CAAE,6BAAF,CAAgC,CAAC,MAAjC,CAAwC,QAAA,CAAA,CAAA;AACtC,UAAA;MAAA,KAAA,GAAQ,CAAA,CAAE,6BAAF,CAAgC,CAAC,IAAjC,CAAsC,SAAtC;aACR,MAAM,CAAC,UAAU,CAAC,UAAlB,CAA6B;QAAC,OAAA,EAAS;MAAV,CAA7B;IAFsC,CAAxC;IAIA,CAAA,CAAE,eAAF,CAAkB,CAAC,KAAnB,CAAyB,QAAA,CAAC,GAAD,CAAA;aACvB,CAAA,CAAE,aAAF,CAAgB,CAAC,MAAjB,CAAwB;QAAC,KAAA,EAAO,uBAAR;QAAgC,SAAA,EAAW,IAA3C;QAAgD,KAAA,EAAM,GAAtD;QAA0D,MAAA,EAAO;MAAjE,CAAxB;IADuB,CAAzB,EA/XA;;IAmYA,CAAA,CAAE,oBAAF,CAAuB,CAAC,MAAxB,CAA+B,QAAA,CAAA,CAAA;aAC7B,gBAAA,CAAA;IAD6B,CAA/B;IAGA,gBAAA,GAAmB,QAAA,CAAA,CAAA;AACjB,UAAA,GAAA,EAAA,KAAA,EAAA;MAAA,GAAA,GAAM,CAAA,CAAE,oBAAF,CAAuB,CAAC,GAAxB,CAAA;MACN,OAAO,CAAC,GAAR,CAAY,iBAAZ,EAA+B,GAA/B;MACA,KAAA,GAAQ,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAA/C,CAAA;MACR,MAAM,CAAC,UAAU,CAAC,cAAlB,CAAA;MACA,UAAA,GAAa,CAAC,MAAM,CAAC,UAAU,CAAC,YAAlB,CAAA,CAAD,CAAkC,CAAC;MAChD,IAAG,CAAI,UAAU,CAAC,MAAlB;QACE,KAAK,CAAC,OAAN,CAAc,QAAA,CAAC,IAAD,CAAA;UACZ,IAAI,CAAC,KAAL,GAAa,cAAA,CAAe,IAAI,CAAC,OAApB,EAA4B,GAA5B;iBACb,KAAK,CAAC,MAAN,CAAa;YAAC,EAAA,EAAI,IAAI,CAAC,EAAV;YAAc,KAAA,EAAO,IAAI,CAAC,KAA1B;UAAA,CAAb;QAFY,CAAd,EADF;OAAA,MAAA;QAKE,UAAU,CAAC,OAAX,CAAmB,QAAA,CAAC,MAAD,CAAA;AACjB,cAAA;UAAA,IAAA,GAAO,KAAK,CAAC,GAAN,CAAU,MAAV;UACP,IAAI,CAAC,KAAL,GAAa,cAAA,CAAe,IAAI,CAAC,OAApB,EAA4B,GAA5B;iBACb,KAAK,CAAC,MAAN,CAAa;YAAC,EAAA,EAAI,IAAI,CAAC,EAAV;YAAc,KAAA,EAAO,IAAI,CAAC;UAA1B,CAAb;QAHiB,CAAnB,EALF;;aASA,MAAM,CAAC,UAAU,CAAC,eAAlB,CAAA;IAfiB;IAiBnB,CAAA,CAAE,iBAAF,CAAoB,CAAC,IAArB,CAA0B,SAA1B,EAAqC,IAArC;IACA,OAAO,CAAC,GAAR,CAAY,gBAAZ,EAA8B,IAA9B;IACA,CAAA,CAAE,iBAAF,CAAoB,CAAC,MAArB,CAA4B,QAAA,CAAA,CAAA;AAC1B,UAAA;MAAA,KAAA,GAAQ,CAAA,CAAE,iBAAF,CAAoB,CAAC,IAArB,CAA0B,SAA1B;MACR,OAAO,CAAC,GAAR,CAAY,gBAAZ,EAA8B,KAA9B;aACA,gBAAA,CAAA;IAH0B,CAA5B,EAzZA;;IAiaA,CAAA,CAAE,oBAAF,CAAuB,CAAC,MAAxB,CAA+B,QAAA,CAAA,CAAA;AAC7B,UAAA;MAAA,GAAA,GAAM,CAAA,CAAE,oBAAF,CAAuB,CAAC,GAAxB,CAAA;MACN,IAAG,GAAA,KAAO,cAAV;QACE,CAAA,CAAE,kBAAF,CAAqB,CAAC,GAAtB,CAA2B,oBAA3B,EADF;OAAA,MAAA;QAGE,IAAG,GAAA,KAAO,WAAV;UACE,CAAA,CAAE,kBAAF,CAAqB,CAAC,GAAtB,CAA2B,kBAA3B,EADF;SAAA,MAAA;UAGE,CAAA,CAAE,kBAAF,CAAqB,CAAC,GAAtB,CAA2B,GAAA,GAAI,CAAA,CAAE,oBAAF,CAAuB,CAAC,GAAxB,CAAA,CAAJ,GAAkC,GAA7D,EAHF;SAHF;;aAOA,CAAA,CAAE,kBAAF,CAAqB,CAAC,OAAtB,CAA8B,OAA9B;IAT6B,CAA/B;IAYA,OAAO,CAAC,GAAR,CAAY,iBAAZ,EAA+B,IAA/B,EA7aA;IA+aA,MAAM,CAAC,sBAAP,GAAgC,QAAA,CAAC,IAAD,CAAA;AAC9B,UAAA,KAAA,EAAA,aAAA,EAAA,aAAA,EAAA;MAAA,OAAO,CAAC,GAAR,CAAY,iBAAZ,EAA+B,IAA/B;AACA;QACE,QAAA,GAAW,IAAI,CAAC,KAAL,CAAW,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAX;QACX,CAAA,CAAE,kBAAF,CAAsB,CAAA,CAAA,CAAE,CAAC,KAAK,CAAC,KAA/B,GAAuC,QAFzC;OAAA,cAAA;QAGM;QACJ,CAAA,CAAE,kBAAF,CAAsB,CAAA,CAAA,CAAE,CAAC,KAAK,CAAC,KAA/B,GAAuC,MAAvC;AACA,eALF;;MAMA,aAAA,GAAgB,WAAA,CAAY,QAAZ,EAAsB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAxD;MAChB,aAAA,GAAgB,WAAA,CAAY,QAAZ,EAAsB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAxD;aAChB,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B;QAAC,KAAA,EAAO,aAAR;QAAuB,KAAA,EAAO;MAA9B,CAA/B,EAA4E;QAAC,aAAA,EAAe,IAAhB;QAAsB,cAAA,EAAgB;MAAtC,CAA5E;IAV8B;IAYhC,WAAA,GAAc,QAAA,CAAC,QAAD,EAAW,SAAX,CAAA;AAEZ,UAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,aAAA,EAAA,cAAA,EAAA,KAAA,EAAA,QAAA;;MAAA,QAAA,GAAW;MACX,IAAG,QAAA,KAAY,IAAf;AACE,eAAO,SADT;;MAEA,IAAG,CAAC,CAAC,SAAF,CAAY,QAAZ,CAAA,IAA0B,SAAU,CAAA,QAAA,CAAvC;QACE,QAAQ,CAAC,IAAT,CAAc,QAAd;AACA,eAAO,SAFT;;MAGA,IAAG,CAAC,CAAC,QAAF,CAAW,QAAX,CAAH;QACE,QAAA,GAAW;UAAC,KAAA,EAAO;QAAR,EADb;;MAEA,IAAG,CAAC,CAAC,aAAF,CAAgB,QAAhB,CAAH;QACE,aAAA;;AAAoH;AAAA;UAAA,KAAA,qCAAA;;0BAAnG;cAAC,EAAA,EAAI,IAAI,CAAC,EAAV;cAAc,KAAA,EAAO,IAAI,CAAC,OAAO,CAAC,KAAlC;cAAyC,IAAA,EAAM,IAAI,CAAC,OAAO,CAAC,IAA5D;cAAkE,KAAA,EAAO,IAAI,CAAC,OAAO,CAAC;YAAtF;UAAmG,CAAA;;;QACpH,cAAA,GAAiB;QACjB,KAAA,+CAAA;;UACE,GAAA,GAAM;YAAC,EAAA,EAAI,KAAK,CAAC,EAAX;YAAe,KAAA,EAAO,KAAK,CAAC,KAA5B;YAAmC,IAAA,EAAM,KAAK,CAAC;UAA/C;;;AACgC;AAAA;YAAA,KAAA,uCAAA;;4BAApC,GAAI,CAAA,GAAA,CAAJ,GAAS,KAAK,CAAC,KAAM,CAAA,GAAA,CAAK,CAAA,CAAA,CAAE,CAAC;YAAO,CAAA;;;UACtC,cAAc,CAAC,IAAf,CAAoB,GAApB;QAHF;QAIA,KAAA,GAAQ,CAAC,CAAC,KAAF,CAAQ,cAAR,EAAwB,QAAxB;QACW,KAAA,yCAAA;;UAAnB,QAAQ,CAAC,IAAT,CAAc,CAAC,CAAC,EAAhB;QAAmB;AACnB,eAAO,SATT;;MAUA,IAAG,CAAC,CAAC,OAAF,CAAU,QAAV,CAAH;QACgD,KAAA,4CAAA;;UAA7C,QAAQ,CAAC,IAAT,CAAe,WAAA,CAAY,IAAZ,EAAkB,SAAlB,CAAf;QAA6C;QAC9C,QAAA,GAAW,CAAC,CAAC,OAAF,CAAU,QAAV;AACX,eAAO,SAHT;;AAIA,aAAO;IAxBK;IA0Bd,WAAA,GAAc,QAAA,CAAC,QAAD,EAAW,SAAX,CAAA;AAEZ,UAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,aAAA,EAAA,cAAA,EAAA,KAAA,EAAA,QAAA;;MAAA,QAAA,GAAW;MACX,IAAG,QAAA,KAAY,IAAf;AACE,eAAO,SADT;;MAEA,IAAG,CAAC,CAAC,SAAF,CAAY,QAAZ,CAAA,IAA0B,SAAU,CAAA,QAAA,CAAvC;QACE,QAAQ,CAAC,IAAT,CAAc,QAAd;AACA,eAAO,SAFT;;MAGA,IAAG,CAAC,CAAC,QAAF,CAAW,QAAX,CAAH;QACE,QAAA,GAAW;UAAC,KAAA,EAAO;QAAR,EADb;;MAEA,IAAG,CAAC,CAAC,aAAF,CAAgB,QAAhB,CAAA,KAA8B,GAAjC;QACE,cAAA,GAAiB,CAAC,CAAC,MAAF,CAAS,SAAT;QACjB,KAAA,GAAQ,CAAC,CAAC,KAAF,CAAQ,cAAR,EAAwB,QAAxB;QACW,KAAA,uCAAA;;UAAnB,QAAQ,CAAC,IAAT,CAAc,CAAC,CAAC,EAAhB;QAAmB;AACnB,eAAO,SAJT;;MAKA,IAAG,CAAC,CAAC,aAAF,CAAgB,QAAhB,CAAH;QACE,aAAA;;AAA4J;AAAA;UAAA,KAAA,uCAAA;;0BAA3I;cAAC,EAAA,EAAI,IAAI,CAAC,EAAV;cAAc,KAAA,EAAO,IAAI,CAAC,OAAO,CAAC,KAAlC;cAAyC,IAAA,EAAM,IAAI,CAAC,OAAO,CAAC,IAA5D;cAAkE,KAAA,EAAM,CAAI,IAAI,CAAC,OAAO,CAAC,UAAhB,GAAgC,IAAI,CAAC,OAAO,CAAC,UAA7C,GAA6D,CAAA,CAA9D;YAAxE;UAA2I,CAAA;;;QAC5J,cAAA,GAAiB;QACjB,KAAA,iDAAA;;UACE,GAAA,GAAM;YAAC,EAAA,EAAI,KAAK,CAAC,EAAX;YAAe,KAAA,EAAO,KAAK,CAAC,KAA5B;YAAmC,IAAA,EAAM;UAAzC;;;AACuB;AAAA;YAAA,KAAA,uCAAA;;4BAA3B,GAAI,CAAA,GAAA,CAAJ,GAAS,KAAK,CAAC,KAAM,CAAA,GAAA;YAAM,CAAA;;;UAC7B,cAAc,CAAC,IAAf,CAAoB,GAApB;QAHF;QAIA,KAAA,GAAQ,CAAC,CAAC,KAAF,CAAQ,cAAR,EAAwB,QAAxB;QACW,KAAA,yCAAA;;UAAnB,QAAQ,CAAC,IAAT,CAAc,CAAC,CAAC,EAAhB;QAAmB;AACnB,eAAO,SATT;;MAUA,IAAG,CAAC,CAAC,OAAF,CAAU,QAAV,CAAH;QACgD,KAAA,4CAAA;;UAA7C,QAAQ,CAAC,IAAT,CAAe,WAAA,CAAY,IAAZ,EAAkB,SAAlB,CAAf;QAA6C;QAC9C,QAAA,GAAW,CAAC,CAAC,OAAF,CAAU,QAAV;AACX,eAAO,SAHT;;AAIA,aAAO;IA7BK;AA+Bd;IAMA,CAAA,CAAE,oBAAF,CAAuB,CAAC,KAAxB,CAA8B,QAAA,CAAA,CAAA;aAC5B,MAAM,CAAC,UAAU,CAAC,GAAlB,CAAA;IAD4B,CAA9B,EA1fA;;IA8fA,IAAA,GAAO,CAAA;IACP,IAAA,GAAO;IACP,MAAA,GAAS,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,KAAK,CAAC;IACxC,GAAA,GAAM,MAAM,CAAC,UAAP,CAAkB,IAAlB;IACN,uBAAA,GAA0B,GAAG,CAAC,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,MAAM,CAAC,KAA9B,EAAqC,MAAM,CAAC,MAA5C;IAG1B,kBAAA,GAAqB,QAAA,CAAA,CAAA;MACnB,uBAAA,GAA0B,GAAG,CAAC,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,MAAM,CAAC,KAA9B,EAAqC,MAAM,CAAC,MAA5C;IADP;IAIrB,qBAAA,GAAwB,QAAA,CAAA,CAAA;MACtB,GAAG,CAAC,YAAJ,CAAiB,uBAAjB,EAA0C,CAA1C,EAA6C,CAA7C;IADsB;IAIxB,wBAAA,GAA2B,QAAA,CAAA,CAAA;AACzB,UAAA,QAAA,EAAA,OAAA,EAAA,CAAA,EAAA,YAAA,EAAA,MAAA,EAAA,gBAAA,EAAA,MAAA,EAAA;MAAA,gBAAA,GAAmB,OAAO,CAAC,GAAR,CAAY,eAAZ;MACnB,MAAA,GAAS,aAAA,CAAc,IAAI,CAAC,MAAnB,EAA2B,IAAI,CAAC,CAAhC;MACT,MAAA,GAAS,aAAA,CAAc,IAAI,CAAC,MAAnB,EAA2B,IAAI,CAAC,CAAhC;MACT,QAAA,GAAW,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAA/C,CAAA;MACX,CAAA,GAAI;AACJ,aAAM,CAAA,GAAI,QAAQ,CAAC,MAAnB;QACE,OAAA,GAAU,QAAS,CAAA,CAAA;QACnB,YAAA,GAAe,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B,CAAE,OAAO,CAAC,EAAV,CAA/B;QACf,MAAA,GAAS,MAAM,CAAC,UAAU,CAAC,WAAlB,CACP;UAAA,CAAA,EAAG,YAAa,CAAA,OAAO,CAAC,EAAR,CAAW,CAAC,CAA5B;UACA,CAAA,EAAG,YAAa,CAAA,OAAO,CAAC,EAAR,CAAW,CAAC;QAD5B,CADO;QAGT,IAAG,MAAM,CAAC,KAAP,IAAgB,MAAM,CAAC,CAAvB,IAA6B,MAAM,CAAC,CAAP,IAAY,MAAM,CAAC,GAAhD,IAAwD,MAAM,CAAC,KAAP,IAAgB,MAAM,CAAC,CAA/E,IAAqF,MAAM,CAAC,CAAP,IAAY,MAAM,CAAC,GAA3G;UACE,gBAAgB,CAAC,IAAjB,CAAsB,OAAO,CAAC,EAA9B,EADF;;QAEA,CAAA;MARF;MAUA,MAAM,CAAC,UAAU,CAAC,WAAlB,CAA8B,gBAA9B;IAhByB;IAmB3B,aAAA,GAAgB,QAAA,CAAC,KAAD,EAAQ,MAAR,CAAA;AACd,UAAA;MAAA,IAAG,MAAA,GAAS,CAAZ;QACE,GAAA,GACE;UAAA,KAAA,EAAO,KAAP;UACA,GAAA,EAAK,KAAA,GAAQ;QADb,EAFJ;OAAA,MAAA;QAKE,GAAA,GACE;UAAA,KAAA,EAAO,KAAA,GAAQ,MAAf;UACA,GAAA,EAAK;QADL,EANJ;;AAQA,aAAO;IATO;IAWhB,SAAA,GAAY,CAAA,CAAE,YAAF;IACZ,SAAS,CAAC,EAAV,CAAa,WAAb,EAA0B,QAAA,CAAC,CAAD,CAAA;MACxB,IAAG,IAAH;QACE,qBAAA,CAAA;QACA,IAAI,CAAC,CAAL,GAAS,CAAC,CAAC,KAAF,GAAW,IAAC,CAAA,UAAZ,GAA2B,IAAI,CAAC;QACzC,IAAI,CAAC,CAAL,GAAS,CAAC,CAAC,KAAF,GAAW,IAAC,CAAA,SAAZ,GAA0B,IAAI,CAAC;QACxC,GAAG,CAAC,WAAJ,CAAgB,CAAE,CAAF,CAAhB;QACA,GAAG,CAAC,WAAJ,GAAkB;QAClB,GAAG,CAAC,UAAJ,CAAe,IAAI,CAAC,MAApB,EAA4B,IAAI,CAAC,MAAjC,EAAyC,IAAI,CAAC,CAA9C,EAAiD,IAAI,CAAC,CAAtD;QACA,GAAG,CAAC,WAAJ,CAAgB,EAAhB;QACA,GAAG,CAAC,SAAJ,GAAgB;QAChB,GAAG,CAAC,QAAJ,CAAa,IAAI,CAAC,MAAlB,EAA0B,IAAI,CAAC,MAA/B,EAAuC,IAAI,CAAC,CAA5C,EAA+C,IAAI,CAAC,CAApD,EATF;;IADwB,CAA1B;IAYA,SAAS,CAAC,EAAV,CAAa,WAAb,EAA0B,QAAA,CAAC,CAAD,CAAA;AACxB,UAAA,iBAAA,EAAA;MAAA,OAAO,CAAC,GAAR,CAAY,eAAZ,EAA6B,EAA7B;MACA,IAAG,CAAC,CAAC,MAAF,KAAY,CAAf;QACE,IAAG,CAAC,CAAC,QAAL;UACE,iBAAA,GAAoB,MAAM,CAAC,UAAU,CAAC,gBAAlB,CAAA;UACpB,OAAO,CAAC,GAAR,CAAY,eAAZ,EAA6B,iBAA7B,EAFF;;QAGA,kBAAA,CAAA;QACA,IAAA,GAAO;QACP,IAAI,CAAC,MAAL,GAAc,CAAC,CAAC,KAAF,GAAW,IAAC,CAAA;QAC1B,IAAI,CAAC,MAAL,GAAc,CAAC,CAAC,KAAF,GAAW,IAAC,CAAA;QAC1B,IAAA,GAAO;QACP,SAAU,CAAA,CAAA,CAAE,CAAC,KAAK,CAAC,MAAnB,GAA4B,YAT9B;;IAFwB,CAA1B;IAaA,SAAS,CAAC,EAAV,CAAa,SAAb,EAAwB,QAAA,CAAC,CAAD,CAAA;MACtB,IAAG,CAAC,CAAC,MAAF,KAAY,CAAf;QACE,qBAAA,CAAA;QACA,IAAA,GAAO;QACP,SAAU,CAAA,CAAA,CAAE,CAAC,KAAK,CAAC,MAAnB,GAA4B;QAC5B,wBAAA,CAAA,EAJF;;IADsB,CAAxB;IAOA,QAAQ,CAAC,IAAI,CAAC,aAAd,GAA8B,QAAA,CAAA,CAAA;aAC5B;IAD4B,EA5kB9B;;IAmlBA,CAAA,CAAE,4BAAF,CAA+B,CAAC,IAAhC,CAAqC,SAArC,EAAgD,IAAhD;IACA,CAAA,CAAE,4BAAF,CAA+B,CAAC,MAAhC,CAAuC,QAAA,CAAA,CAAA;AACrC,UAAA,QAAA,EAAA;MAAA,QAAA,GAAW,CAAA,CAAE,4BAAF,CAA+B,CAAC,IAAhC,CAAqC,SAArC;MACX,QAAA,GAAW,CAAC;aACZ,MAAM,CAAC,UAAU,CAAC,UAAlB,CAA6B;QAAC,KAAA,EAAM;UAAC,MAAA,EAAQ;QAAT;MAAP,CAA7B;IAHqC,CAAvC;IAKA,CAAA,CAAE,4BAAF,CAA+B,CAAC,IAAhC,CAAqC,SAArC,EAAgD,IAAhD;IACA,CAAA,CAAE,4BAAF,CAA+B,CAAC,MAAhC,CAAuC,QAAA,CAAA,CAAA;AACrC,UAAA,QAAA,EAAA;MAAA,QAAA,GAAW,CAAA,CAAE,4BAAF,CAA+B,CAAC,IAAhC,CAAqC,SAArC;MACX,QAAA,GAAW,CAAC;aACZ,MAAM,CAAC,UAAU,CAAC,UAAlB,CAA6B;QAAC,KAAA,EAAM;UAAC,MAAA,EAAQ;QAAT;MAAP,CAA7B;IAHqC,CAAvC;IAKA,CAAA,CAAE,6BAAF,CAAgC,CAAC,IAAjC,CAAsC,SAAtC,EAAiD,IAAjD;IACA,CAAA,CAAE,6BAAF,CAAgC,CAAC,MAAjC,CAAwC,QAAA,CAAA,CAAA;AACtC,UAAA;MAAA,KAAA,GAAQ,CAAA,CAAE,6BAAF,CAAgC,CAAC,IAAjC,CAAsC,SAAtC;aACR,MAAM,CAAC,UAAU,CAAC,UAAlB,CAA6B;QAAC,OAAA,EAAS;MAAV,CAA7B;IAFsC,CAAxC;IAIA,CAAA,CAAE,eAAF,CAAkB,CAAC,KAAnB,CAAyB,QAAA,CAAC,GAAD,CAAA;aACvB,CAAA,CAAE,aAAF,CAAgB,CAAC,MAAjB,CAAwB;QAAC,KAAA,EAAO,uBAAR;QAAgC,SAAA,EAAW,IAA3C;QAAgD,KAAA,EAAM,GAAtD;QAA0D,MAAA,EAAO;MAAjE,CAAxB;IADuB,CAAzB,EApmBA;;IAwmBA,CAAA,CAAE,oBAAF,CAAuB,CAAC,MAAxB,CAA+B,QAAA,CAAA,CAAA;aAC7B,gBAAA,CAAA;IAD6B,CAA/B;IAGA,gBAAA,GAAmB,QAAA,CAAA,CAAA;AACjB,UAAA,GAAA,EAAA,KAAA,EAAA;MAAA,GAAA,GAAM,CAAA,CAAE,oBAAF,CAAuB,CAAC,GAAxB,CAAA;MACN,OAAO,CAAC,GAAR,CAAY,iBAAZ,EAA+B,GAA/B;MACA,KAAA,GAAQ,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,UAA/C,CAAA;MACR,MAAM,CAAC,UAAU,CAAC,cAAlB,CAAA;MACA,UAAA,GAAa,CAAC,MAAM,CAAC,UAAU,CAAC,YAAlB,CAAA,CAAD,CAAkC,CAAC;MAChD,IAAG,CAAI,UAAU,CAAC,MAAlB;QACE,KAAK,CAAC,OAAN,CAAc,QAAA,CAAC,IAAD,CAAA;UACZ,IAAI,CAAC,KAAL,GAAa,cAAA,CAAe,IAAI,CAAC,OAApB,EAA4B,GAA5B;iBACb,KAAK,CAAC,MAAN,CAAa;YAAC,EAAA,EAAI,IAAI,CAAC,EAAV;YAAc,KAAA,EAAO,IAAI,CAAC,KAA1B;UAAA,CAAb;QAFY,CAAd,EADF;OAAA,MAAA;QAKE,UAAU,CAAC,OAAX,CAAmB,QAAA,CAAC,MAAD,CAAA;AACjB,cAAA;UAAA,IAAA,GAAO,KAAK,CAAC,GAAN,CAAU,MAAV;UACP,IAAI,CAAC,KAAL,GAAa,cAAA,CAAe,IAAI,CAAC,OAApB,EAA4B,GAA5B;iBACb,KAAK,CAAC,MAAN,CAAa;YAAC,EAAA,EAAI,IAAI,CAAC,EAAV;YAAc,KAAA,EAAO,IAAI,CAAC;UAA1B,CAAb;QAHiB,CAAnB,EALF;;aASA,MAAM,CAAC,UAAU,CAAC,eAAlB,CAAA;IAfiB;IAiBnB,CAAA,CAAE,iBAAF,CAAoB,CAAC,IAArB,CAA0B,SAA1B,EAAqC,IAArC;IACA,OAAO,CAAC,GAAR,CAAY,gBAAZ,EAA8B,IAA9B;IACA,CAAA,CAAE,iBAAF,CAAoB,CAAC,MAArB,CAA4B,QAAA,CAAA,CAAA;AAC1B,UAAA;MAAA,KAAA,GAAQ,CAAA,CAAE,iBAAF,CAAoB,CAAC,IAArB,CAA0B,SAA1B;MACR,OAAO,CAAC,GAAR,CAAY,gBAAZ,EAA8B,KAA9B;aACA,gBAAA,CAAA;IAH0B,CAA5B,EA9nBA;;IAsoBA,CAAA,CAAE,oBAAF,CAAuB,CAAC,MAAxB,CAA+B,QAAA,CAAA,CAAA;MAC7B,CAAA,CAAE,kBAAF,CAAqB,CAAC,GAAtB,CAA2B,GAAA,GAAI,CAAA,CAAE,oBAAF,CAAuB,CAAC,GAAxB,CAAA,CAAJ,GAAkC,GAA7D;aACA,CAAA,CAAE,kBAAF,CAAqB,CAAC,OAAtB,CAA8B,OAA9B;IAF6B,CAA/B;IAKA,OAAO,CAAC,GAAR,CAAY,iBAAZ,EAA+B,IAA/B,EA3oBA;IA6oBA,MAAM,CAAC,sBAAP,GAAgC,QAAA,CAAC,IAAD,CAAA;AAC9B,UAAA,KAAA,EAAA,aAAA,EAAA,aAAA,EAAA;MAAA,OAAO,CAAC,GAAR,CAAY,iBAAZ,EAA+B,IAA/B;AACA;QACE,QAAA,GAAW,IAAI,CAAC,KAAL,CAAW,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAX;QACX,CAAA,CAAE,kBAAF,CAAsB,CAAA,CAAA,CAAE,CAAC,KAAK,CAAC,KAA/B,GAAuC,QAFzC;OAAA,cAAA;QAGM;QACJ,CAAA,CAAE,kBAAF,CAAsB,CAAA,CAAA,CAAE,CAAC,KAAK,CAAC,KAA/B,GAAuC,MAAvC;AACA,eALF;;MAMA,aAAA,GAAgB,WAAA,CAAY,QAAZ,EAAsB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAxD;MAChB,aAAA,GAAgB,WAAA,CAAY,QAAZ,EAAsB,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAxD;aAChB,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B;QAAC,KAAA,EAAO,aAAR;QAAuB,KAAA,EAAO;MAA9B,CAA/B,EAA4E;QAAC,aAAA,EAAe,IAAhB;QAAsB,cAAA,EAAgB;MAAtC,CAA5E;IAV8B;IAYhC,WAAA,GAAc,QAAA,CAAC,QAAD,EAAW,SAAX,CAAA;AAEZ,UAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,CAAA,EAAA,GAAA,EAAA,aAAA,EAAA,cAAA,EAAA,KAAA,EAAA,QAAA;;MAAA,QAAA,GAAW;MACX,IAAG,QAAA,KAAY,IAAf;AACE,eAAO,SADT;;MAEA,IAAG,CAAC,CAAC,SAAF,CAAY,QAAZ,CAAA,IAA0B,SAAU,CAAA,QAAA,CAAvC;QACE,QAAQ,CAAC,IAAT,CAAc,QAAd;AACA,eAAO,SAFT;;MAGA,IAAG,CAAC,CAAC,QAAF,CAAW,QAAX,CAAH;QACE,QAAA,GAAW;UAAC,KAAA,EAAO;QAAR,EADb;;MAEA,IAAG,CAAC,CAAC,aAAF,CAAgB,QAAhB,CAAH;QACE,aAAA;;AAAoH;AAAA;UAAA,KAAA,qCAAA;;0BAAnG;cAAC,EAAA,EAAI,IAAI,CAAC,EAAV;cAAc,KAAA,EAAO,IAAI,CAAC,OAAO,CAAC,KAAlC;cAAyC,IAAA,EAAM,IAAI,CAAC,OAAO,CAAC,IAA5D;cAAkE,KAAA,EAAO,IAAI,CAAC,OAAO,CAAC;YAAtF;UAAmG,CAAA;;;QACpH,cAAA,GAAiB;QACjB,KAAA,+CAAA;;UACE,GAAA,GAAM;YAAC,EAAA,EAAI,KAAK,CAAC,EAAX;YAAe,KAAA,EAAO,KAAK,CAAC,KAA5B;YAAmC,IAAA,EAAM,KAAK,CAAC;UAA/C;;;AACgC;AAAA;YAAA,KAAA,uCAAA;;4BAApC,GAAI,CAAA,GAAA,CAAJ,GAAS,KAAK,CAAC,KAAM,CAAA,GAAA,CAAK,CAAA,CAAA,CAAE,CAAC;YAAO,CAAA;;;UACtC,cAAc,CAAC,IAAf,CAAoB,GAApB;QAHF;QAIA,KAAA,GAAQ,CAAC,CAAC,KAAF,CAAQ,cAAR,EAAwB,QAAxB;QACW,KAAA,yCAAA;;UAAnB,QAAQ,CAAC,IAAT,CAAc,CAAC,CAAC,EAAhB;QAAmB;AACnB,eAAO,SATT;;MAUA,IAAG,CAAC,CAAC,OAAF,CAAU,QAAV,CAAH;QACgD,KAAA,4CAAA;;UAA7C,QAAQ,CAAC,IAAT,CAAe,WAAA,CAAY,IAAZ,EAAkB,SAAlB,CAAf;QAA6C;QAC9C,QAAA,GAAW,CAAC,CAAC,OAAF,CAAU,QAAV;AACX,eAAO,SAHT;;AAIA,aAAO;IAxBK;IA0Bd,WAAA,GAAc,QAAA,CAAC,QAAD,EAAW,SAAX,CAAA;AAEZ,UAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,cAAA,EAAA,QAAA;;MAAA,QAAA,GAAW;MACX,IAAG,QAAA,KAAY,IAAf;AACE,eAAO,SADT;;MAEA,IAAG,CAAC,CAAC,SAAF,CAAY,QAAZ,CAAA,IAA0B,SAAU,CAAA,QAAA,CAAvC;QACE,QAAQ,CAAC,IAAT,CAAc,QAAd;AACA,eAAO,SAFT;;MAGA,IAAG,CAAC,CAAC,QAAF,CAAW,QAAX,CAAH;QACE,QAAA,GAAW;UAAC,KAAA,EAAO;QAAR,EADb;;MAEA,IAAG,CAAC,CAAC,aAAF,CAAgB,QAAhB,CAAH;QACE,cAAA,GAAiB,CAAC,CAAC,MAAF,CAAS,SAAT;QACjB,KAAA,GAAQ,CAAC,CAAC,KAAF,CAAQ,cAAR,EAAwB,QAAxB;QACW,KAAA,uCAAA;;UAAnB,QAAQ,CAAC,IAAT,CAAc,CAAC,CAAC,EAAhB;QAAmB;AACnB,eAAO,SAJT;;MAKA,IAAG,CAAC,CAAC,OAAF,CAAU,QAAV,CAAH;QACgD,KAAA,4CAAA;;UAA7C,QAAQ,CAAC,IAAT,CAAe,WAAA,CAAY,IAAZ,EAAkB,SAAlB,CAAf;QAA6C;QAC9C,QAAA,GAAW,CAAC,CAAC,OAAF,CAAU,QAAV;AACX,eAAO,SAHT;;AAIA,aAAO;IAnBK;EAprBE;;EA2sBlB,cAAA,GAAiB,QAAA,CAAC,OAAD,EAAU,OAAV,EAAmB,SAAnB,CAAA;AACf,QAAA;IAAA,IAAG,MAAM,CAAC,aAAV;MACE,MAAM,CAAC,aAAa,CAAC,GAArB,CAAyB,OAAzB,EADF;;IAEA,OAAO,CAAC,GAAR,CAAY,cAAZ,EAA4B,OAA5B;IACA,OAAO,CAAC,GAAR,CAAY,WAAZ,EAAyB,OAAzB;IACA,CAAA,GAAI,MAAM,CAAC,QAAP,CAAgB,IAAI,CAAC,KAAL,CAAW,SAAA,GAAU,IAArB,CAAA,GAA2B,IAA3C;IACJ,OAAO,CAAC,GAAR,CAAY,WAAZ,EAAyB,MAAM,CAAC,gBAAP,CAAwB,CAAxB,CAAzB;IACA,CAAA,GAAI,MAAM,CAAC,QAAP,CAAgB,IAAI,CAAC,KAAL,CAAW,CAAC,MAAA,CAAA,CAAA,GAAS,MAAA,CAAO,OAAO,CAAC,GAAR,CAAY,WAAZ,CAAP,CAAV,CAAA,GAA2C,IAAtD,CAAA,GAA4D,IAA5E;IACJ,OAAO,CAAC,GAAR,CAAY,aAAZ,EAA2B,MAAM,CAAC,gBAAP,CAAwB,CAAxB,CAA3B;IACA,oBAAA,CAAA;IACA,IAAG,CAAC,CAAC,OAAO,CAAC,GAAR,CAAY,aAAZ,CAAD,CAA2B,CAAC,KAAK,CAAC,MAAlC,KAA4C,CAA7C,CAAA,IAAmD,CAAC,CAAC,OAAO,CAAC,GAAR,CAAY,aAAZ,CAAD,CAA2B,CAAC,KAAK,CAAC,MAAlC,KAA4C,CAA7C,CAAtD;MACE,OAAO,CAAC,GAAR,CAAY,sBAAZ,EAAmC,oBAAnC,EADF;KAAA,MAAA;MAGE,OAAO,CAAC,GAAR,CAAY,sBAAZ,EAAmC,OAAnC;MACA,IAAG,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAA,KAAkC,IAArC;QACE,OAAO,CAAC,GAAR,CAAY,mBAAZ,EAAiC,IAAjC;QACA,OAAO,CAAC,GAAR,CAAY,sBAAZ,EAAmC,cAAnC;QACA,OAAO,CAAC,GAAR,CAAY,mBAAZ,EAAiC,WAAjC;QACA,eAAA,CAAA;QACA,WAAA,CAAA,EALF;OAJF;;EAVe;;EAsBjB,oBAAA,GAAuB,QAAA,CAAC,sBAAD,EAAwB,sBAAxB,EAA+C,IAA/C,EAAoD,IAApD,CAAA;AACrB,QAAA;IAAA,GAAA,GAAM,OAAO,CAAC,MAAR,CACJ;MAAA,KAAA,EAAM,mDAAN;MACA,OAAA,EAAQ,OADR;MAEA,OAAA,EACE;QAAA,OAAA,EACE;UAAA,KAAA,EAAO,MAAP;UACA,SAAA,EAAW,aADX;UAEA,QAAA,EAAU,QAAA,CAAA,CAAA;AACR,gBAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,UAAA,EAAA,GAAA,EAAA,kBAAA,EAAA,GAAA,EAAA,aAAA,EAAA;YAAA,aAAA,GAAgB;YAChB,WAAA,GAAc,OAAO,CAAC,GAAR,CAAY,aAAZ;AACd;YAAA,KAAA,qCAAA;;cACE,UAAA,GAAa,CAAC,CAAC,MAAF,CAAS,IAAT,EAAc,QAAA,CAAC,IAAD,CAAA;uBACzB,IAAI,CAAC,KAAL,KAAc;cADW,CAAd;cAEb,aAAA,GAAgB,CAAC,CAAC,KAAF,CAAQ,aAAR,EAAuB,CAAC,CAAC,MAAF,CAAS,UAAT,EAAqB,WAAY,CAAA,KAAA,CAAjC,CAAvB;YAHlB;YAIA,sBAAA,GAAyB,CAAC,CAAC,KAAF,CAAQ,sBAAR;;AAA2C;cAAA,KAAA,iDAAA;;8BAAX,IAAI,CAAC,EAAL,GAAQ;cAAG,CAAA;;gBAA3C;YACzB,kBAAA,GAAqB,CAAC,CAAC,MAAF;;AAAqB;cAAA,KAAA,wCAAA;;8BAAX,IAAI,CAAC,EAAL,GAAQ;cAAG,CAAA;;gBAArB,EAAuC,QAAA,CAAC,EAAD,CAAA;qBAC1D,CAAC,CAAC,QAAF,CAAW,sBAAX,EAAkC,EAAlC;YAD0D,CAAvC;YAGrB,IAAA,GAAO,CAAC,CAAC,MAAF,CAAS,IAAT,EAAe,QAAA,CAAC,IAAD,CAAA;qBACpB,CAAC,CAAC,QAAF,CAAW,kBAAX,EAA8B,IAAI,CAAC,GAAL,GAAS,EAAvC,CAAA,IAA8C,CAAC,CAAC,QAAF,CAAW,kBAAX,EAA8B,IAAI,CAAC,IAAL,GAAU,EAAxC;YAD1B,CAAf;mBAGP,iBAAA,CAAkB,sBAAlB,EAAyC,sBAAzC,EAAgE,aAAhE,EAA8E,IAA9E;UAdQ;QAFV;MADF;IAHF,CADI;IAsBN,GAAG,CAAC,IAAJ,CAAS,eAAT,CAAyB,CAAC,MAA1B,CAAA;WACA,KAAK,CAAC,cAAN,CAAqB,QAAQ,CAAC,aAA9B,EAA4C,QAAA,CAAA,CAAA;aAC1C;QAAC,IAAA,EAAK,IAAN;QAAW,IAAA,EAAK;MAAhB;IAD0C,CAA5C,EAEC,GAAG,CAAC,IAAJ,CAAS,aAAT,CAAwB,CAAA,CAAA,CAFzB;EAxBqB;;EA6BvB,iBAAA,GAAoB,QAAA,CAAC,YAAD,EAAc,YAAd,EAA2B,IAA3B,EAAgC,IAAhC,CAAA;AAClB,QAAA,GAAA,EAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,IAAA,EAAA,KAAA,EAAA,CAAA,EAAA;IAAA,GAAA,GAAM,gBAAA,CAAA;IACN,IAAA,GAAO,CAAC,CAAC,MAAF,CAAS,IAAT,EAAc,QAAA,CAAC,IAAD,CAAA;aACnB,CAAC,CAAC,QAAF,CAAW,GAAX,EAAgB,IAAI,CAAC,EAAL,GAAQ,EAAxB,EADmB;IAAA,CAAd;IAGP,KAAA;;AAAqK;MAAA,KAAA,sCAAA;;sBAA5J;UAAC,EAAA,EAAI,MAAA,CAAO,CAAC,CAAC,EAAT,CAAL;UAAkB,KAAA,EAAO,cAAA,CAAe,CAAf,EAAiB,OAAO,CAAC,GAAR,CAAY,iBAAZ,CAAjB,CAAzB;UAA0E,cAAA,EAAgB,IAA1F;UAAgG,cAAA,EAAgB,IAAhH;UAAsH,KAAA,EAAO,eAAA,CAAgB,CAAhB,CAA7H;UAAiJ,OAAA,EAAQ;QAAzJ;MAA4J,CAAA;;;IACrK,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAA/C,CAAsD,KAAtD;IACA,GAAA,GAAM,gBAAA,CAAA;IACN,IAAA,GAAO,CAAC,CAAC,MAAF,CAAS,IAAT,EAAc,QAAA,CAAC,IAAD,CAAA;aACnB,CAAC,CAAC,QAAF,CAAW,GAAX,EAAgB,IAAI,CAAC,EAAL,GAAQ,EAAxB,EADmB;IAAA,CAAd;IAGP,KAAA;;AAA2H;MAAA,KAAA,sCAAA;;sBAAlH;UAAC,EAAA,EAAI,MAAA,CAAO,CAAC,CAAC,EAAT,CAAL;UAAmB,KAAA,EAAO,CAAC,CAAC,KAA5B;UAAmC,IAAA,EAAM,MAAA,CAAO,CAAC,CAAC,IAAT,CAAzC;UAAyD,EAAA,EAAI,MAAA,CAAO,CAAC,CAAC,GAAT,CAA7D;UAA4E,KAAA,EAAO,eAAA,CAAgB,CAAhB,CAAnF;UAAuG,OAAA,EAAQ;QAA/G;MAAkH,CAAA;;;IAC3H,MAAM,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAA/C,CAAsD,KAAtD;IACA,KAAA,uCAAA;;MACE,YAAY,CAAC,IAAb,CAAkB,IAAI,CAAC,EAAvB;IADF;IAEA,KAAA,yCAAA;;MACE,YAAY,CAAC,IAAb,CAAkB,IAAI,CAAC,EAAvB;IADF;WAEA,MAAM,CAAC,UAAU,CAAC,YAAlB,CAA+B;MAAE,KAAA,EAAO,YAAT;MAAuB,KAAA,EAAO;IAA9B,CAA/B;EAjBkB;;EAoBpB,qCAAA,GAAwC,QAAA,CAAA,CAAA;WACtC;EADsC;AA/nExC",
  "sourcesContent": [
    "Template.ResultsVis.rendered = ->\n  Session.set 'graphRenderingStatus','Rendering...'\n  Session.set('keyForNodeLabel', \"null\")\n  Session.set('useLabelPrefix', true)\n  window.setUpVis()\n  Session.set 'graphRenderingStatus','Rendering...'\n  graph = Session.get 'graphToShow'\n  Session.set 'renderStartTime', moment().toDate()\n  vn = new vis.DataSet(graph.nodes)\n  ve = new vis.DataSet(graph.edges)\n  window.visnetwork.setData {nodes: vn, edges: ve}\n  getLabelSets()\n  if (Session.get 'positions')\n    positions = Session.get 'positions'\n  else\n    positions = {}\n  for node in graph.nodes\n    oldLoc = positions[node.id]\n    if oldLoc\n      node.x = oldLoc.x\n      node.y = oldLoc.y\n      node.physics = false   # pin it\n  window.visnetwork.nodesHandler.body.data.nodes.update graph.nodes\n\n\n\n\n#---------------- Helpers --------------------------\n\nTemplate.ResultsVis.helpers\n  vertexPropertyNames: ->\n    Session.get 'vertexPropertyNames'\n  vertexPropertyName: ->\n    @\n  vertexLabels: ->\n    if window.visnetwork\n      getLabelSets()\n    Session.get 'vertexLabelSet'\n  vertexLabel: ->\n    @\n  visWidth: ->\n    if (Session.get \"visWidth\") then (Session.get \"visWidth\") else 'auto'\n  visHeight: ->\n    if (Session.get \"visHeight\") then (Session.get \"visHeight\") else '900px'\n\n#----------------- Functions -----------------------\n\nwindow.determineGraphToShow = ->\n  Session.set 'graphToShow', {nodes:[],edges:[]}\n  verts = verticesInside(Session.get 'scriptResult')\n  verts = _.uniq(verts,(item)->\n    return item.id)\n  edges = edgesInside(Session.get 'scriptResult')\n  vIDsInEdges = vertIDsInEdges(edges)\n  vIDsInResults = []\n  vIDsInResults = (v.id for v in verts)\n  missingVIDs = _.difference vIDsInEdges, vIDsInResults\n  if missingVIDs.length == 0\n    return setGraphToShow verts, edges\n  bindings = {vIDs: missingVIDs}\n  script = 'vIDs.collect{each-> g.V(each).next()}'\n  if (Session.get \"usingWebSockets\")\n    window.socketToJanus.onmessage = (msg) ->\n      endTime = Date.now()\n      data = msg.data\n      json = JSON.parse(data)\n      if json.status.code >= 500\n        alert \"Error in processing Gremlin script: \"+json.status.message\n      else\n        if json.status.code == 204\n          results = []\n        else\n          results = json.result.data\n        addVertsToGraphToShow(results)\n        addEdgesToGraphToShow edges\n        addVertsToGraphToShow verts\n        Session.set 'elementsInResults', {vertices: verts, edges: edges}\n    request =\n      requestId: uuid.new(),\n      op:\"eval\",\n      processor:\"\",\n      args:{gremlin: script, bindings: bindings, language: \"gremlin-groovy\"}\n    startTime = Date.now()\n    window.socketToJanus.send(JSON.stringify(request))\n  else\n    Meteor.call 'runScript', Session.get('userID'), Session.get('serverURL'),(Session.get 'tinkerPopVersion'), Session.get('graphName'),'Built-in Vertex Retriever', script, bindings, (error,result)->\n      addVertsToGraphToShow(result.results)\n      addEdgesToGraphToShow edges\n      addVertsToGraphToShow verts\n      Session.set 'elementsInResults', {vertices: verts, edges: edges}\n\nwindow.addVertsToGraphToShow = (verts)->\n  nodes = ({id: String(v.id),label: labelForVertex(v,Session.get 'keyForNodeLabel'), allowedToMoveX: true, allowedToMoveY: true, title: titleForElement(v), element:v} for v in verts)\n  if window.visnetwork\n    window.visnetwork.nodesHandler.body.data.nodes.update nodes\n  if (Session.get 'graphToShow') == undefined\n    Session.set 'graphToShow', {nodes:[],edges:[]}\n  gts = Session.get 'graphToShow'\n  gts.nodes=gts.nodes.concat nodes\n  Session.set 'graphToShow',gts\n  if gts.nodes.length + gts.edges.length > 0\n    Session.set 'graphFoundInResults', true\n  else\n    Session.set 'graphFoundInResults', false\n\nwindow.addEdgesToGraphToShow = (edges)->\n  edges = ({id: String(e.id), label: e.label, from: String(e.outV), to: String(e.inV), title: titleForElement(e), element:e} for e in edges)\n  if window.visnetwork\n    window.visnetwork.edgesHandler.body.data.edges.update edges\n  if (Session.get 'graphToShow') == undefined\n    Session.set 'graphToShow', {nodes:[],edges:[]}\n  gts = Session.get 'graphToShow'\n  #console.log 'before=',gts\n  gts.edges=gts.edges.concat edges\n  #console.log 'after=',gts\n  Session.set 'graphToShow',gts\n  if gts.edges.length + gts.edges.length > 0\n    Session.set 'graphFoundInResults', true\n  else\n    Session.set 'graphFoundInResults', false\n\n\nwindow.setGraphToShow = (verts, edges)->\n  keyForLabel = Session.get 'keyForNodeLabel'\n  nodes = ({id: String(v.id),label: labelForVertex(v,keyForLabel), allowedToMoveX: true, allowedToMoveY: true, title: titleForElement(v), element:v} for v in verts)\n  edges = ({id: String(e.id), label: e.label, from: String(e.outV), to: String(e.inV), title: titleForElement(e), element:e} for e in edges)\n  g = {nodes: nodes, edges: edges}\n  Session.set 'graphToShow',g\n  if g.nodes.length + g.edges.length > 0\n    Session.set 'graphFoundInResults', true\n  else\n    Session.set 'graphFoundInResults', false\n\nwindow.randomizeLayout = ()->\n  g = Session.get 'graphToShow'\n  for node in g.nodes\n    node.x=chance.floating({min:0,max:100})\n    node.y=chance.floating({min:0,max:100})\n  Session.set 'graphToShow', g\n\nverticesInside = (obj)->\n  verts = []\n  allObjectsInsideWithKeyValue verts, obj, 'type', 'vertex'\n  return verts\n\nedgesInside = (obj)->\n  edges = []\n  allObjectsInsideWithKeyValue edges,obj, 'type', 'edge'\n  return edges\n\nvertIDsInEdges = (edges)->\n  edgeVertIDs = []\n  edgeVertIDs.push edge.inV for edge in edges\n  edgeVertIDs.push edge.outV for edge in edges\n\n\n  return _.uniq(edgeVertIDs)\n\nallObjectsInsideWithKeyValue = (foundArray, obj, key, value)->\n  if (typeof obj == 'string') || (typeof obj == 'boolean') || (typeof obj == 'number') || (typeof obj == 'symbol') || (typeof obj == 'undefined') || ( obj == null)\n    return []\n  if Array.isArray(obj)  #its an array, recurse\n    allObjectsInsideWithKeyValue(foundArray,subObj,key,value) for subObj in obj\n  else   #its not an array, assume an object\n    if obj[key] && obj[key]==value\n      foundArray.push obj\n    else  #recurse deeper\n      allObjectsInsideWithKeyValue(foundArray,obj[okey],key,value) for okey in Object.keys(obj)\n  return []\n\n#********************* array splitter, used to be used to process batches of verts and edges due to GET length restrictions, no longer needed since moving to POST\nchunks = (array, size) ->\n  results = []\n  while (array.length)\n    results.push(array.splice(0, size))\n  return results\n\nretrieveVerticesForIDs = (ids, callback)->\n  if ids.length == 0\n    return\n  bindings = {vIDs: ids}\n  script = 'vIDs.collect{each-> g.V(each).next()}'\n  if (Session.get \"usingWebSockets\")\n    window.socketToJanus.onmessage = (msg) ->\n      endTime = Date.now()\n      data = msg.data\n      json = JSON.parse(data)\n      if json.status.code >= 500\n        alert \"Error in processing Gremlin script: \"+json.status.message\n      else\n        if json.status.code == 204\n          results = []\n        else\n          results = json.result.data\n        callback(results)\n    request =\n      requestId: uuid.new(),\n      op:\"eval\",\n      processor:\"\",\n      args:{gremlin: script, bindings: bindings, language: \"gremlin-groovy\"}\n    startTime = Date.now()\n    window.socketToJanus.send(JSON.stringify(request))\n  else\n    Meteor.call 'runScript', Session.get('userID'), Session.get('serverURL'),(Session.get 'tinkerPopVersion'), Session.get('graphName'),'Built-in Vertex Retriever', script, bindings, (error,result)->\n      callback(result.results)\n\n\ntitleForElement = (props)->\n#console.log props\n  userProps = userPropertiesForElement(props)\n  sortedKeys = _.sortBy(_.keys(userProps), (e)->\n    return e.toLocaleLowerCase()\n  )\n  html = '<div  class=\"vis-element-popup\">'\n  html = html + '<table style=\"width:200\">'\n  html = html+'<tr><th>'+props.type+': </th><th>'+props.id+'</th><tr>'\n  html = html+'<tr><td>label: </td><td>'+props.label+'</td><tr>'\n  for key in sortedKeys\n    value = userProps[key]\n    tr = '<tr><td>'+key+': </td><td>'+value+'</td></tr>'\n    html = html + tr\n  html = html + '</table>'\n  html = html + '</div>'\n  return html\n\npopupDialogForElement = (localElement, elementType)->\n  props = localElement.element\n  userProps = userPropertiesForElement(props)\n  sortedKeys = _.sortBy(_.keys(userProps), (e)->\n    return e.toLocaleLowerCase()\n  )\n  id = props.id\n  html = '<div  class=\"vis-element-popup\">'\n  html = html + '<table style=\"width:100%\" class=\"propTableForElementID'+id+'\" name=\"'+elementType+'\">'\n  addPropButton = '<a href=\"#\" class=\"btn btn-default\" id=\"'+id+'\" title=\"Add property\"><span class=\"glyphicon glyphicon-plus element-addProperty'+id+'\"></span></a>'\n  if elementType == 'vertex'\n    cloneButton = '<a href=\"#\" class=\"btn btn-default\" id=\"'+id+'\" title=\"Clone this Vertex\"><span class=\"clone-vertex'+id+'\">Clone</span></a>'\n  else\n    cloneButton = '<a href=\"#\" class=\"btn btn-default\" id=\"'+id+'\" title=\"Clone this Edge\"><span class=\"clone-edge'+id+'\">Clone</span></a>'\n  deletePropButton = '<a href=\"#\" class=\"btn btn-default\" title=\"Delete property\"><span class=\"glyphicon glyphicon-minus element-deleteProperty'+id+'\"></span></a>'\n  copyPropButton = '<a href=\"#\" class=\"btn btn-default\" title=\"Copy property\"><span class=\"glyphicon glyphicon-copy element-copyProperty'+id+'\"></span></a>'\n  pastePropButton = '<a href=\"#\" class=\"btn btn-default\" title=\"Paste property\"><span class=\"glyphicon glyphicon-paste element-pasteProperty'+id+'\"></span></a>'\n  logButton = '<a href=\"#\" class=\"btn btn-default\" title=\"console.log the element\"><span class=\"glyphicon glyphicon-share element-log'+id+'\"></span></a>'\n  pinItButton = '<input type=\"checkbox\" class=\"vis-options-checkbox\" id=\"pinItCheckBoxForId'+id+'\" value=\"'+localElement.allowedToMoveX+'\" onclick=\"pinVertex(\\''+id+'\\',this.value)\"><span class=\"glyphicon glyphicon-pushpin\"></span></a>'\n  html = html+'<tr><th>Property:  </th><th>Value</th><th style=\"width:50\">'+addPropButton+pastePropButton+logButton+'</th><tr>'\n  tr = '<tr><td>id:  </td><td>'+id+'</td><td style=\"width:50\">'+pinItButton+'</td><tr>'\n  html = html + tr\n  tr = '<tr><td>label:  </td><td>'+props.label+'</td><th style=\"width:50\" id=\"'+id+'\" value=\"'+elementType+'\" name=\"'+key+'\">'+cloneButton+'</th></tr>'\n  html = html + tr\n  for key in sortedKeys\n    value = userProps[key]\n    tr = '<tr><td>'+key+':  </td><td><input type=\"text\" class=\"propForElementID'+id+'\" name='+key+' value=\"'+value+'\" oninput=\"$(\\'.commitButtonForElementID'+id+'\\').show()\"></td><th style=\"width:50\" id=\"'+id+'\" value=\"'+elementType+'\" name=\"'+key+'\">'+deletePropButton+copyPropButton+'</th></tr>'\n    html = html + tr\n  html = html + '</table>'\n  html = html + '<button type=\"button\" style=\"display: none\" class=\"commitButtonForElementID'+id+'\" onclick=\"updateElementProps(\\''+id+'\\',\\''+elementType+'\\')\">Commit changes</button>'\n  html = html + '</div>'\n  return html\n\n\nwindow.pinVertex = (id, value)->\n  node = clientElement = window.visnetwork.nodesHandler.body.data.nodes._data[id]\n  state = $('#pinItCheckBoxForId'+node.id).first().is(':checked')\n  nds = window.visnetwork.nodesHandler.body.data.nodes.getDataSet()\n  nds.update({id:node.id, physics: not state})\n\nwindow.updateElementProps = (id,elementType)->\n  if elementType == 'vertex'\n    clientElement = window.visnetwork.nodesHandler.body.data.nodes._data[id]\n  else\n    clientElement = window.visnetwork.edgesHandler.body.data.edges._data[id]\n  props = {}\n  originalProps = userPropertiesForElement(clientElement.element)\n  $('.propForElementID'+id).each ()->\n    props[$(this).attr(\"name\")] = $(this).val()\n  window.updatePropsForElement(elementType,id,props,originalProps)\n\nwindow.updatePropsForElement = (elementType, id, newProps, oldProps) ->\n  $('.commitButtonForElementID'+id).hide()\n  keys2Delete = []\n  for key in _.keys(oldProps)\n    if newProps[key] == undefined\n      keys2Delete.push(key)\n  if elementType == 'vertex'\n    clientElement = window.visnetwork.nodesHandler.body.data.nodes._data[id]\n  else\n    clientElement = window.visnetwork.edgesHandler.body.data.edges._data[id]\n  script = ''\n  if keys2Delete.length > 0\n    #$(\".propTableForElementID\"+id).parent().parent().parent().height($(\".propTableForElementID\"+id).parent().parent().parent().height()-28)\n    if elementType == \"vertex\"\n      script = script + 'keys2Delete.each { g.V(vID).properties(it).drop()}'\n    else\n      script = script + 'keys2Delete.each { g.E(vID).properties(it).drop()}'\n    bindings = {keys2Delete: keys2Delete, vID: id}\n    if (Session.get \"usingWebSockets\")\n      window.socketToJanus.onmessage = (msg) ->\n        endTime = Date.now()\n        console.log msg\n        data = msg.data\n        json = JSON.parse(data)\n        if json.status.code >= 500\n          alert \"Error in processing Gremlin script: \"+json.status.message\n        else\n          if json.status.code == 204\n            results = []\n          else\n            results = json.result.data\n          for key2Delete in keys2Delete\n            clientElement.element.properties = _.omit clientElement.element.properties, key2Delete\n            clientElement.title = titleForElement(clientElement.element)\n            if elementType == 'vertex'\n              window.visnetwork.nodesHandler.body.data.nodes.update [clientElement], []\n            else\n              window.visnetwork.edgesHandler.body.data.edges.update [clientElement], []\n      #set up request\n      request =\n        requestId: uuid.new(),\n        op:\"eval\",\n        processor:\"\",\n        args:{gremlin: script, bindings: bindings, language: \"gremlin-groovy\"}\n      startTime = Date.now()\n      window.socketToJanus.send(JSON.stringify(request))\n    else\n      Meteor.call 'runScript', Session.get('userID'), Session.get('serverURL'),(Session.get 'tinkerPopVersion'), Session.get('graphName'),'Built-in property remover', script, bindings,(error,result)->\n        if result.success == true\n          for key2Delete in keys2Delete\n            clientElement.element.properties = _.omit clientElement.element.properties, key2Delete\n            clientElement.title = titleForElement(clientElement.element)\n            if elementType == 'vertex'\n              window.visnetwork.nodesHandler.body.data.nodes.update [clientElement], []\n            else\n              window.visnetwork.edgesHandler.body.data.edges.update [clientElement], []\n        else\n          alert \"Graph update failed.  Nothing changed.  Maybe try again?\"\n  changedProps = {}\n  for key in _.keys(newProps)\n    if oldProps[key] == undefined\n      changedProps[key] = newProps[key]\n    else\n      if newProps[key].toString() != oldProps[key].toString()\n        changedProps[key] = newProps[key]\n  if not $.isEmptyObject(changedProps)\n    if elementType == 'vertex'\n      script = 'v=g.V('+id+').next();'\n    else\n      script = 'v=g.E(\"'+id+'\").next();'\n    for key in _.keys(changedProps)\n      script = script + 'v.property(\"'+key+'\",\"'+changedProps[key]+'\");'\n    script = script + 'v '\n    if (Session.get \"usingWebSockets\")\n      window.socketToJanus.onmessage = (msg) ->\n        endTime = Date.now()\n        data = msg.data\n        json = JSON.parse(data)\n        if json.status.code >= 500\n          alert \"Error in processing Gremlin script: \"+json.status.message\n        else\n          if json.status.code == 204\n            results = []\n          else\n            results = json.result.data\n          if elementType == 'vertex'\n            clientElement = window.visnetwork.nodesHandler.body.data.nodes._data[id]\n          else\n            clientElement = window.visnetwork.edgesHandler.body.data.edges._data[id]\n          clientElement.element = results[0]\n          clientElement.title = titleForElement(clientElement.element)\n          #console.log \"clientElement=\",clientElement\n          delete clientElement.x\n          delete clientElement.y\n          if elementType == 'vertex'\n            window.visnetwork.nodesHandler.body.data.nodes.update [clientElement], []\n          else\n            window.visnetwork.edgesHandler.body.data.edges.update [clientElement], []\n          getLabelSets()\n      request =\n        requestId: uuid.new(),\n        op:\"eval\",\n        processor:\"\",\n        args:{gremlin: script, bindings: {}, language: \"gremlin-groovy\"}\n      startTime = Date.now()\n      window.socketToJanus.send(JSON.stringify(request))\n    else\n      Meteor.call 'runScript', Session.get('userID'), Session.get('serverURL'),(Session.get 'tinkerPopVersion'), Session.get('graphName'),'Built-in property updater', script, (error,result)->\n        if result.success == true\n          if elementType == 'vertex'\n            clientElement = window.visnetwork.nodesHandler.body.data.nodes._data[id]\n          else\n            clientElement = window.visnetwork.edgesHandler.body.data.edges._data[id]\n          clientElement.element = result.results[0]\n          clientElement.title = titleForElement(clientElement.element)\n          #console.log \"clientElement=\",clientElement\n          delete clientElement.x\n          delete clientElement.y\n          if elementType == 'vertex'\n            window.visnetwork.nodesHandler.body.data.nodes.update [clientElement], []\n          else\n            window.visnetwork.edgesHandler.body.data.edges.update [clientElement], []\n          getLabelSets()\n        else\n          alert \"Graph update failed.  Nothing changed.  Maybe try again?\"\n\ngetLabelSets = () ->\n  nodes = _.values(window.visnetwork.nodesHandler.body.data.nodes._data)\n  edges = _.values(window.visnetwork.edgesHandler.body.data.edges._data)\n  nodeLabels = _.uniq(node.element.label for node in nodes)\n  edgeLabels = _.uniq(edge.element.label for edge in edges)\n  nodePropKeys = []\n  edgePropKeys = []\n  for node in nodes\n    if node.element.properties\n      nodePropKeys = _.union(nodePropKeys,_.keys(node.element.properties))\n  for edge in edges\n    if edge.element.properties\n      edgePropKeys = _.union(edgePropKeys,_.keys(edge.element.properties))\n  sorted = _.sortBy(nodeLabels, (it)->\n    it\n  )\n  Session.set('vertexLabelSet',sorted)\n  sorted = _.sortBy(edgeLabels, (it)->\n    it\n  )\n  Session.set 'edgeLabelSet',sorted\n  sorted = _.sortBy(_.union(nodePropKeys,edgePropKeys), (it)->\n    it\n  )\n  Session.set('vertexPropertyNames',sorted)\n\n\nwindow.updateVertexLabelBootBox = (ctxt) ->\n  $('input.bootbox-input.bootbox-input-text.form-control')[0].value = ctxt.value\n\n\naddVertToGraph = (nodeData, callback) ->\n#nodeData is the vis.js object for its newly created node on the client\n  keyForLabel = Session.get 'keyForNodeLabel'\n  labels = Session.get 'vertexLabelSet'\n  labelSelectorHTML = '<select onchange=\"window.updateVertexLabelBootBox(this)\">'\n  optionHTML = '<option>Select a vertex label</option>'\n  labelSelectorHTML = labelSelectorHTML + optionHTML\n  for label in labels\n    do(label)->\n      optionHTML = '<option>'+label+'</option>'\n      labelSelectorHTML = labelSelectorHTML + optionHTML\n  labelSelectorHTML = labelSelectorHTML + '</select>'\n  label = \"\"\n  bootbox.prompt(\"<p>Enter the label for this new vertex or choose one of these \"+labelSelectorHTML+\"</p><p>Vertex labels are immutable (can't be changed), so choose wisely.</p>\", (result)->\n    label = result\n    if label == null || label == \"\"\n#alert \"Vetices must have labels, adding vertex aborted\"\n      callback(null)\n      return\n    script = 'g.addV(\"'+label+'\")'\n    if (Session.get \"usingWebSockets\")\n      window.socketToJanus.onmessage = (msg) ->\n        endTime = Date.now()\n        data = msg.data\n        json = JSON.parse(data)\n        if json.status.code >= 500\n          alert \"Error in processing Gremlin script: \"+json.status.message\n        else\n          if json.status.code == 204\n            results = []\n            nodeData = []\n          else\n            results = json.result.data\n            v = results[0]\n            if (Session.get 'tinkerPopVersion') == '3'\n              nodeData.id = String(v.id)\n            else\n              nodeData.id = String(v._id)\n            nodeData.label = labelForVertex(v,keyForLabel)\n            nodeData.allowedToMoveX = true\n            nodeData.allowedToMoveY = true\n            nodeData.title = titleForElement(v)\n            nodeData.element = v\n            nodeData.physics = false   # start out pinned\n            #console.log nodeData,v\n          getLabelSets()\n          callback(nodeData)\n      request =\n        requestId: uuid.new(),\n        op:\"eval\",\n        processor:\"\",\n        args:{gremlin: script, bindings: {}, language: \"gremlin-groovy\"}\n      startTime = Date.now()\n      window.socketToJanus.send(JSON.stringify(request))\n    else\n      Meteor.call 'runScript', Session.get('userID'), Session.get('serverURL'),(Session.get 'tinkerPopVersion'), Session.get('graphName'),'Built-in property updater', script, (error,result)->\n        if result.success == true\n          v = result.results[0]\n          if (Session.get 'tinkerPopVersion') == '3'\n            nodeData.id = String(v.id)\n          else\n            nodeData.id = String(v._id)\n          nodeData.label = labelForVertex(v,keyForLabel)\n          nodeData.allowedToMoveX = true\n          nodeData.allowedToMoveY = true\n          nodeData.title = titleForElement(v)\n          nodeData.element = v\n          nodeData.physics = false   # start out pinned\n          #console.log nodeData,v\n          getLabelSets()\n          callback(nodeData)\n        else\n          alert \"Graph update failed.  Nothing changed\"\n  )\n\ncloneVertToGraph = (id) ->\n#id is the tinkerpop id for the vertex to be cloned\n  node2Clone = window.visnetwork.body.data.nodes._data[id]\n  vertex2Clone = node2Clone.element\n  script = 'g.addV(\"'+vertex2Clone.label+'\")'\n  v2c = _.clone(vertex2Clone)\n  delete v2c.type\n  delete v2c.label\n  delete v2c.id\n  for key in Object.keys(v2c.properties)\n    script = script + '.property(\"'+key+'\",\"'+v2c.properties[key][0].value+'\")'\n  if (Session.get \"usingWebSockets\")\n    window.socketToJanus.onmessage = (msg) ->\n      endTime = Date.now()\n      data = msg.data\n      json = JSON.parse(data)\n      if json.status.code >= 500\n        alert \"Error in processing Gremlin script: \"+json.status.message\n      else\n        results = json.result.data\n        v = results[0]\n        newNode = {id: String(v.id),label: labelForVertex(v,Session.get('keyForNodeLabel')),allowedToMoveX: true, allowedToMoveY: true, title: titleForElement(v), element:v}\n        window.visnetwork.nodesHandler.body.data.nodes.add newNode\n        oldLoc = (window.visnetwork.getPositions([node2Clone.id]))[node2Clone.id]\n        window.visnetwork.moveNode(newNode.id,oldLoc.x + 50,oldLoc.y + 50)\n        window.visnetwork.setSelection({nodes: [newNode.id], edges: []},{unselectedAll: false, highlightEdges: false})\n    request =\n      requestId: uuid.new(),\n      op:\"eval\",\n      processor:\"\",\n      args:{gremlin: script, bindings: {}, language: \"gremlin-groovy\"}\n    startTime = Date.now()\n    window.socketToJanus.send(JSON.stringify(request))\n  else\n    Meteor.call 'runScript', Session.get('userID'), Session.get('serverURL'),(Session.get 'tinkerPopVersion'), Session.get('graphName'),'Vertex cloner', script, (error,result)->\n      if result.success == true\n        v = result.results[0]\n        newNode = {id: String(v.id),label: labelForVertex(v,Session.get('keyForNodeLabel')),allowedToMoveX: true, allowedToMoveY: true, title: titleForElement(v), element:v}\n        window.visnetwork.nodesHandler.body.data.nodes.add newNode\n        oldLoc = (window.visnetwork.getPositions([node2Clone.id]))[node2Clone.id]\n        window.visnetwork.moveNode(newNode.id,oldLoc.x + 50,oldLoc.y + 50)\n        window.visnetwork.setSelection({nodes: [newNode.id], edges: []},{unselectedAll: false, highlightEdges: false})\n      else\n        alert \"Graph update failed.  Nothing changed: \"+script\n\n#-------------for use from Context UI-----------------------\ninvertSelections = ()->\n#swap unselected with selected\n  allNodes = (node.id for node in window.visnetwork.nodesHandler.body.data.nodes.get())\n  allEdges = (edge.id for edge in window.visnetwork.nodesHandler.body.data.edges.get())\n  selections = window.visnetwork.getSelection()\n  selectedNodes = selections.nodes\n  selectedEdges = selections.edges\n  nodes2Select = _.difference(allNodes,selectedNodes)\n  edges2Select = _.difference(allEdges,selectedEdges)\n  window.visnetwork.setSelection({nodes: nodes2Select, edges: edges2Select})\n\nselectAll = ()->\n#select all local nodes and edges\n  nodes2Select = (node.id for node in window.visnetwork.nodesHandler.body.data.nodes.get())\n  edges2Select = (edge.id for edge in window.visnetwork.nodesHandler.body.data.edges.get())\n  window.visnetwork.setSelection({nodes: nodes2Select, edges: edges2Select},{unselectedAll: true, highlightEdges: false})\n\nselectNone = ()->\n#deselect all local element\n  window.visnetwork.unselectAll()\n\npinSelections = ()->\n  elementIDs = window.visnetwork.getSelection()\n  nds = window.visnetwork.nodesHandler.body.data.nodes.getDataSet()\n  eds = window.visnetwork.edgesHandler.body.data.edges.getDataSet()\n  for nodeID in elementIDs.nodes\n    nds.update({id:nodeID, physics: false})\n  #for edgeID in elementIDs.edges\n  #  eds.update({id:edgeID, physics: false})\n\nunpinSelections = ()->\n  elementIDs = window.visnetwork.getSelection()\n  nds = window.visnetwork.nodesHandler.body.data.nodes.getDataSet()\n  eds = window.visnetwork.edgesHandler.body.data.edges.getDataSet()\n  for nodeID in elementIDs.nodes\n    nds.update({id:nodeID, physics: true})\n  #for edgeID in elementIDs.edges\n  #  eds.update({id:edgeID, physics: true})\n\ninspectSelections = ()->\n  elementIDs = window.visnetwork.getSelection()\n  for nodeID in elementIDs.nodes\n    elementType = 'vertex'\n    element = window.visnetwork.nodesHandler.body.data.nodes.get(nodeID)\n    window.popupPropertyEditor(element, elementType)\n  for edgeID in elementIDs.edges\n    elementType = 'edge'\n    element = window.visnetwork.edgesHandler.body.data.edges.get(edgeID)\n    window.popupPropertyEditor(element, elementType)\n\nshareGremlinCodeForIngestion  = ()->\n  script = scriptForGeneralIngestionFindOrCreate()\n  wnd = window.open(\"\", \"\", \"_blank\")\n  title = \"<title>Gremlin code to use with JSON bindings to programmatically add elements</title>\"\n  wnd.document.write(title+\"<pre><code>\"+script+\"</code></pre>\")\n\ninputGremlinCodeForIngestion  = ()->\n  bindings = JSON.parse prompt('Paste bindings JSON here')\n  console.log bindings\n  addElementsFromBindingsJSON(bindings)\n\ngenerateJSONBindingsForSelections  = ()->\n  elementIDs = window.visnetwork.getSelection()\n  vertsJSON = []\n  styles = {}\n  for nodeID in elementIDs.nodes\n    node = window.visnetwork.nodesHandler.body.data.nodes.get(nodeID)\n    vertsJSON.push node.element\n    styles[nodeID] = _.omit(node, ['element','id','x','y','label','physics','allowedToMoveX','allowedToMoveY','title'])\n  edgesJSON = []\n  for edgeID in elementIDs.edges\n    edge = window.visnetwork.edgesHandler.body.data.edges.get(edgeID)\n    edgesJSON.push edge.element\n    styles[edgeID] = _.omit(edge, ['element','id','from','to','label','title'])\n\n  bindings =\n    \"verts2FindOrCreate\": []\n    \"vertsJSON\": vertsJSON\n    \"edgesJSON\": edgesJSON\n    \"transactionContext\": \"ingesting a subgraph\",\n    \"locations\":window.visnetwork.getPositions(elementIDs.nodes)\n    \"styles\": styles\n  ###\n    link = document.createElement('a')\n    link.download = 'bindings-for-tinkertools-selections.json'\n    blob = new Blob([JSON.stringify(bindings, null, 2)], {type: 'text/plain'})\n    link.href = window.URL.createObjectURL(blob)\n    link.click()\n  ###\n  wnd = window.open(\"\", \"\", \"_blank\")\n  title = \"<title>JSON bindings for selected graph elements</title>\"\n  wnd.document.write(title+\"<pre><code>\"+JSON.stringify(bindings, null, 2)+\"</code></pre>\")\n\n\nspawnToQuikVis = () ->\n  allNodes = window.visnetwork.getSelectedNodes()\n  allEdges = window.visnetwork.getSelectedEdges()\n  positions = window.visnetwork.getPositions(allNodes)\n  spawnTheseToQuikVis(\"selections\",allNodes,allEdges,positions)\n\nspawnTheseToQuikVis = (subtitle, allNodes,allEdges, positions) ->\n  script = \"vertIDs = \"+JSON.stringify(allNodes)+\"\\n\"\n  script = script + \"edgeIDs = \"+JSON.stringify(allEdges)+\"\\n\"\n  script = script + \"if (vertIDs != []) {vs = g.V(vertIDs).toList()}else{vs=[]}\"+\"\\n\"\n  script = script + \"if (edgeIDs != []) {es = g.E(edgeIDs).toList()}else{es=[]}\"+\"\\n\"\n  script = script + \"[vs,es]\"+\"\\n\"\n  tinkertoolsServerURL = (Meteor.absoluteUrl()).slice(0,-1)\n  if (tinkertoolsServerURL.slice(-5) == ':3000')\n  else\n    tinkertoolsServerURL = tinkertoolsServerURL + ':3000'\n  url = tinkertoolsServerURL+\"/quikvis?serverURL=\"+Session.get('serverURL')\n  url = url + '&width=\"auto\"'\n  url = url + '&height=\"1000px\"'\n  url = url + \"&graphName=the default graph\"\n  url = url + \"&scripts=\"\n  specs = JSON.stringify([{title:'Show elements',script: script}])\n  url = url + encodeURIComponent(specs)\n  url = url + \"&positions=\"+JSON.stringify(positions)\n  wnd = window.open(\"\", \"\", \"_blank\")\n  title = \"<title>Spawned \"+subtitle+\" from Server: \"+(Session.get 'serverURL')+\"</title>\"\n  wnd.document.write(title+\"<div></div><h4>From Server: \"+(Session.get 'serverURL')+\"  Script used</h4><textarea rows='1' cols='150'>\"+script+\"</textarea></div><iframe width='100%' height='100%' src='\"+url+\"'>\")\n\nspawnAllToQuikVis = () ->\n  allNodes = (node.id for node in window.visnetwork.nodesHandler.body.data.nodes.getDataSet().get())\n  allEdges = (edge.id for edge in window.visnetwork.edgesHandler.body.data.edges.getDataSet().get())\n  positions = window.visnetwork.getPositions(allNodes)\n  spawnTheseToQuikVis(\"graph\",allNodes,allEdges,positions)\n\n\ninspectNone = ()->\n  $(\".ui-dialog\").detach()\n\nhideSelections1 = ()->\n  elementIDs = window.visnetwork.getSelection()\n  nodes2Hide = window.visnetwork.body.data.nodes.getDataSet().get(elementIDs.nodes)\n  edges2Hide = window.visnetwork.body.data.edges.getDataSet().get(elementIDs.edges)\n  window.hidden1 = if window.hidden1 then window.hidden1 else {nodes:[],edges:[], positions:{}}\n  #pin nodes\n  for node in nodes2Hide\n    node.physics = false\n  #unpin edges\n  for edge in edges2Hide\n    edge.physics = true\n  window.hidden1.nodes = _.union window.hidden1.nodes, nodes2Hide\n  window.hidden1.edges = _.union window.hidden1.edges, edges2Hide\n  window.hidden1.positions = _.extend window.hidden1.positions, window.visnetwork.getPositions(elementIDs.nodes)\n  window.visnetwork.body.data.edges.getDataSet().remove(elementIDs.edges)\n  window.visnetwork.body.data.nodes.getDataSet().remove(elementIDs.nodes)\n  window.visnetwork.setSelection({ nodes: [], edges: []})\n  $(\".context-hideSelections1\").text(\"\"+window.hidden1.nodes.length+\"v,\"+window.hidden1.edges.length+\"e\")\n\nunhideSelections1 = ()->\n  window.hidden1 = if window.hidden1 then window.hidden1 else {nodes:[],edges:[], positions:{}}\n  window.visnetwork.body.data.nodes.getDataSet().add window.hidden1.nodes\n  window.visnetwork.body.data.edges.getDataSet().add window.hidden1.edges\n  window.visnetwork.setSelection({ nodes: (each.id for each in window.hidden1.nodes), edges: (each.id for each in window.hidden1.edges)})\n  for node in window.hidden1.nodes\n    oldLoc = window.hidden1.positions[node.id]\n    window.visnetwork.moveNode(node.id,oldLoc.x,oldLoc.y)\n  window.hidden1 = {nodes:[],edges:[], positions:{}}\n  $(\".context-hideSelections1\").text(\"Hide1\")\nwindow.hidden1 = {nodes:[],edges:[], positions:{}}\n\nspawnHidden1 = ()->\n  hiddenNodes = (each.id for each in window.hidden1.nodes)\n  hiddenEdges = (each.id for each in window.hidden1.edges)\n  spawnTheseToQuikVis(\"contents of hidden buffer 1\", hiddenNodes,hiddenEdges,window.hidden1.positions)\n\n\nhideSelections2 = ()->\n  elementIDs = window.visnetwork.getSelection()\n  nodes2Hide = window.visnetwork.body.data.nodes.getDataSet().get(elementIDs.nodes)\n  edges2Hide = window.visnetwork.body.data.edges.getDataSet().get(elementIDs.edges)\n  window.hidden2 = if window.hidden2 then window.hidden2 else {nodes:[],edges:[], positions:{}}\n  #pin nodes\n  for node in nodes2Hide\n    node.physics = false\n  #unpin edges\n  for edge in edges2Hide\n    edge.physics = true\n  window.hidden2.nodes = _.union window.hidden2.nodes, nodes2Hide\n  window.hidden2.edges = _.union window.hidden2.edges, edges2Hide\n  window.hidden2.positions = _.extend window.hidden2.positions, window.visnetwork.getPositions(elementIDs.nodes)\n  window.visnetwork.body.data.edges.getDataSet().remove(elementIDs.edges)\n  window.visnetwork.body.data.nodes.getDataSet().remove(elementIDs.nodes)\n  window.visnetwork.setSelection({ nodes: [], edges: []})\n  $(\".context-hideSelections2\").text(\"\"+window.hidden2.nodes.length+\"v,\"+window.hidden2.edges.length+\"e\")\n\nunhideSelections2 = ()->\n  window.hidden2 = if window.hidden2 then window.hidden2 else {nodes:[],edges:[], positions:{}}\n  window.visnetwork.body.data.nodes.getDataSet().add window.hidden2.nodes\n  window.visnetwork.body.data.edges.getDataSet().add window.hidden2.edges\n  window.visnetwork.setSelection({ nodes: (each.id for each in window.hidden2.nodes), edges: (each.id for each in window.hidden2.edges)})\n  for node in window.hidden2.nodes\n    oldLoc = window.hidden2.positions[node.id]\n    window.visnetwork.moveNode(node.id,oldLoc.x,oldLoc.y)\n  window.hidden2 = {nodes:[],edges:[], positions:{}}\n  $(\".context-hideSelections2\").text(\"Hide2\")\nwindow.hidden2 = {nodes:[],edges:[], positions:{}}\n\nspawnHidden2 = ()->\n  hiddenNodes = (each.id for each in window.hidden2.nodes)\n  hiddenEdges = (each.id for each in window.hidden2.edges)\n  spawnTheseToQuikVis(\"contents of hidden buffer 2\", hiddenNodes,hiddenEdges,window.hidden2.positions)\n\nhideSelections3 = ()->\n  elementIDs = window.visnetwork.getSelection()\n  nodes2Hide = window.visnetwork.body.data.nodes.getDataSet().get(elementIDs.nodes)\n  edges2Hide = window.visnetwork.body.data.edges.getDataSet().get(elementIDs.edges)\n  window.hidden3 = if window.hidden3 then window.hidden3 else {nodes:[],edges:[], positions:{}}\n  #pin nodes\n  for node in nodes2Hide\n    node.physics = false\n  #unpin edges\n  for edge in edges2Hide\n    edge.physics = true\n  window.hidden3.nodes = _.union window.hidden3.nodes, nodes2Hide\n  window.hidden3.edges = _.union window.hidden3.edges, edges2Hide\n  window.hidden3.positions = _.extend window.hidden3.positions, window.visnetwork.getPositions(elementIDs.nodes)\n  window.visnetwork.body.data.edges.getDataSet().remove(elementIDs.edges)\n  window.visnetwork.body.data.nodes.getDataSet().remove(elementIDs.nodes)\n  window.visnetwork.setSelection({ nodes: [], edges: []})\n  $(\".context-hideSelections3\").text(\"\"+window.hidden3.nodes.length+\"v,\"+window.hidden3.edges.length+\"e\")\n\nunhideSelections3 = ()->\n  window.hidden3 = if window.hidden3 then window.hidden3 else {nodes:[],edges:[], positions:{}}\n  window.visnetwork.body.data.nodes.getDataSet().add window.hidden3.nodes\n  window.visnetwork.body.data.edges.getDataSet().add window.hidden3.edges\n  window.visnetwork.setSelection({ nodes: (each.id for each in window.hidden3.nodes), edges: (each.id for each in window.hidden3.edges)})\n  for node in window.hidden3.nodes\n    oldLoc = window.hidden3.positions[node.id]\n    window.visnetwork.moveNode(node.id,oldLoc.x,oldLoc.y)\n  window.hidden3 = {nodes:[],edges:[], positions:{}}\n  $(\".context-hideSelections3\").text(\"Hide3\")\nwindow.hidden3 = {nodes:[],edges:[], positions:{}}\n\nspawnHidden3 = ()->\n  hiddenNodes = (each.id for each in window.hidden3.nodes)\n  hiddenEdges = (each.id for each in window.hidden3.edges)\n  spawnTheseToQuikVis(\"contents of hidden buffer 3\", hiddenNodes,hiddenEdges,window.hidden3.positions)\n\nhideSelections4 = ()->\n  elementIDs = window.visnetwork.getSelection()\n  nodes2Hide = window.visnetwork.body.data.nodes.getDataSet().get(elementIDs.nodes)\n  edges2Hide = window.visnetwork.body.data.edges.getDataSet().get(elementIDs.edges)\n  window.hidden4 = if window.hidden4 then window.hidden4 else {nodes:[],edges:[], positions:{}}\n  #pin nodes\n  for node in nodes2Hide\n    node.physics = false\n  #unpin edges\n  for edge in edges2Hide\n    edge.physics = true\n  window.hidden4.nodes = _.union window.hidden4.nodes, nodes2Hide\n  window.hidden4.edges = _.union window.hidden4.edges, edges2Hide\n  window.hidden4.positions = _.extend window.hidden4.positions, window.visnetwork.getPositions(elementIDs.nodes)\n  window.visnetwork.body.data.edges.getDataSet().remove(elementIDs.edges)\n  window.visnetwork.body.data.nodes.getDataSet().remove(elementIDs.nodes)\n  window.visnetwork.setSelection({ nodes: [], edges: []})\n  $(\".context-hideSelections4\").text(\"\"+window.hidden4.nodes.length+\"v,\"+window.hidden4.edges.length+\"e\")\n\nunhideSelections4 = ()->\n  window.hidden4 = if window.hidden4 then window.hidden4 else {nodes:[],edges:[], positions:{}}\n  window.visnetwork.body.data.nodes.getDataSet().add window.hidden4.nodes\n  window.visnetwork.body.data.edges.getDataSet().add window.hidden4.edges\n  window.visnetwork.setSelection({ nodes: (each.id for each in window.hidden4.nodes), edges: (each.id for each in window.hidden4.edges)})\n  for node in window.hidden4.nodes\n    oldLoc = window.hidden4.positions[node.id]\n    window.visnetwork.moveNode(node.id,oldLoc.x,oldLoc.y)\n  window.hidden4 = {nodes:[],edges:[], positions:{}}\n  $(\".context-hideSelections4\").text(\"Hide4\")\nwindow.hidden4 = {nodes:[],edges:[], positions:{}}\n\nspawnHidden4 = ()->\n  hiddenNodes = (each.id for each in window.hidden4.nodes)\n  hiddenEdges = (each.id for each in window.hidden4.edges)\n  spawnTheseToQuikVis(\"contents of hidden buffer 4\", hiddenNodes,hiddenEdges,window.hidden4.positions)\n\n\nallHiddenNodeIDs = ()->\n  (each.id for each in (window.hidden1.nodes.concat(window.hidden2.nodes,window.hidden3.nodes,window.hidden4.nodes)))\n\nallHiddenEdgeIDs = ()->\n  (each.id for each in (window.hidden1.edges.concat(window.hidden2.edges,window.hidden3.edges,window.hidden4.edges)))\n\ndropSelections = ()->\n  elementIDs = window.visnetwork.getSelection()\n  nodes2Hide = window.visnetwork.body.data.nodes.getDataSet().get(elementIDs.nodes)\n  edges2Hide = window.visnetwork.body.data.edges.getDataSet().get(elementIDs.edges)\n  window.visnetwork.body.data.edges.getDataSet().remove(elementIDs.edges)\n  window.visnetwork.body.data.nodes.getDataSet().remove(elementIDs.nodes)\n\n\ngrowSelections = ()->\n#grow means add neighboring vertices and their edges from the database into the local render\n  elementIDs = window.visnetwork.getSelection()\n  if elementIDs.nodes.length > 0\n    bindings = {vIDs: elementIDs.nodes}\n    nl = \"\\n\"\n    script = \"//answer all neighbors to these node IDs, vIDs is a binding\" + nl +\n      \"inVs = vIDs.collect { g.V(it).in().toList() }\" + nl +\n      \"inVs = inVs.flatten().unique()\" + nl +\n      \"outVs = vIDs.collect { g.V(it).out().toList() }\" + nl +\n      \"outVs = outVs.flatten().unique()\" + nl +\n      \"inEs = vIDs.collect { g.V(it).inE().toList() }\" + nl +\n      \"inEs = inEs.flatten().unique()\" + nl +\n      \"outEs = vIDs.collect { g.V(it).outE().toList() }\" + nl +\n      \"outEs = outEs.flatten().unique()\" + nl +\n      \"[inVs,outVs,inEs,outEs]\"\n    if (Session.get \"usingWebSockets\")\n      window.socketToJanus.onmessage = (msg) ->\n        endTime = Date.now()\n        data = msg.data\n        json = JSON.parse(data)\n        if json.status.code >= 500\n          alert \"Error in processing Gremlin script: \"+json.status.message\n        else\n          if json.status.code == 204\n            results = []\n          else\n            results = json.result.data\n            nds = window.visnetwork.body.data.nodes.getDataSet()\n            eds = window.visnetwork.body.data.edges.getDataSet()\n            inVs = _.filter(results[0], (e)->\n              nds.get(e.id) == null\n            )\n            outVs = _.filter(results[1], (e)->\n              nds.get(e.id) == null\n            )\n            inEs = _.filter(results[2], (e)->\n              eds.get(e.id) == null\n            )\n            outEs = _.filter(results[3], (e)->\n              eds.get(e.id) == null\n            )\n\n            allV = _.uniq(_.union(inVs,outVs))\n            ahn = allHiddenNodeIDs()\n            allV = _.reject(allV, (node)->\n              _.contains(ahn,node.id+\"\"))\n            allE = _.uniq(_.union(inEs,outEs))\n            ahe = allHiddenEdgeIDs()\n            allE = _.reject(allE, (edge)->\n              _.contains(ahe,edge.id))\n            nodes2Select = _.initial elementIDs.nodes, 0\n            edges2Select = _.initial elementIDs.edges, 0\n            if allV.length > 100\n              #too many to auto insert without user permissions and selection\n              selectNeighborsToAdd(nodes2Select,edges2Select,allV,allE)\n            else\n              addInTheNeighbors(nodes2Select,edges2Select,allV,allE)\n      request =\n        requestId: uuid.new(),\n        op:\"eval\",\n        processor:\"\",\n        args:{gremlin: script, bindings: bindings, language: \"gremlin-groovy\"}\n      startTime = Date.now()\n      window.socketToJanus.send(JSON.stringify(request))\n    else\n      Meteor.call 'runScript', Session.get('userID'), Session.get('serverURL'),(Session.get 'tinkerPopVersion'), Session.get('graphName'),'Get neighbors', script, bindings, (error,result)->\n        if result.success == true\n          results = result.results\n          console.log results\n          nds = window.visnetwork.body.data.nodes.getDataSet()\n          eds = window.visnetwork.body.data.edges.getDataSet()\n          inVs = _.filter(results[0], (e)->\n            nds.get(e.id) == null\n          )\n          outVs = _.filter(results[1], (e)->\n            nds.get(e.id) == null\n          )\n          inEs = _.filter(results[2], (e)->\n            eds.get(e.id) == null\n          )\n          outEs = _.filter(results[3], (e)->\n            eds.get(e.id) == null\n          )\n          allV = _.uniq(_.union(inVs,outVs))\n          ahn = allHiddenNodeIDs()\n          allV = _.reject(allV, (node)->\n            _.contains(ahn,node.id+\"\"))\n          allE = _.uniq(_.union(inEs,outEs))\n          ahe = allHiddenEdgeIDs()\n          allE = _.reject(allE, (edge)->\n            _.contains(ahe,edge.id))\n          nodes2Select = _.initial elementIDs.nodes, 0\n          edges2Select = _.initial elementIDs.edges, 0\n          if allV.length + allE.length > 20\n            #too many to auto insert without user permissions and selection\n            selectNeighborsToAdd(nodes2Select,edges2Select,allV,allE)\n          else\n            addInTheNeighbors(nodes2Select,edges2Select,allV,allE)\n        else\n          alert \"Graph update failed.  Nothing changed.  Maybe try again?\"\n\n\nexpandSelections = ()->\n#expanding means select nodes add edges to selection and selected edges add nodes\n  elementIDs = window.visnetwork.getSelection()\n  nodes2Select = _.initial elementIDs.nodes, 0\n  edges2Select = _.initial elementIDs.edges, 0\n  for nodeID in elementIDs.nodes\n    newEdges = window.visnetwork.getConnectedEdges(nodeID)\n    for newEdge in newEdges\n      edges2Select.push newEdge\n  for edgeID in elementIDs.edges\n    newNodes = window.visnetwork.getConnectedNodes(edgeID)\n    for newNode in newNodes\n      nodes2Select.push newNode\n  window.visnetwork.setSelection({nodes: _.uniq(nodes2Select), edges: _.uniq(edges2Select)})\n\nexpandSelections5 = ()->\n  #expanding means select nodes add edges to selection and selected edges add nodes\n  #take it out to 5 levels of neighbors\n  expandSelections()\n  expandSelections()\n  expandSelections()\n  expandSelections()\n  expandSelections()\n\ndeleteSelections = ()->\n  elementIDs = window.visnetwork.getSelection()\n  bindings = {\"vertIDs\": elementIDs.nodes, \"edgeIDs\": elementIDs.edges}\n  script = \"//given arrays of vert ids and edge ids, remove their elements in the graph\"+\"\\n\"\n  if elementIDs.nodes.length > 0\n    script = script + \"g.V(vertIDs).drop().iterate()\"+\"\\n\"\n  if elementIDs.edges.length > 0\n    script = script + \"g.E(edgeIDs).drop().iterate()\"+\"\\n\"\n  if (Session.get \"usingWebSockets\")\n    window.socketToJanus.onmessage = (msg) ->\n      endTime = Date.now()\n      data = msg.data\n      json = JSON.parse(data)\n      if json.status.code >= 500\n        alert \"Error in processing Gremlin script: \"+json.status.message\n      else\n        window.visnetwork.body.data.edges.getDataSet().remove(elementIDs.edges)\n        window.visnetwork.body.data.nodes.getDataSet().remove(elementIDs.nodes)\n    request =\n      requestId: uuid.new(),\n      op:\"eval\",\n      processor:\"\",\n      args:{gremlin: script, bindings: bindings, language: \"gremlin-groovy\"}\n    startTime = Date.now()\n    window.socketToJanus.send(JSON.stringify(request))\n  else\n    Meteor.call 'runScript', Session.get('userID'), Session.get('serverURL'),(Session.get 'tinkerPopVersion'), Session.get('usingWebServices'),'Deleting a collection of verts and edges by id', script, bindings, (error,result)->\n      if result.success == true\n        window.visnetwork.body.data.edges.getDataSet().remove(elementIDs.edges)\n        window.visnetwork.body.data.nodes.getDataSet().remove(elementIDs.nodes)\n      else\n        alert \"Selection deletion failed.  Nothing changed; \"+script\n\ncloneSelections = ()->\n  elementIDs = window.visnetwork.getSelection()\n  cloneElements(elementIDs)\n\n#-----------------for use from other functions-----------------\n\naddElementsFromBindingsJSON = (bindings)->\n  alert \"Remember this function is not using gg()\"\n  script =\n  '''\n  if (bindings['vertsJSON'] == null) {vertsJSON = []} else {vertsJSON = bindings['vertsJSON']}\n  if (bindings['edgesJSON'] == null) {edgesJSON = []} else {edgesJSON = bindings['edgesJSON']}\n  if (bindings['verts2FindOrCreate'] == null) {verts2FindOrCreate = []} else {verts2FindOrCreate = bindings['verts2FindOrCreate']}\n  if (bindings['transactionContext'] == null) {transactionContext = 'unlabeled transaction context'} else {transactionContext = bindings['transactionContext']}\n\n  vMap = [:]\n  vMapFull = [:]\n  eMapFull = [:]\n  verts2FindOrCreate.collect { json ->\n      trav = g.V().hasLabel(json.label)\n      json.properties.each { key, val ->\n          trav = trav.has(key, val[0].value)\n          }\n      results = trav.toList()\n     if (results.size == 0) {oldV = null} else {oldV = results[0]}\n      if (oldV == null){\n          //create it\n          newV = g.addV(json.label).next()\n          json.properties.each { key, val ->\n              g.V(newV.id()).property(key, val[0].value).next()\n              }\n      } else {\n          //reference it\n          newV = oldV\n      }\n      vMap[json.id] = newV.id()\n\n  }\n\n\n  vertsJSON.collect { json ->\n      newV = g.addV(json.label).next()\n      vMap[json.id] = newV.id()\n      vMapFull[json.id] = newV\n      json.properties.each { key, val ->\n          g.V(newV.id()).property(key, val[0].value).next()\n  }}\n  edgesJSON.collect { json ->\n      fromID = vMap[json.outV] ? vMap[json.outV] : json.outV\n      toID = vMap[json.inV] ? vMap[json.inV] : json.inV\n      newEdge=g.V(fromID).addE(json.label).to(g.V(toID)).next()\n      eMapFull[json.id] = newEdge\n      json.properties.collect { key, val ->\n          g.E(newEdge.id()).property(key, val.value).next()\n  }}\n  //answer the maps of old element ids to new elements\n  [vMapFull, eMapFull]\n  '''\n  if (Session.get \"usingWebSockets\")\n    window.socketToJanus.onmessage = (msg) ->\n      endTime = Date.now()\n      data = msg.data\n      json = JSON.parse(data)\n      if json.status.code >= 500\n        alert \"Error in processing Gremlin script: \"+json.status.message\n      else\n        if json.status.code == 204\n          results = []\n        else\n          results = json.result.data\n          vMap = results[0]\n          eMap = results[1]\n          nodeIDsToSelect = []\n          edgeIDsToSelect = []\n          for oldVID,newV of vMap\n            newNode = {physics: false, id: String(newV.id),label: labelForVertex(newV,Session.get('keyForNodeLabel')), allowedToMoveX: true, allowedToMoveY: true, title: titleForElement(newV), element:newV}\n            window.visnetwork.nodesHandler.body.data.nodes.add newNode\n            if bindings['locations'] && bindings.locations[oldVID]\n              loc = bindings.locations[oldVID.toString()]\n              window.visnetwork.moveNode(newNode.id,loc.x,loc.y)\n            else\n              window.visnetwork.moveNode(newNode.id,0,0)\n            if bindings['styles'] && bindings.styles[oldVID.toString()]\n              styleForNode = bindings.styles[oldVID.toString()]\n              newNode = _.extend(newNode,styleForNode)\n              window.visnetwork.nodesHandler.body.data.nodes.getDataSet().update(newNode)\n              window.visnetwork.moveNode(newNode.id,loc.x,loc.y)\n            nodeIDsToSelect.push newNode.id\n          for oldEID,newE of eMap\n            newEdge = {id: String(newE.id),label: newE.label, from: newE.outV, to: newE.inV, title: titleForElement(newE), element:newE}\n            if bindings['styles'] && bindings.styles[oldEID.toString()]\n              styleForEdge = bindings.styles[oldEID.toString()]\n              newEdge = _.extend(newEdge,styleForEdge)\n            window.visnetwork.edgesHandler.body.data.edges.add newEdge\n            edgeIDsToSelect.push newEdge.id\n          window.visnetwork.setSelection({nodes: nodeIDsToSelect, edges: edgeIDsToSelect},{unselectedAll: true, highlightEdges: false})\n    request =\n      requestId: uuid.new(),\n      op:\"eval\",\n      processor:\"\",\n      args:{gremlin: script, bindings: {bindings: bindings}, language: \"gremlin-groovy\"}\n    startTime = Date.now()\n    window.socketToJanus.send(JSON.stringify(request))\n  else\n    Meteor.call 'runScript', Session.get('userID'), Session.get('serverURL'),(Session.get 'tinkerPopVersion'), Session.get('graphName'),'Subgraph ingestor from bindings JSON', script, {bindings: bindings}, (error,result)->\n      if result.success == true\n        vMap = result.results[0]\n        eMap = result.results[1]\n        nodeIDsToSelect = []\n        edgeIDsToSelect = []\n        for oldVID,newV of vMap\n          newNode = {id: String(newV.id),label: labelForVertex(newV,Session.get('keyForNodeLabel')), allowedToMoveX: true, allowedToMoveY: true, title: titleForElement(newV), element:newV}\n          window.visnetwork.nodesHandler.body.data.nodes.add newNode\n          oldLoc = (window.visnetwork.getPositions([oldVID]))[oldVID]\n          window.visnetwork.moveNode(newNode.id,oldLoc.x + 50,oldLoc.y + 50)\n          nodeIDsToSelect.push newNode.id\n        for oldEID,newE of eMap\n          newEdge = {id: String(newE.id),label: newE.label, from: newE.outV, to: newE.inV, title: titleForElement(newE), element:newE}\n          window.visnetwork.edgesHandler.body.data.edges.add newEdge\n          edgeIDsToSelect.push newEdge.id\n        window.visnetwork.setSelection({nodes: nodeIDsToSelect, edges: edgeIDsToSelect},{unselectedAll: true, highlightEdges: false})\n      else\n        alert \"Selection cloning failed.  Nothing changed; \"+script\n\n\n\n\n\n\ncloneElements = (elementIDs)->\n  bindings = {\"vertIDs\": elementIDs.nodes, \"edgeIDs\": elementIDs.edges}\n  script = \"//given arrays of vert ids and edge ids, clone the subgraph defined into the graph\"+\"\\n\"\n  # use bindings instead of codegen to reuse last compiled version of script\n  #  script = script + \"vertIDs = \"+JSON.stringify(elementIDs.nodes)+\"\\n\"\n  #  script = script + \"edgeIDs = \"+JSON.stringify(elementIDs.edges)+\"\\n\"\n  script = script + \"//clone vertices first\"+\"\\n\"\n  script = script + \"vMap = [:]\"+\"\\n\"\n  script = script + \"vMapFull = [:]\"+\"\\n\"\n  script = script + \"vertIDs.each { id ->\"+\"\\n\"\n  script = script + \"   oldVert = g.V(id).next()\"+\"\\n\"\n  script = script + \"   newVert = g.addV(oldVert.label()).next()\"+\"\\n\"\n  script = script + \"   vMap[oldVert.id()] = newVert.id()\"+\"\\n\"\n  script = script + \"   vMapFull[oldVert.id()] = newVert\"+\"\\n\"\n  script = script + \"   oldVert.properties().toList().collect {prop ->\"+\"\\n\"\n  script = script + \"       g.V(newVert.id()).property(prop.label(), prop.value()).next()\"+\"\\n\"\n  script = script + \"}}\"+\"\\n\"\n  script = script + \"//clone edges\"+\"\\n\"\n  script = script + \"eMapFull = [:]\"+\"\\n\"\n  script = script + \"edgeIDs.each { id ->\"+\"\\n\"\n  script = script + \"   oldEdge = g.E(id).next()\"+\"\\n\"\n  script = script + \"   fromID = vMap[oldEdge.outVertex().id()] ? vMap[oldEdge.outVertex().id()] : oldEdge.outVertex().id()\"+\"\\n\"\n  script = script + \"   toID = vMap[oldEdge.inVertex().id()] ? vMap[oldEdge.inVertex().id()] : oldEdge.inVertex().id()\"+\"\\n\"\n  script = script + \"   newEdge=g.V(fromID).addE(oldEdge.label()).to(g.V(toID)).next()\"+\"\\n\"\n  script = script + \"   eMapFull[oldEdge.id()] = newEdge\"+\"\\n\"\n  script = script + \"   oldEdge.properties().toList().collect { prop ->\"+\"\\n\"\n  script = script + \"       g.E(newEdge.id()).property(prop.key(), prop.value()).next()\"+\"\\n\"\n  script = script + \"}}\"+\"\\n\"\n  script = script + \"//answer the maps\"+\"\\n\"\n  script = script + \"[vMapFull,eMapFull]\"+\"\\n\"\n  if (Session.get \"usingWebSockets\")\n    window.socketToJanus.onmessage = (msg) ->\n      endTime = Date.now()\n      data = msg.data\n      json = JSON.parse(data)\n      if json.status.code >= 500\n        alert \"Error in processing Gremlin script: \"+json.status.message\n      else\n        if json.status.code == 204\n          results = []\n        else\n          results = json.result.data\n          vMap = results[0]\n          eMap = results[1]\n          nodeIDsToSelect = []\n          edgeIDsToSelect = []\n          for oldVID,newV of vMap\n            newNode = {id: String(newV.id),label: labelForVertex(newV,Session.get('keyForNodeLabel')), allowedToMoveX: true, allowedToMoveY: true, title: titleForElement(newV), element:newV}\n            window.visnetwork.nodesHandler.body.data.nodes.add newNode\n            oldLoc = (window.visnetwork.getPositions([oldVID]))[oldVID]\n            window.visnetwork.moveNode(newNode.id,oldLoc.x + 50,oldLoc.y + 50)\n            nodeIDsToSelect.push newNode.id\n          for oldEID,newE of eMap\n            newEdge = {id: String(newE.id),label: newE.label, from: newE.outV, to: newE.inV, title: titleForElement(newE), element:newE}\n            window.visnetwork.edgesHandler.body.data.edges.add newEdge\n            edgeIDsToSelect.push newEdge.id\n          window.visnetwork.setSelection({nodes: nodeIDsToSelect, edges: edgeIDsToSelect},{unselectedAll: true, highlightEdges: false})\n    request =\n      requestId: uuid.new(),\n      op:\"eval\",\n      processor:\"\",\n      args:{gremlin: script, bindings: bindings, language: \"gremlin-groovy\"}\n    startTime = Date.now()\n    window.socketToJanus.send(JSON.stringify(request))\n  else\n    Meteor.call 'runScript', Session.get('userID'), Session.get('serverURL'),(Session.get 'tinkerPopVersion'), Session.get('graphName'),'Subgraph cloner', script, bindings, (error,result)->\n      if result.success == true\n        vMap = result.results[0]\n        eMap = result.results[1]\n        nodeIDsToSelect = []\n        edgeIDsToSelect = []\n        for oldVID,newV of vMap\n          newNode = {id: String(newV.id),label: labelForVertex(newV,Session.get('keyForNodeLabel')), allowedToMoveX: true, allowedToMoveY: true, title: titleForElement(newV), element:newV}\n          window.visnetwork.nodesHandler.body.data.nodes.add newNode\n          oldLoc = (window.visnetwork.getPositions([oldVID]))[oldVID]\n          window.visnetwork.moveNode(newNode.id,oldLoc.x + 50,oldLoc.y + 50)\n          nodeIDsToSelect.push newNode.id\n        for oldEID,newE of eMap\n          newEdge = {id: String(newE.id),label: newE.label, from: newE.outV, to: newE.inV, title: titleForElement(newE), element:newE}\n          window.visnetwork.edgesHandler.body.data.edges.add newEdge\n          edgeIDsToSelect.push newEdge.id\n        window.visnetwork.setSelection({nodes: nodeIDsToSelect, edges: edgeIDsToSelect},{unselectedAll: true, highlightEdges: false})\n      else\n        alert \"Selection cloning failed.  Nothing changed; \"+script\n\n\naddEdgeToGraph = (edgeData, callback) ->\n#edgeData is the vis.js object for its newly created edge on the client, {from: \"id of node\", to: \"id of node\"}\n  labels = Session.get 'edgeLabelSet'\n  labelSelectorHTML = '<select onchange=\"window.updateVertexLabelBootBox(this)\" >'\n  optionHTML = '<option>Select an edge label</option>'\n  labelSelectorHTML = labelSelectorHTML + optionHTML\n  for label in labels\n    do(label)->\n      optionHTML = '<option>'+label+'</option>'\n      labelSelectorHTML = labelSelectorHTML + optionHTML\n  labelSelectorHTML = labelSelectorHTML + '</select>'\n  bootbox.prompt(\"<p>Enter the label for this new edge or choose one of these \"+labelSelectorHTML+\"</p><p>Edge labels are immutable (can't be changed), so choose wisely.</p>\", (result)->\n    label = result\n    if label == null || label == \"\"\n    #alert \"Edges must have labels, adding edge aborted\"\n      callback(null)\n      return\n    script = 'fromV = g.V(\"'+edgeData.from+'\");'\n    script = script + 'toV = g.V(\"'+edgeData.to+'\");'\n    script = script + 'e = fromV.addE(\"'+label+'\").to(toV)'\n    if (Session.get \"usingWebSockets\")\n      window.socketToJanus.onmessage = (msg) ->\n        endTime = Date.now()\n        data = msg.data\n        json = JSON.parse(data)\n        if json.status.code >= 500\n          alert \"Error in processing Gremlin script: \"+json.status.message\n        else\n          if json.status.code == 204\n            results = []\n            edgeData = []\n          else\n            results = json.result.data\n            e = results[0]\n            edgeData.id = String(e.id)\n            edgeData.from = String(e.outV)\n            edgeData.to = String(e.inV)\n            edgeData.label = e.label\n            edgeData.title = titleForElement(e)\n            edgeData.element = e\n          getLabelSets()\n          callback(edgeData)\n\n      request =\n        requestId: uuid.new(),\n        op:\"eval\",\n        processor:\"\",\n        args:{gremlin: script, bindings: {}, language: \"gremlin-groovy\"}\n      startTime = Date.now()\n      window.socketToJanus.send(JSON.stringify(request))\n    else\n      Meteor.call 'runScript', Session.get('userID'), Session.get('serverURL'),(Session.get 'tinkerPopVersion'), Session.get('graphName'),'Built-in property updater', script, (error,result)->\n        if result.success == true\n          e = result.results[0]\n          edgeData.id = String(e.id)\n          edgeData.from = String(e.outV)\n          edgeData.to = String(e.inV)\n          edgeData.label = e.label\n          edgeData.title = titleForElement(e)\n          edgeData.element = e\n          getLabelSets()\n          callback(edgeData)\n        else\n          alert \"Graph update failed.  Nothing changed\"\n  )\n  #update vertex label set in case new ones have been added\n  getLabelSets()\n\ndeleteSelected = (selections,callback)->\n  #selections is { nodes:[], edges:[] }\n  nodeIDs = selections.nodes\n  edgeIDs = selections.edges\n  script = 'nodeIDs.each {nodeID -> g.V(nodeID).drop()}; edgeIDs.each {edgeID -> g.V(edgeID).drop()}; '\n  bindings = {nodeIDs: nodeIDs, edgeIDs:edgeIDs}\n  if (Session.get \"usingWebSockets\")\n    window.socketToJanus.onmessage = (msg) ->\n      endTime = Date.now()\n      data = msg.data\n      json = JSON.parse(data)\n      if json.status.code >= 500\n        alert \"Error in processing Gremlin script: \"+json.status.message\n      else\n        callback(selections)\n    request =\n      requestId: uuid.new(),\n      op:\"eval\",\n      processor:\"\",\n      args:{gremlin: script, bindings: {nodeIDs: nodeIDs, edgeIDs: edgeIDs}, language: \"gremlin-groovy\"}\n    startTime = Date.now()\n    window.socketToJanus.send(JSON.stringify(request))\n  else\n    Meteor.call 'runScript', Session.get('userID'), Session.get('serverURL'),(Session.get 'tinkerPopVersion'), Session.get('graphName'),'Built-in property updater', script, bindings, (error,result)->\n      if result.success == true\n        callback(selections)\n      else\n        alert \"Graph update failed.  Nothing changed\"\n\nuserPropertiesForElement = (element)->\n#this does not try to handle multivalue properties yet, only returns the first one\n  props = {}\n  if element[\"properties\"] != undefined\n    for key in _.keys element.properties\n      if element.type == \"vertex\"\n        props[key] = element.properties[key][0].value\n      else   #edge properties aren't multivalued\n        props[key] = element.properties[key]\n  return props\n\nlabelForVertex = (vertex, keyForLabel)->\n  if keyForLabel == undefined\n    key = \"null\"\n  else\n    key = keyForLabel\n  if Session.get 'useLabelPrefix'\n    labelPrefix = vertex.label\n  else\n    labelPrefix = \"\"\n  suffix = \"\"\n  if (vertex[key] == undefined)\n    if vertex.properties[key] != undefined\n      suffix = key+\": \"+vertex.properties[key][0].value\n    else\n      suffix = \"\"\n      nl = \"\"\n  else\n    suffix = key+\": \"+vertex[key]\n  if suffix != \"\"\n    nl = '\\n'\n  else\n    nl = \"\"\n\n  return labelPrefix+nl+suffix\n\n\n\nallKeysInVerts = (verts)->\n#answer the collection of all unique vertex keys in verts\n#include id, label, and properties, omit type (edge/vertex)\n  allKeys = ['id','label']\n  for v in verts\n    allKeys.push(k) for k in Object.keys(v.properties)\n  return _.uniq(allKeys)\n\n\nwindow.updateEdgeColors = ()->\n  conf = window.visnetwork.configurator.moduleOptions\n  for edge in _.values window.visnetwork.edgesHandler.body.data.edges._data\n    console.log edge\n    if edge.color == undefined\n      edge.color = {}\n    edge.color = conf.edges.color.color\n    edge.color.highlight = conf.edges.color.highlight\n    edge.color.hover = conf.edges.color.hover\n    edge.color.opacity = conf.edges.color.opacity\n    edge.color.inherit = conf.edges.color.inherit\n    window.visnetwork.edgesHandler.body.data.edges.update [edge], []\n\n\n\nwindow.renderGraph =  () ->\n  Session.set 'graphRenderingStatus','Rendering...'\n#  graph = Session.get 'graphToShow'\n  Session.set 'renderStartTime', moment().toDate()\n#vn = new vis.DataSet(graph.nodes)\n#ve = new vis.DataSet(graph.edges)\n#window.visnetwork.setData {nodes: vn, edges: ve}\n\n\nwindow.setUpVis = () ->\n  this.find('.results-vis')._uihooks\n  container = document.getElementById 'mynetwork'\n  config = document.getElementById 'vis-config'\n  $(config).hide()\n  visOptions = Session.get 'visOptions'\n  defaultOptions =\n    interaction:\n      hover: true\n      navigationButtons: true\n      multiselect: true\n      dragView: true\n      selectConnectedEdges: false\n    manipulation:\n      addNode: (nodeData,callback)->\n        addVertToGraph(nodeData,callback)\n      addEdge: (edgeData,callback)->\n        addEdgeToGraph(edgeData,callback)\n      deleteNode: (selections, callback)->\n        deleteSelected(selections,callback)\n      deleteEdge: (selections, callback)->\n        deleteSelected(selections,callback)\n      editNode: (node,callback)->\n        window.popupPropertyEditor(window.visnetwork.nodesHandler.body.data.nodes.get(node.id), \"vertex\")\n        callback()\n      editEdge: false\n    configure:\n      enabled: true\n      container: config\n      showButton: true\n    physics: true\n    nodes:\n      shape: \"box\"\n      labelHighlightBold: true\n      font:\n        face: 'arial'\n      hidden: false\n      borderWidth: 1\n      color:\n        hover:\n          border: '#ffff00'\n          background: '#0066cc'\n        highlight:\n          border: '#ff0000'\n          background: '#ffff00'\n    edges:\n      hidden: false\n      arrows:\n        to:\n          enabled: true\n          scaleFactor: 0.5\n      color:\n        highlight:'#ff0000'\n        hover:'#0066cc'\n  if visOptions == undefined\n    options = defaultOptions\n  else\n    options = visOptions\n  data = []\n  console.log \"installing window.visnetwork\"\n  window.visnetwork = new vis.Network container, data, options\n\n  window.visnetwork.on('afterDrawing', (params)->\n    if (Session.get \"firstRender\") == 1\n      renderStopTime = moment()\n      d = moment.duration(Math.round((renderStopTime-moment(Session.get 'renderStartTime'))*1000)/1000)\n      Session.set 'elapsedRenderTime', durationToString(d)\n      graph = Session.get 'graphToShow'\n      if graph.nodes.length > 0\n        Session.set 'graphRenderingStatus', 'Finished '+graph.nodes.length+'V, '+graph.edges.length+'E'\n    Session.set \"firstRender\", (Session.get \"firstRender\")+1\n  )\n\n  window.visnetwork.on('doubleClick', (params)->   # open a dialog for the selected element\n    if params.nodes.length != 0 # then a node was doubleClicked\n      elementType = 'vertex'\n      element = window.visnetwork.nodesHandler.body.data.nodes.get(params.nodes[0])\n    else\n      if params.edges.length == 1 # then an edge was doubleClicked\n        elementType = 'edge'\n        element =  window.visnetwork.edgesHandler.body.data.edges.get(params.edges[0])\n      else\n        return #background was doubleClicked, nothing to do yet\n    window.popupPropertyEditor(element, elementType)\n  )\n  $('.context-cloneSelections').click ->\n    params = window.visnetwork.getSelection()\n    cloneSelections(params.nodes, params.edges)\n\n  $('.context-deleteSelections').click ->\n    params = window.visnetwork.getSelection()\n    bootbox.confirm\n      message: \"Do you really want to delete \"+params.nodes.length+\" vertices and \"+params.edges.length+\" edges?  (no undo)\",\n      buttons: {\n        confirm: {\n          label: 'Yes, delete them',\n          className: 'btn-success'\n        },\n        cancel: {\n          label: \"No, don't delete anything\",\n          className: 'btn-danger'\n        }\n      },\n      callback: (result) ->\n        if result\n          deleteSelections(params.nodes, params.edges)\n\n  $('.context-expandSelections').click ->\n    expandSelections()\n\n  $('.context-expandSelections5').click ->\n    expandSelections5()\n\n  $('.context-dropSelections').click ->\n    dropSelections()\n\n  $('.context-growSelections').click ->\n    growSelections()\n\n  $('.context-selectAll').click ->\n    selectAll()\n\n  $('.context-selectNone').click ->\n    selectNone()\n\n  $('.context-invertSelections').click ->\n    invertSelections()\n\n  $('.context-hideSelections1').click ->\n    hideSelections1()\n  $('.context-unhideSelections1').click ->\n    unhideSelections1()\n  $('.context-spawnHidden1').click ->\n    spawnHidden1()\n\n\n  $('.context-hideSelections2').click ->\n    hideSelections2()\n  $('.context-unhideSelections2').click ->\n    unhideSelections2()\n  $('.context-spawnHidden2').click ->\n    spawnHidden2()\n\n  $('.context-hideSelections3').click ->\n    hideSelections3()\n  $('.context-unhideSelections3').click ->\n    unhideSelections3()\n  $('.context-spawnHidden3').click ->\n    spawnHidden3()\n\n  $('.context-hideSelections4').click ->\n    hideSelections4()\n  $('.context-unhideSelections4').click ->\n    unhideSelections4()\n  $('.context-spawnHidden4').click ->\n    spawnHidden4()\n\n  $('.context-inspectSelections').click ->\n    inspectSelections()\n\n  $('.context-inspectNone').click ->\n    inspectNone()\n\n  $('.context-pinSelections').click ->\n    pinSelections()\n\n  $('.context-unpinSelections').click ->\n    unpinSelections()\n\n  $('.context-generateJSONBindingsForSelections').click ->\n    generateJSONBindingsForSelections()\n\n  $('.context-shareGremlinCodeForIngestion').click ->\n    shareGremlinCodeForIngestion()\n\n  $('.context-inputGremlinCodeForIngestion').click ->\n    inputGremlinCodeForIngestion()\n\n  $('.context-spawnToQuikVis').click ->\n    spawnToQuikVis()\n\n  $('.context-spawnAllToQuikVis').click ->\n    spawnAllToQuikVis()\n\n  window.popupPropertyEditor = (element, elementType)->\n    id = element.element.id\n    html = popupDialogForElement(element, elementType)\n    title = elementType + ': ' + id\n    div = document.createElement 'div'\n    div.class = 'doubleClick-dialog'\n    div.innerHTML = html\n    $(\".vis-network\").append div\n    $(div).dialog(\n      title: title\n      resizable: true\n      width: 400\n      height: \"auto\"\n      beforeClose: ( event, ui )->\n        $(\".propTableForElementID\"+id).remove()\n    )\n    $('.element-deleteProperty'+id).click ->\n      $(this.parentNode.parentNode.parentNode.parentNode.parentNode).next().show()\n      this.parentNode.parentNode.parentNode.remove()\n\n    $('.element-copyProperty'+id).click ->\n      key = this.parentNode.parentNode.parentNode.children[0].innerText.slice(0,-1)\n      value = this.parentNode.parentNode.parentNode.children[1].children[0].value\n      Session.set \"propCopyBuffer\",{key: key,value: value}\n      console.log \"copied \",key,value\n\n    $('.element-pasteProperty'+id).click ->\n      prop = Session.get \"propCopyBuffer\"\n      if prop\n        key = prop.key\n        value = prop.value\n        $(\".propTableForElementID\"+id).next().show()\n        deletePropButton = '<a href=\"#\" class=\"btn btn-default\" title=\"Delete property\"><span class=\"glyphicon glyphicon-minus element-deleteProperty'+id+'\"></span></a>'\n        copyPropButton = '<a href=\"#\" class=\"btn btn-default\" title=\"Copy property\"><span class=\"glyphicon glyphicon-copy element-copyProperty'+id+'\"></span></a>'\n        tr = '<tr><td>'+key+':  </td><td><input type=\"text\" class=\"propForElementID'+id+'\" name='+key+' value=\"'+value+'\" oninput=\"$(\\'button.commitButtonForElementID'+id+'\\').show()\"></td><th style=\"width:50\" id=\"'+id+'\" value=\"'+elementType+'\" name=\"'+key+'\">'+deletePropButton+copyPropButton+'</th></tr>'\n        $(\".propTableForElementID\"+id).append(tr)\n        $('.element-deleteProperty'+id).click ->\n          $(\".propTableForElementID\"+id).next().show()\n          this.parentNode.parentNode.parentNode.remove()\n      else\n        alert \"Nothing to paste, try copying a property first\"\n\n    $('.element-log'+id).click ->\n      node = window.visnetwork.nodesHandler.body.data.nodes.get(id)\n      if node\n        console.log node\n      else\n        edge = window.visnetwork.edgesHandler.body.data.edges.get(id)\n        console.log edge\n\n    $('.clone-vertex'+id).click ->\n      cloneVertToGraph(id)\n\n    $('.clone-edge'+id).click ->\n      cloneElements({\"nodes\":[], \"edges\":[id]})\n\n    $('.element-addProperty'+id).click ->\n      bootbox.dialog(\n        title: \"Enter a name for the new property\"\n        message: '<div class=\"row\">  ' +\n          '<div class=\"col-md-12\"> ' +\n          '<form class=\"form-horizontal\"> ' +\n          '<div class=\"form-group\"> ' +\n          '<label class=\"col-md-4 control-label\" for=\"name\">Key</label> ' +\n          '<div class=\"col-md-4\"> ' +\n          '<input id=\"key'+id+'\" name=\"key\" type=\"text\" placeholder=\"aPropertyName\" class=\"form-control input-md\"> ' +\n          '</div> ' +\n          '<label class=\"col-md-4 control-label\" for=\"name\">Value</label> ' +\n          '<div class=\"col-md-4\"> ' +\n          '<input id=\"value'+id+'\" name=\"value\" type=\"text\" placeholder=\"someValue\" class=\"form-control input-md\"> ' +\n          '</div> ' +\n          '</form> </div>  </div>',\n        buttons:\n          confirm:\n            label: \"Save\"\n            className: \"btn-success\"\n            callback: ()->\n              key = $('#key'+id+'').val()\n              value = $('#value'+id+'').val()\n              if key == \"id\" | key == \"label\"| key == \"type\"\n                window.alert('Reserved property name disallowed: '+key)\n              else\n                $(\".propTableForElementID\"+id).next().show()\n                deletePropButton = '<a href=\"#\" class=\"btn btn-default\" title=\"Delete property\"><span class=\"glyphicon glyphicon-minus element-deleteProperty'+id+'\"></span></a>'\n                copyPropButton = '<a href=\"#\" class=\"btn btn-default\" title=\"Copy property\"><span class=\"glyphicon glyphicon-copy element-copyProperty'+id+'\"></span></a>'\n                tr = '<tr><td>'+key+':  </td><td><input type=\"text\" class=\"propForElementID'+id+'\" name='+key+' value=\"'+value+'\" oninput=\"$(\\'button.commitButtonForElementID'+id+'\\').show()\"></td><th style=\"width:50\" id=\"'+id+'\" value=\"'+elementType+'\" name=\"'+key+'\">'+deletePropButton+copyPropButton+'</th></tr>'\n                $(\".propTableForElementID\"+id).append(tr)\n                $('.element-deleteProperty'+id).click ->\n                  $(\".propTableForElementID\"+id).next().show()\n                  this.parentNode.parentNode.parentNode.remove()\n\n      )\n\n  $(\".results-graph-fit\").click ->\n    window.visnetwork.fit()\n\n  #------------------drag multiselect functions----------------------------\n  rect = {}\n  drag = false\n  canvas = window.visnetwork.canvas.frame.canvas\n  ctx = canvas.getContext('2d')\n  drawingSurfaceImageData = ctx.getImageData(0, 0, canvas.width, canvas.height)\n\n\n  saveDrawingSurface = ->\n    drawingSurfaceImageData = ctx.getImageData(0, 0, canvas.width, canvas.height)\n    return\n\n  restoreDrawingSurface = ->\n    ctx.putImageData drawingSurfaceImageData, 0, 0\n    return\n\n  selectNodesFromHighlight = ->\n    nodesIdInDrawing = Session.get('selectedNodes')\n    xRange = getStartToEnd(rect.startX, rect.w)\n    yRange = getStartToEnd(rect.startY, rect.h)\n    allNodes = window.visnetwork.nodesHandler.body.data.nodes.get()\n    i = 0\n    while i < allNodes.length\n      curNode = allNodes[i]\n      nodePosition = window.visnetwork.getPositions([ curNode.id ])\n      nodeXY = window.visnetwork.canvasToDOM(\n        x: nodePosition[curNode.id].x\n        y: nodePosition[curNode.id].y)\n      if xRange.start <= nodeXY.x and nodeXY.x <= xRange.end and yRange.start <= nodeXY.y and nodeXY.y <= yRange.end\n        nodesIdInDrawing.push curNode.id\n      i++\n\n    window.visnetwork.selectNodes nodesIdInDrawing\n    return\n\n  getStartToEnd = (start, theLen) ->\n    if theLen > 0\n      ret =\n        start: start\n        end: start + theLen\n    else\n      ret =\n        start: start + theLen\n        end: start\n    return ret\n\n  container = $(\"#mynetwork\")\n  container.on 'mousemove', (e) ->\n    if drag\n      restoreDrawingSurface()\n      rect.w = e.pageX - (@offsetLeft) - (rect.startX)\n      rect.h = e.pageY - (@offsetTop) - (rect.startY)\n      ctx.setLineDash [ 5 ]\n      ctx.strokeStyle = 'rgb(0, 102, 0)'\n      ctx.strokeRect rect.startX, rect.startY, rect.w, rect.h\n      ctx.setLineDash []\n      ctx.fillStyle = 'rgba(0, 255, 0, 0.2)'\n      ctx.fillRect rect.startX, rect.startY, rect.w, rect.h\n    return\n\n  container.on 'mousedown', (e) ->\n    Session.set('selectedNodes', [])\n    if e.button == 2\n      if e.shiftKey\n        currentSelections = window.visnetwork.getSelectedNodes()\n        Session.set('selectedNodes', currentSelections)\n      saveDrawingSurface()\n      that = this\n      rect.startX = e.pageX - (@offsetLeft)\n      rect.startY = e.pageY - (@offsetTop)\n      drag = true\n      container[0].style.cursor = 'crosshair'\n    return\n  container.on 'mouseup', (e) ->\n    if e.button == 2\n      restoreDrawingSurface()\n      drag = false\n      container[0].style.cursor = 'default'\n      selectNodesFromHighlight()\n    return\n  document.body.oncontextmenu = ->\n    false\n\n\n\n\n  #-------------- Viz option controls --------------------\n  $(\".vis-options-node-hideShow\").prop('checked', true)\n  $(\".vis-options-node-hideShow\").change ->\n    oldState = $(\".vis-options-node-hideShow\").prop('checked')\n    newState = !oldState\n    window.visnetwork.setOptions {nodes:{hidden: newState}}\n\n  $(\".vis-options-edge-hideShow\").prop('checked', true)\n  $(\".vis-options-edge-hideShow\").change ->\n    oldState = $(\".vis-options-edge-hideShow\").prop('checked')\n    newState = !oldState\n    window.visnetwork.setOptions {edges:{hidden: newState}}\n\n  $(\".vis-options-physics-toggle\").prop('checked', true)\n  $(\".vis-options-physics-toggle\").change ->\n    state = $(\".vis-options-physics-toggle\").prop('checked')\n    window.visnetwork.setOptions {physics: state}\n\n  $('.all-settings').click (evt)->\n    $('#vis-config').dialog({title: 'Visualization Options',resizable: true,width:500,height:300})\n\n  #-------------- Node Label Selector --------------------\n  $(\"#nodeLabelProperty\").change ->\n    updateNodelabels()\n\n  updateNodelabels = () ->\n    key = $(\"#nodeLabelProperty\").val()\n    Session.set 'keyForNodeLabel', key\n    nodes = window.visnetwork.nodesHandler.body.data.nodes.getDataSet()\n    window.visnetwork.stopSimulation()\n    selections = (window.visnetwork.getSelection()).nodes\n    if not selections.length  #no selections, apply to all nodes\n      nodes.forEach (node)->\n        node.label = labelForVertex(node.element,key)\n        nodes.update {id: node.id, label: node.label}\n    else # apply to selected nodes only\n      selections.forEach (nodeID)->\n        node = nodes.get(nodeID)\n        node.label = labelForVertex(node.element,key)\n        nodes.update {id: node.id, label: node.label}\n    window.visnetwork.startSimulation()\n\n  $(\".useLabelPrefix\").prop('checked', true)\n  Session.set 'useLabelPrefix', true\n  $(\".useLabelPrefix\").change ->\n    state = $(\".useLabelPrefix\").prop('checked')\n    Session.set 'useLabelPrefix', state\n    updateNodelabels()\n\n\n\n  #------------------Select IF support\n  $(\"#nodeLabelSelector\").change ->\n    sel = $(\"#nodeLabelSelector\").val()\n    if sel == 'all vertices'\n      $('#elementSelector').val ('{\"type\": \"vertex\"}')\n    else\n      if sel == 'all edges'\n        $('#elementSelector').val ('{\"type\": \"edge\"}')\n      else\n        $('#elementSelector').val ('\"'+$(\"#nodeLabelSelector\").val()+'\"')\n    $('#elementSelector').trigger('input')\n\n\n  Session.set 'elementSelector', null  # null means select nothing\n\n  window.updateSelectedElements = (ctxt) ->\n    Session.set 'elementSelector', ctxt\n    try\n      selector = JSON.parse(Session.get 'elementSelector')\n      $('#elementSelector')[0].style.color = 'black'\n    catch error\n      $('#elementSelector')[0].style.color = 'red'     # signal a syntax error with red text\n      return\n    selectedNodes = selectNodes(selector, window.visnetwork.body.data.nodes._data)\n    selectedEdges = selectEdges(selector, window.visnetwork.body.data.edges._data)\n    window.visnetwork.setSelection({nodes: selectedNodes, edges: selectedEdges},{unselectedAll: true, highlightEdges: false})\n\n  selectNodes = (selector, possibles) ->\n# options for selection query:   null, id#, labelString, {key:val, key:val...}, [query,query,...]\n    selected = []\n    if selector == null   # select nothing\n      return selected\n    if $.isNumeric(selector) && (possibles[selector])    # assume this number is an ID, select for it\n      selected.push selector\n      return selected\n    if _.isString(selector)   # string label selector, convert to object\n      selector = {label: selector}\n    if $.isPlainObject(selector)    # select all elements with these properties\n      possibleProps = ({id: each.id, label: each.element.label, type: each.element.type, props:(each.element.properties)} for each in _.values(possibles))\n      possibleValues = []\n      for props in possibleProps\n        obj = {id: props.id, label: props.label, type: props.type}\n        ((obj[key]=props.props[key][0].value) for key in _.keys(props.props))\n        possibleValues.push obj\n      found = _.where possibleValues, selector\n      selected.push f.id for f in found\n      return selected\n    if $.isArray(selector)    # an array of selectors\n      (selected.push (selectNodes each, possibles)) for each in selector\n      selected = _.flatten selected\n      return selected\n    return selected\n\n  selectEdges = (selector, possibles) ->\n    # options for selection query:   null, id#, labelString, {key:val, key:val...}, [query,query,...]\n    selected = []\n    if selector == null   # select nothing\n      return selected\n    if $.isNumeric(selector) && (possibles[selector])    # assume this number is an ID, select for it\n      selected.push selector\n      return selected\n    if _.isString(selector)   # string label selector, convert to object\n      selector = {label: selector}\n    if $.isPlainObject(selector)  == 232   # select all elements with these properties\n      possibleValues = _.values(possibles)\n      found = _.where possibleValues, selector\n      selected.push f.id for f in found\n      return selected\n    if $.isPlainObject(selector)    # select all elements with these properties\n      possibleProps = ({id: each.id, label: each.element.label, type: each.element.type, props:(if each.element.properties then each.element.properties else {})} for each in _.values(possibles))\n      possibleValues = []\n      for props in possibleProps\n        obj = {id: props.id, label: props.label, type: 'edge'}\n        ((obj[key]=props.props[key]) for key in _.keys(props.props))\n        possibleValues.push obj\n      found = _.where possibleValues, selector\n      selected.push f.id for f in found\n      return selected\n    if $.isArray(selector)    # an array of selectors\n      (selected.push (selectEdges each, possibles)) for each in selector\n      selected = _.flatten selected\n      return selected\n    return selected\n\n  return\n\n\n\n\n\n  $(\".results-graph-fit\").click ->\n    window.visnetwork.fit()\n\n  #------------------drag multiselect functions----------------------------\n  rect = {}\n  drag = false\n  canvas = window.visnetwork.canvas.frame.canvas\n  ctx = canvas.getContext('2d')\n  drawingSurfaceImageData = ctx.getImageData(0, 0, canvas.width, canvas.height)\n\n\n  saveDrawingSurface = ->\n    drawingSurfaceImageData = ctx.getImageData(0, 0, canvas.width, canvas.height)\n    return\n\n  restoreDrawingSurface = ->\n    ctx.putImageData drawingSurfaceImageData, 0, 0\n    return\n\n  selectNodesFromHighlight = ->\n    nodesIdInDrawing = Session.get('selectedNodes')\n    xRange = getStartToEnd(rect.startX, rect.w)\n    yRange = getStartToEnd(rect.startY, rect.h)\n    allNodes = window.visnetwork.nodesHandler.body.data.nodes.get()\n    i = 0\n    while i < allNodes.length\n      curNode = allNodes[i]\n      nodePosition = window.visnetwork.getPositions([ curNode.id ])\n      nodeXY = window.visnetwork.canvasToDOM(\n        x: nodePosition[curNode.id].x\n        y: nodePosition[curNode.id].y)\n      if xRange.start <= nodeXY.x and nodeXY.x <= xRange.end and yRange.start <= nodeXY.y and nodeXY.y <= yRange.end\n        nodesIdInDrawing.push curNode.id\n      i++\n\n    window.visnetwork.selectNodes nodesIdInDrawing\n    return\n\n  getStartToEnd = (start, theLen) ->\n    if theLen > 0\n      ret =\n        start: start\n        end: start + theLen\n    else\n      ret =\n        start: start + theLen\n        end: start\n    return ret\n\n  container = $(\"#mynetwork\")\n  container.on 'mousemove', (e) ->\n    if drag\n      restoreDrawingSurface()\n      rect.w = e.pageX - (@offsetLeft) - (rect.startX)\n      rect.h = e.pageY - (@offsetTop) - (rect.startY)\n      ctx.setLineDash [ 5 ]\n      ctx.strokeStyle = 'rgb(0, 102, 0)'\n      ctx.strokeRect rect.startX, rect.startY, rect.w, rect.h\n      ctx.setLineDash []\n      ctx.fillStyle = 'rgba(0, 255, 0, 0.2)'\n      ctx.fillRect rect.startX, rect.startY, rect.w, rect.h\n    return\n  container.on 'mousedown', (e) ->\n    Session.set('selectedNodes', [])\n    if e.button == 2\n      if e.shiftKey\n        currentSelections = window.visnetwork.getSelectedNodes()\n        Session.set('selectedNodes', currentSelections)\n      saveDrawingSurface()\n      that = this\n      rect.startX = e.pageX - (@offsetLeft)\n      rect.startY = e.pageY - (@offsetTop)\n      drag = true\n      container[0].style.cursor = 'crosshair'\n    return\n  container.on 'mouseup', (e) ->\n    if e.button == 2\n      restoreDrawingSurface()\n      drag = false\n      container[0].style.cursor = 'default'\n      selectNodesFromHighlight()\n    return\n  document.body.oncontextmenu = ->\n    false\n\n\n\n\n  #-------------- Viz option controls --------------------\n  $(\".vis-options-node-hideShow\").prop('checked', true)\n  $(\".vis-options-node-hideShow\").change ->\n    oldState = $(\".vis-options-node-hideShow\").prop('checked')\n    newState = !oldState\n    window.visnetwork.setOptions {nodes:{hidden: newState}}\n\n  $(\".vis-options-edge-hideShow\").prop('checked', true)\n  $(\".vis-options-edge-hideShow\").change ->\n    oldState = $(\".vis-options-edge-hideShow\").prop('checked')\n    newState = !oldState\n    window.visnetwork.setOptions {edges:{hidden: newState}}\n\n  $(\".vis-options-physics-toggle\").prop('checked', true)\n  $(\".vis-options-physics-toggle\").change ->\n    state = $(\".vis-options-physics-toggle\").prop('checked')\n    window.visnetwork.setOptions {physics: state}\n\n  $('.all-settings').click (evt)->\n    $('#vis-config').dialog({title: 'Visualization Options',resizable: true,width:500,height:300})\n\n  #-------------- Node Label Selector --------------------\n  $(\"#nodeLabelProperty\").change ->\n    updateNodelabels()\n\n  updateNodelabels = () ->\n    key = $(\"#nodeLabelProperty\").val()\n    Session.set 'keyForNodeLabel', key\n    nodes = window.visnetwork.nodesHandler.body.data.nodes.getDataSet()\n    window.visnetwork.stopSimulation()\n    selections = (window.visnetwork.getSelection()).nodes\n    if not selections.length  #no selections, apply to all nodes\n      nodes.forEach (node)->\n        node.label = labelForVertex(node.element,key)\n        nodes.update {id: node.id, label: node.label}\n    else # apply to selected nodes only\n      selections.forEach (nodeID)->\n        node = nodes.get(nodeID)\n        node.label = labelForVertex(node.element,key)\n        nodes.update {id: node.id, label: node.label}\n    window.visnetwork.startSimulation()\n\n  $(\".useLabelPrefix\").prop('checked', true)\n  Session.set 'useLabelPrefix', true\n  $(\".useLabelPrefix\").change ->\n    state = $(\".useLabelPrefix\").prop('checked')\n    Session.set 'useLabelPrefix', state\n    updateNodelabels()\n\n\n\n  #------------------Select IF support\n  $(\"#nodeLabelSelector\").change ->\n    $('#elementSelector').val ('\"'+$(\"#nodeLabelSelector\").val()+'\"')\n    $('#elementSelector').trigger('input')\n\n\n  Session.set 'elementSelector', null  # null means select nothing\n\n  window.updateSelectedElements = (ctxt) ->\n    Session.set 'elementSelector', ctxt\n    try\n      selector = JSON.parse(Session.get 'elementSelector')\n      $('#elementSelector')[0].style.color = 'black'\n    catch error\n      $('#elementSelector')[0].style.color = 'red'     # signal a syntax error with red text\n      return\n    selectedNodes = selectNodes(selector, window.visnetwork.body.data.nodes._data)\n    selectedEdges = selectEdges(selector, window.visnetwork.body.data.edges._data)\n    window.visnetwork.setSelection({nodes: selectedNodes, edges: selectedEdges},{unselectedAll: true, highlightEdges: false})\n\n  selectNodes = (selector, possibles) ->\n# options for selection query:   null, id#, labelString, {key:val, key:val...}, [query,query,...]\n    selected = []\n    if selector == null   # select nothing\n      return selected\n    if $.isNumeric(selector) && (possibles[selector])    # assume this number is an ID, select for it\n      selected.push selector\n      return selected\n    if _.isString(selector)   # string label selector, convert to object\n      selector = {label: selector}\n    if $.isPlainObject(selector)    # select all elements with these properties\n      possibleProps = ({id: each.id, label: each.element.label, type: each.element.type, props:(each.element.properties)} for each in _.values(possibles))\n      possibleValues = []\n      for props in possibleProps\n        obj = {id: props.id, label: props.label, type: props.type}\n        ((obj[key]=props.props[key][0].value) for key in _.keys(props.props))\n        possibleValues.push obj\n      found = _.where possibleValues, selector\n      selected.push f.id for f in found\n      return selected\n    if $.isArray(selector)    # an array of selectors\n      (selected.push (selectNodes each, possibles)) for each in selector\n      selected = _.flatten selected\n      return selected\n    return selected\n\n  selectEdges = (selector, possibles) ->\n# options for selection query:   null, id#, labelString, {key:val, key:val...}, [query,query,...]\n    selected = []\n    if selector == null   # select nothing\n      return selected\n    if $.isNumeric(selector) && (possibles[selector])    # assume this number is an ID, select for it\n      selected.push selector\n      return selected\n    if _.isString(selector)   # string label selector, convert to object\n      selector = {label: selector}\n    if $.isPlainObject(selector)    # select all elements with these properties\n      possibleValues = _.values(possibles)\n      found = _.where possibleValues, selector\n      selected.push f.id for f in found\n      return selected\n    if $.isArray(selector)    # an array of selectors\n      (selected.push (selectEdges each, possibles)) for each in selector\n      selected = _.flatten selected\n      return selected\n    return selected\n\n  return\n\nprocessResults = (results, success, queryTime) ->\n  if window.resultsEditor\n    window.resultsEditor.set results\n  Session.set 'scriptResult', results\n  Session.set 'runStatus', success\n  d = moment.duration(Math.round(queryTime*1000)/1000)\n  Session.set 'queryTime', window.durationToString(d)\n  d = moment.duration(Math.round((moment()-moment(Session.get 'startTime'))*1000)/1000)\n  Session.set 'elapsedTime', window.durationToString(d)\n  determineGraphToShow()\n  if ((Session.get 'graphToShow').nodes.length == 0) && ((Session.get 'graphToShow').edges.length == 0)\n    Session.set 'graphRenderingStatus','No graph in result'\n  else\n    Session.set 'graphRenderingStatus','Ready'\n    if Session.get('drawGraphResult') == true\n      Session.set 'drawButtonPressed', true\n      Session.set 'graphRenderingStatus','Rendering...'\n      Session.set 'elapsedRenderTime', 'Timing...'\n      randomizeLayout()\n      renderGraph()\n  return\n\nselectNeighborsToAdd = (currentSelectedNodeIDs,currentSelectedEdgeIDs,allV,allE) ->\n  box = bootbox.dialog\n    title:'Select neighboring vertices to add to local graph',\n    message:'hello',\n    buttons:\n      confirm:\n        label: \"Save\"\n        className: \"btn-success\"\n        callback: ()->\n          selectedVerts = []\n          verts2Visit = Session.get('verts2Visit')\n          for label in Object.keys(verts2Visit)\n            labelVerts = _.reject(allV,(node)->\n              node.label != label)\n            selectedVerts = _.union(selectedVerts, _.sample(labelVerts, verts2Visit[label]))\n          currentSelectedNodeIDs = _.union currentSelectedNodeIDs,(each.id+\"\" for each in selectedVerts)\n          nonSelectedNodeIds = _.reject((each.id+\"\" for each in allV),(id)->\n            _.contains(currentSelectedNodeIDs,id)\n          )\n          allE = _.reject(allE, (edge)->\n            _.contains(nonSelectedNodeIds,edge.inV+\"\") || _.contains(nonSelectedNodeIds,edge.outV+\"\")\n          )\n          addInTheNeighbors(currentSelectedNodeIDs,currentSelectedEdgeIDs,selectedVerts,allE)\n  box.find('.bootbox-body').remove()\n  Blaze.renderWithData(Template.VisitSelector,() ->\n    {allV:allV,allE:allE}\n  ,box.find(\".modal-body\")[0])\n\n\naddInTheNeighbors = (nodes2Select,edges2Select,allV,allE) ->\n  ahn = allHiddenNodeIDs()\n  allV = _.reject(allV,(node)->\n    _.contains ahn, node.id+\"\"  #make sure its a string2string compare\n  )\n  nodes = ({id: String(v.id),label: labelForVertex(v,Session.get 'keyForNodeLabel'), allowedToMoveX: true, allowedToMoveY: true, title: titleForElement(v), element:v} for v in allV)\n  window.visnetwork.nodesHandler.body.data.nodes.update nodes\n  ahe = allHiddenEdgeIDs()\n  allE = _.reject(allE,(edge)->\n    _.contains ahe, edge.id+\"\"    #make sure its a string2string compare\n  )\n  edges = ({id: String(e.id), label: e.label, from: String(e.outV), to: String(e.inV), title: titleForElement(e), element:e} for e in allE)\n  window.visnetwork.edgesHandler.body.data.edges.update edges\n  for vert in nodes\n    nodes2Select.push vert.id\n  for edge in edges\n    edges2Select.push edge.id\n  window.visnetwork.setSelection({ nodes: nodes2Select, edges: edges2Select})\n\n\nscriptForGeneralIngestionFindOrCreate = ()->\n  '''\n//given arrays of json for verts and edges, generate them into the graph\n//verts2FindOrCreate = incoming binding, an map of objects of properties to use to find existing vertices, or to create them if needed, keyed by fake vertID\n/* Example:   (needs to be a full description of the vertex in case we need to create it\n[\n    {label: \"Sensor\", id: 0, properties:{\"sensorID\": [{value: \"v000000ktsmkitch\"}]}}\n]\n*/\n//vertsJSON = incoming binding, an array of vertex-structured objects\n//edgesJSON = incoming binding, an array of edge-structured objects\n//transactionContext = incoming binding, string declaring purpose of graph transaction (comes out in Kafka topic \"graphChange\")\n\nif (bindings['vertsJSON'] == null) {vertsJSON = []} else {vertsJSON = bindings['vertsJSON']}\nif (bindings['edgesJSON'] == null) {edgesJSON = []} else {edgesJSON = bindings['edgesJSON']}\nif (bindings['verts2FindOrCreate'] == null) {verts2FindOrCreate = []} else {verts2FindOrCreate = bindings['verts2FindOrCreate']}\nif (bindings['transactionContext'] == null) {transactionContext = \"unlabeled transaction\"} else {transactionContext = bindings['transactionContext']}\n\nvMap = [:]\nvMapFull = [:]\neMapFull = [:]\nverts2FindOrCreate.collect { json ->\n    trav = g.V().hasLabel(json.label)\n    json.properties.each { key, val ->\n        trav = trav.has(key, val[0].value)\n        }\n    results = trav.toList()\n   if (results.size == 0) {oldV = null} else {oldV = results[0]}\n    if (oldV == null){\n        //create it\n        newV = gg(transactionContext).addV(json.label).next()\n        json.properties.each { key, val ->\n            gg(transactionContext).V(newV.id()).property(key, val[0].value).next()\n            }\n    } else {\n        //reference it\n        newV = oldV\n    }\n    vMap[json.id] = newV.id()\n\n}\n\n\nvertsJSON.collect { json ->\n    newV = gg(transactionContext).addV(json.label).next()\n    vMap[json.id] = newV.id()\n    vMapFull[json.id] = newV\n    json.properties.each { key, val ->\n        gg(transactionContext).V(newV.id()).property(key, val[0].value).next()\n}}\nedgesJSON.collect { json ->\n    fromID = vMap[json.outV] ? vMap[json.outV] : json.outV\n    toID = vMap[json.inV] ? vMap[json.inV] : json.inV\n    newEdge=gg(transactionContext).V(fromID).addE(json.label).to(g.V(toID)).next()\n    eMapFull[json.id] = newEdge\n    json.properties.collect { key, val ->\n        gg(transactionContext).E(newEdge.id()).property(key, val.value).next()\n}}\n//answer the maps of old element ids to new elements\n[vMap: vMap, vertMap: vMapFull, edgeMap: eMapFull]\n  '''"
  ]
}