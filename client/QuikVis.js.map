{
  "version": 3,
  "file": "QuikVis.js",
  "sourceRoot": "",
  "sources": [
    "QuikVis.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "Template.QuikVis.rendered = ->\n  Session.set('keyForNodeLabel', \"null\")\n\n  $(\"#scriptSelector\").change ->\n    scriptName = $(\"#scriptSelector\").val()\n    for each in (Session.get 'scripts')\n      if scriptName == each.title\n        scriptCode = each.script\n        Session.set 'scriptName', each.title\n        runScriptAndDrawResults(scriptCode)\n\n  wsUri = Session.get \"serverURL\"\n\n  window.wsConnect = (wsUri)->\n    console.log(\"connecting to \",wsUri)\n    document.getElementById('ws-status').innerHTML = \"<p style='font-size:16px; background-color: yellow; color: black;'>trying Websocket connection...</p>\"\n    window.socketToJanus = new WebSocket(wsUri+\"/gremlin\")\n    window.socketToJanus.onmessage = (msg) ->   #example send method\n      data = msg.data\n      json = JSON.parse(data)\n      window.dispatcher(json)\n    window.socketToJanus.onopen = () ->\n      document.getElementById('ws-status').innerHTML = \"<p style='font-size:16px; background-color: white; color: green;'>connected via Websocket</p>\"\n      console.log(\"connected to\", wsUri)\n    window.socketToJanus.onclose = ()->\n      document.getElementById('ws-status').innerHTML = \"<p style='font-size:16px; background-color: white; color: red;'>not connected</p>\"\n      console.log(\"closed to\", wsUri)\n      setTimeout(window.wsConnect,3000);  #attempt to reconnect\n\n  Session.set \"usingWebSockets\", true\n  try\n    console.log \"trying to connect to \"+(Session.get \"serverURL\")\n    window.wsConnect(Session.get \"serverURL\");  #connect the websocket\n  catch\n    Session.set \"usingWebSockets\", false\n    document.getElementById('ws-status').innerHTML = \"<p style='font-size:16px; background-color: white; color: black;'>Connected via HTTP</p>\"\n\n  setTimeout( ()->\n    Session.set 'useLabelPrefix', true\n    if (Session.get 'scripts').length =1\n      scriptObject = (Session.get 'scripts')[0]\n      Session.set 'scriptName', scriptObject.title\n      runScriptAndDrawResults scriptObject.script\n  ,2000)\n\n\n\n#*************** utilities\n\nrunScriptAndDrawResults = (scriptCode)->\n  if not Session.get 'positions'\n    Session.set 'positions',{}\n  Session.set 'graphFoundInResults', false\n  Session.set 'graphRenderingStatus', ''\n  Session.set 'drawButtonPressed', false\n  Session.set 'scriptCode', scriptCode\n  Session.set 'userID', 'quikvis'\n  Session.set 'tinkerPopVersion', '3'\n  Session.set 'graphFoundInResults', false\n  serverURL = Session.get 'serverURL'\n  graphName = Session.get 'graphName'\n  scriptName = Session.get 'scriptName'\n  userID = Session.get 'userID'\n  Session.set 'graphFoundInResults', false\n  Session.set 'graphRenderingStatus', ''\n  Session.set 'elapsedRenderTime', ''\n  Session.set 'elapsedTime','Timing...'\n  Session.set 'drawButtonPressed', false\n  Session.set 'startTime', moment().toDate()\n  Session.set 'elementsInResults',{vertices:[],edges:[]}\n  if window.resultsEditor\n    window.resultsEditor.set {}\n  if serverURL && graphName && scriptName\n    if window.ScriptEditor != undefined\n      scriptCode = window.ScriptEditor.getValue()\n    else\n      scriptCode = Session.get 'scriptCode'\n    if (Session.get \"usingWebSockets\")\n      window.socketToJanus.onmessage = (msg) ->\n        endTime = Date.now()\n        data = msg.data\n        json = JSON.parse(data)\n        if json.status.code >= 500\n          Session.set 'runStatus', json.status.message\n          alert \"Error in processing Gremlin script: \"+json.status.message\n        else\n          if json.status.code == 204\n            results = []\n          else\n            results = json.result.data\n          processResults(results, true, startTime - endTime)\n          console.log results\n      request =\n        requestId: uuid.new(),\n        op:\"eval\",\n        processor:\"\",\n        args:{gremlin: scriptCode, bindings: {}, language: \"gremlin-groovy\"}\n      startTime = Date.now()\n      window.socketToJanus.send(JSON.stringify(request))\n    else\n      Meteor.call \"runScript\", userID, serverURL,(Session.get 'tinkerPopVersion'), (Session.get \"usingWebSockets\"), scriptName,scriptCode, {}, (error, result) ->\n        if error\n          console.log  error\n          alert JSON.stringify error\n          return\n        #console.log 'result=',JSON.stringify result\n        if (result == undefined) || (result.results == undefined) || (result.results == null) || (result.results.length == 0)\n          results = [null]\n        else\n          results = result.results\n        if window.resultsEditor\n          window.resultsEditor.set results\n        Session.set 'scriptResult', results\n        Session.set 'runStatus', result.success\n        d = moment.duration(Math.round(result.queryTime*1000)/1000)\n        Session.set 'queryTime', window.durationToString(d)\n        d = moment.duration(Math.round((moment()-moment(Session.get 'startTime'))*1000)/1000)\n        Session.set 'elapsedTime', window.durationToString(d)\n        determineGraphToShow()\n        Session.set 'drawButtonPressed', true\n        Session.set 'graphRenderingStatus','Rendering...'\n        Session.set 'elapsedRenderTime', 'Timing...'\n        randomizeLayout()\n        renderGraph()\n      return\n  return\n\nmodifyRenderingUsing = ()->\n  setTimeout( ->\n    gts = Session.get 'graphToShow'\n    options = Session.get 'renderingOptions'\n    nodes = gts.nodes\n    edges = gts.edges\n    for option in options\n      if option.type == 'edge'\n        for rendering in option.renderings\n          selectionScript = rendering.selectUsing\n          directives = rendering.directives\n          for directive in directives\n            renderingKey = (Object.keys directive)[0]\n            renderingScript = directive[renderingKey]\n            functionString = 'function selector(edge){return '+selectionScript+'}'\n            eval functionString\n            functionString = 'function renderer(edge){return '+renderingScript+'}'\n            eval functionString\n            for edge in edges\n              if selector(edge.element)\n                edge[renderingKey] = renderer(edge.element)\n                #alert JSON.stringify(edge)\n              else\n                #alert 'FAILED',JSON.stringify(edge)\n      if option.type == 'vertex'\n        for rendering in option.renderings\n          selectionScript = rendering.selectUsing\n          directives = rendering.directives\n          for directive in directives\n            renderingKey = (Object.keys directive)[0]\n            renderingScript = directive[renderingKey]\n            functionString = 'function selector(vertex){return '+selectionScript+'}'\n            eval functionString\n            functionString = 'function renderer(vertex){return '+renderingScript+'}'\n            eval functionString\n            for node in nodes\n              if selector(node.element)\n                node[renderingKey] = renderer(node.element)\n                #alert JSON.stringify(node)\n              else\n                #alert 'FAILED',JSON.stringify(node)\n      #window.visnetwork.nodesHandler.body.data.nodes.update nodes\n      #window.visnetwork.edgesHandler.body.data.edges.update edges\n  ,1000)\n\n#********************* Widgets\n\n\n\n#******************** Buttons\n\n\n#******************** Helpers\n\nTemplate.QuikVis.helpers\n  isAdmin: ->\n    (Session.get 'userID') == (Session.get 'admin-userID')\n  notAdmin: ->\n    (Session.get 'userID') != (Session.get 'admin-userID')\n  userLoggedIn: ->\n    (Session.get 'userID') != null\n\n  scripts: ->\n    Session.get 'scripts'\n  multipleScripts: ->\n    (Session.get 'scripts').length > 1\n\n  script: ->\n    @.title\n  scriptResult: ->\n    true\n  graphSelected: ->\n    true\n  scriptSelected: ->\n    (Session.get 'scriptName') != null\n  drawingGraph: ->\n    true\n  graphToShow: ->\n    (Session.get 'graphFoundInResults')\n  renderingOptions: ->\n    JSON.stringify (Session.get 'renderingOptions')\n\n\nprocessResults = (results, success, queryTime) ->\n  if window.resultsEditor\n    window.resultsEditor.set results\n  Session.set 'scriptResult', results\n  Session.set 'runStatus', success\n  d = moment.duration(Math.round(queryTime*1000)/1000)\n  Session.set 'queryTime', window.durationToString(d)\n  d = moment.duration(Math.round((moment()-moment(Session.get 'startTime'))*1000)/1000)\n  Session.set 'elapsedTime', window.durationToString(d)\n  determineGraphToShow()\n  if ((Session.get 'graphToShow').nodes.length == 0) && ((Session.get 'graphToShow').edges.length == 0)\n    Session.set 'graphRenderingStatus','No graph in result'\n  else\n    Session.set 'graphRenderingStatus','Ready'\n    if Session.get('drawGraphResult') == true\n      Session.set 'drawButtonPressed', true\n      Session.set 'graphRenderingStatus','Rendering...'\n      Session.set 'elapsedRenderTime', 'Timing...'\n      randomizeLayout()\n      renderGraph()\n  return"
  ]
}