{
  "version": 3,
  "file": "methods.js",
  "sourceRoot": "",
  "sources": [
    "methods.coffee"
  ],
  "names": [],
  "mappings": ";AAEA;AAAA,MAAA;;EAAA,MAAM,CAAC,OAAP,CAAe,QAAA,CAAA,CAAA,EAAA,CAAf;;EAEA,MAAM,CAAC,OAAP,CACE;IAAA,SAAA,EAAW,QAAA,CAAC,MAAD,EAAS,SAAT,EAAoB,gBAApB,EAAsC,eAAtC,EAAuD,UAAvD,EAAmE,MAAnE,EAA2E,QAA3E,CAAA;AACT,UAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAAA,MAAA,EAAA,aAAA,EAAA,QAAA,EAAA,UAAA,EAAA,YAAA,EAAA;MAAA,aAAA,GAAgB,8BAAA,GAA+B,UAA/B,GAA0C,OAA1C,GAAkD;MAClE,UAAA,GAAa,kBAAA,CAAmB,yBAAA,CAA0B,MAA1B,CAAnB;MACb,IAAG,MAAA,IAAU,SAAV,IAAuB,MAA1B;QACE,OAAO,CAAC,GAAR,CAAY,aAAZ,EAA2B,gBAA3B;QACA,IAAG,gBAAA,KAAoB,GAAvB;UACE,IAAA,GACE;YAAA,IAAA,EACE;cAAA,OAAA,EAAS,MAAT;cACA,QAAA,EAAU;YADV,CADF;YAGA,OAAA,EACE;cAAA,cAAA,EAAgB;YAAhB;UAJF;UAKF,OAAO,CAAC,GAAR,CAAY,aAAZ,EAA0B,IAAI,CAAC,SAAL,CAAe,QAAf,CAA1B;UACA,OAAO,CAAC,GAAR,CAAY,WAAZ,EAAwB,aAAxB;AACA;YACE,QAAA,GAAW,IAAI,CAAC,IAAL,CAAU,SAAV,EAAqB,IAArB;mBACX,OAAO,CAAC,GAAR,CAAY,iBAAZ,EAA+B,QAA/B,EAFF;WAAA,aAAA;YAGM;mBACJ,QAAA,GAAW,CAAC,CAAC,SAJf;WAAA;;YAOE,IAAG,CAAC,QAAA,KAAY,MAAb,CAAA,IAA2B,QAAQ,CAAC,UAApC,IAAkD,QAAQ,CAAC,UAAT,KAAuB,GAA5E;;cAEE,YAAA,GAAe,QAAQ,CAAC;cACxB,YAAA,GAAa,YAAY,CAAC,OAAb,CAAsB,qBAAtB,EAA6C,QAAA,CAAC,CAAD,CAAA;AACxD,oBAAA;gBAAA,CAAA,GAAI,CAAC,CAAC,OAAF,CAAU,KAAV,EAAgB,EAAhB;AACJ,uBAAO,KAAA,GAAM,CAAN,GAAQ;cAFyC,CAA7C;cAGb,UAAA,GAAa,IAAI,CAAC,KAAL,CAAW,YAAX;cACb,IAAG,UAAA,KAAc,IAAjB;gBACE,UAAA,GAAa;kBAAC,OAAA,EAAQ,CAAC,IAAD,CAAT;kBAAgB,OAAA,EAAQ,KAAxB;kBAA8B,SAAA,EAAU;gBAAxC,EADf;;cAEA,IAAG,UAAU,CAAC,MAAX,KAAqB,IAAxB;gBACE,MAAA,GAAS;gBACT,UAAU,CAAC,MAAX,GAAoB,CAAC,IAAD,EAFtB;eAAA,MAAA;;gBAKE,MAAA,GAAS,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC;gBAChC,OAAO,CAAC,GAAR,CAAY,UAAZ,EAAwB,UAAU,CAAC,MAAM,CAAC,IAAlB,KAA0B,GAAlD,EAAuD,aAAvD,EAAsE,4BAAtE,EAAoG,kBAApG,EAAwH,MAAxH;gBACA,KAAA,GAAQ;kBAAC,OAAA,EAAS,UAAU,CAAC,MAAM,CAAC,IAA5B;kBAAkC,OAAA,EAAS,UAAU,CAAC,MAAM,CAAC,IAAlB,KAAwB,GAAnE;kBAAwE,SAAA,EAAU;gBAAlF;AACR,uBAAO,MART;eATF;aAAA,MAAA;AAmBE,qBAAO;gBAAC,OAAA,EAAS,QAAV;gBAAoB,OAAA,EAAQ,OAA5B;gBAAoC,SAAA,EAAU;cAA9C,EAnBT;aAPF;WATF;SAFF;;IAHS,CAAX;IA0CA,iBAAA,EAAmB,QAAA,CAAC,SAAD,CAAA;AACjB,UAAA;MAAA,IAAG,SAAH;QACE,QAAA,GAAW,IAAI,CAAC,GAAL,CAAS,SAAA,GAAU,SAAnB;AACX,eAAO,QAAQ,CAAC,IAAI,CAAC,OAFvB;OAAA,MAAA;eAIE,GAJF;;IADiB,CA1CnB;IAiDA,YAAA,EAAc,QAAA,CAAC,MAAD,EAAQ,SAAR,EAAkB,SAAlB,EAA4B,UAA5B,CAAA;aACZ,OAAO,CAAC,MAAR,CACE;QAAA,MAAA,EAAQ,MAAR;QACA,SAAA,EAAW,SADX;QAEA,SAAA,EAAW,SAFX;QAGA,UAAA,EAAY;MAHZ,CADF;IADY,CAjDd;IAwDA,SAAA,EAAW,QAAA,CAAC,MAAD,EAAQ,SAAR,CAAA;aACT,OAAO,CAAC,MAAR,CACE;QAAA,MAAA,EAAQ,MAAR;QACA,SAAA,EAAW;MADX,CADF;IADS,CAxDX;IA6DA,YAAA,EAAc,QAAA,CAAC,QAAD,EAAW,QAAX,CAAA;aACZ,OAAO,CAAC,MAAR,CAAe,QAAf,EAAyB,QAAzB;IADY,CA7Dd;IAgEA,cAAA,EAAgB,QAAA,CAAC,SAAD,EAAW,SAAX,CAAA;AACd,UAAA,CAAA,EAAA,KAAA,EAAA,EAAA,EAAA,CAAA,EAAA,KAAA,EAAA,IAAA,EAAA,GAAA,EAAA,CAAA,EAAA;MAAA,GAAA,GAAM,SAAA,GAAU,UAAV,GAAqB,SAArB,GAA+B;MACrC,OAAO,CAAC,GAAR,CAAY,GAAZ;MACA,IAAA,GAAO,IAAI,CAAC,GAAL,CAAS,GAAT;MACP,IAAG,IAAI,CAAC,IAAI,CAAC,OAAb;QACE,EAAA,GAAK,IAAI,CAAC,IAAI,CAAC,OAAQ,CAAA,CAAA;QACvB,EAAA,GAAK,IAAI,CAAC,IAAI,CAAC,OAAQ,CAAA,CAAA;QACvB,KAAA;;AAA+G;UAAA,KAAA,oCAAA;;yBAAtG;cAAC,EAAA,EAAI,MAAA,CAAO,CAAC,CAAC,GAAT,CAAL;cAAoB,CAAA,EAAG,MAAM,CAAC,QAAP,CAAgB;gBAAC,GAAA,EAAI,CAAL;gBAAO,GAAA,EAAI;cAAX,CAAhB,CAAvB;cAAyD,CAAA,EAAG,MAAM,CAAC,QAAP,CAAgB;gBAAC,GAAA,EAAI,CAAL;gBAAO,GAAA,EAAI;cAAX,CAAhB,CAA5D;cAA8F,IAAA,EAAK;YAAnG;UAAsG,CAAA;;;QAC/G,KAAA;;AAA+F;UAAA,KAAA,oCAAA;;yBAAtF;cAAC,EAAA,EAAI,MAAA,CAAO,CAAC,CAAC,GAAT,CAAL;cAAoB,KAAA,EAAO,CAAC,CAAC,MAA7B;cAAqC,MAAA,EAAQ,MAAA,CAAO,CAAC,CAAC,KAAT,CAA7C;cAA8D,MAAA,EAAQ,MAAA,CAAO,CAAC,CAAC,IAAT;YAAtE;UAAsF,CAAA;;;QAC/F,CAAA,GAAI;UAAC,KAAA,EAAO,KAAR;UAAe,KAAA,EAAO;QAAtB,EALN;OAAA,MAAA;QAOE,CAAA,GAAI,QAAA,CAAA,EAPN;;AAQA,aAAO;IAZO,CAhEhB;IA8EA,UAAA,EAAY,QAAA,CAAA,CAAA;AACV,UAAA,GAAA,EAAA,UAAA,EAAA,IAAA,EAAA;MAAA,UAAA,GAAa,MAAM,CAAC,KAAK,CAAC,IAAb,CAAkB,CAAA,CAAlB,CAAqB,CAAC,KAAtB,CAAA;AACb;MACA,GAAA;;AAA8B;QAAA,KAAA,4CAAA;;uBAAvB,IAAI,CAAC,MAAO,CAAA,CAAA,CAAE,CAAC;QAAQ,CAAA;;;MAC9B,MAAA,GAAS,GAAG,CAAC,MAAJ,CAAW,QAAA,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAA;eAClB,CAAC,CAAC,OAAF,CAAU,CAAV,CAAA,KAAgB;MADE,CAAX;MAET,IAAG,MAAM,CAAC,MAAP,KAAiB,CAApB;AACE,eAAO,GADT;;AAEA,aAAO;IARG,CA9EZ;IAwFA,eAAA,EAAiB,QAAA,CAAC,QAAD,CAAA;AACf,UAAA;MAAA,EAAA,GAAK,MAAM,CAAC,UAAP,CAAkB,IAAlB;aACL,EAAE,CAAC,MAAH,CAAU,OAAO,CAAC,GAAG,CAAC,GAAZ,GAAkB,mBAAlB,GAAsC,QAAhD;IAFe,CAxFjB;IA4FA,gBAAA,EAAkB,QAAA,CAAC,SAAD,CAAA;AAChB,UAAA,QAAA,EAAA,EAAA,EAAA,CAAA,EAAA,GAAA,EAAA;MAAA,EAAA,GAAK,MAAM,CAAC,UAAP,CAAkB,IAAlB;AACL;MAAA,KAAA,2CAAA;;qBACE,EAAE,CAAC,MAAH,CAAU,OAAO,CAAC,GAAG,CAAC,GAAZ,GAAkB,mBAAlB,GAAsC,QAAhD;MADF,CAAA;;IAFgB,CA5FlB;IAiGA,kBAAA,EAAoB,QAAA,CAAC,aAAD,EAAgB,QAAhB,CAAA;AAClB,UAAA,CAAA,EAAA,OAAA,EAAA;MAAA,OAAA,GAAU,SAAA,GAAU,aAAV,GAAwB,UAAxB,GAAmC;MAC7C,OAAO,CAAC,GAAR,CAAY,SAAZ,EAAuB,OAAvB;AACA;eACE,QAAA,GAAW,IAAI,CAAC,GAAL,CAAS,OAAT,EADb;OAAA,aAAA;QAEM;eACJ,QAAA,GAAW,CAAC,CAAC,SAHf;OAAA;QAKE,IAAG,QAAQ,CAAC,UAAT,IAAuB,QAAQ,CAAC,UAAT,KAAuB,GAAjD;UACE,OAAO,CAAC,GAAR,CAAY,cAAZ;AACA,iBAAO,KAFT;SAAA,MAAA;UAIE,OAAO,CAAC,GAAR,CAAY,sBAAZ;AACA,iBAAO,MALT;SALF;;IAHkB,CAjGpB;IAgHA,sBAAA,EAAwB,QAAA,CAAC,aAAD,EAAgB,QAAhB,CAAA;AACtB,UAAA,YAAA,EAAA,CAAA,EAAA,OAAA,EAAA;MAAA,OAAA,GAAU,SAAA,GAAU,aAAV,GAAwB,UAAxB,GAAmC;MAC7C,OAAO,CAAC,GAAR,CAAY,SAAZ,EAAuB,OAAvB;MACA,YAAA,GAAe;AACf,aAAM,YAAN;AACE;UACE,QAAA,GAAW,IAAI,CAAC,GAAL,CAAS,OAAT,EADb;SAAA,aAAA;UAEM;UACJ,QAAA,GAAW,CAAC,CAAC,SAHf;SAAA;UAKE,IAAG,QAAQ,CAAC,UAAT,IAAuB,QAAQ,CAAC,UAAT,KAAuB,GAAjD;YACE,OAAO,CAAC,GAAR,CAAY,cAAZ;YACA,YAAA,GAAe,MAFjB;WAAA,MAAA;YAIE,OAAO,CAAC,GAAR,CAAY,mCAAZ,EAJF;WALF;;MADF;AAWA,aAAO;IAfe,CAhHxB;IAiIA,sBAAA,EAAwB,QAAA,CAAC,aAAD,EAAgB,SAAhB,CAAA;AACtB,UAAA,YAAA,EAAA,CAAA,EAAA,QAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA;MAAA,KAAA,2CAAA;;QACE,OAAA,GAAU,SAAA,GAAU,aAAV,GAAwB,UAAxB,GAAmC;QAC7C,OAAO,CAAC,GAAR,CAAY,SAAZ,EAAuB,OAAvB;QACA,YAAA,GAAe;AACf,eAAM,YAAN;AACE;YACE,QAAA,GAAW,IAAI,CAAC,GAAL,CAAS,OAAT,EADb;WAAA,aAAA;YAEM;YACJ,QAAA,GAAW,CAAC,CAAC;YACb,OAAO,CAAC,GAAR,CAAY,QAAZ,EAAqB,QAArB,EAJF;WAAA;YAME,IAAG,QAAQ,CAAC,UAAT,IAAuB,QAAQ,CAAC,UAAT,KAAuB,GAAjD;cACE,OAAO,CAAC,GAAR,CAAY,QAAZ,EAAsB,SAAtB;cACA,YAAA,GAAe,MAFjB;aAAA,MAAA;cAIE,OAAO,CAAC,GAAR,CAAY,QAAZ,EAAsB,8BAAtB,EAJF;aANF;;QADF;MAJF;AAgBA,aAAO;IAjBe,CAjIxB;IAoJC,0BAAA,EAA4B,QAAA,CAAC,SAAD,CAAA;AAC1B,aAAO,CAAC,SAAD,EAAW,GAAX;IADmB,CApJ7B;IAuJA,sBAAA,EAAwB,QAAA,CAAC,OAAD,CAAA;AACtB,aAAO,OAAO,CAAC,GAAI,CAAA,OAAA;IADG;EAvJxB,CADF;;EA2JA,yBAAA,GAA4B,QAAA,CAAC,MAAD,CAAA;AAC1B,WAAO,MAAM,CAAC,OAAP,CAAe,KAAf,EAAqB,KAArB,EADmB;EAAA;AA7J5B",
  "sourcesContent": [
    "\n\nMeteor.startup ->\n\nMeteor.methods\n  runScript: (userID, serverURL, tinkerPopVersion, usingWebSockets, scriptName, script, bindings)->\n    loggingScript = 'println \"Executing script: ['+scriptName+'] \"\\n'+script\n    sendScript = encodeURIComponent(escapeDollarSignInStrings(script))\n    if userID && serverURL && script\n      console.log \"version =  \", tinkerPopVersion\n      if tinkerPopVersion == '3'\n        args =\n          data:\n            gremlin: script\n            bindings: bindings\n          headers:\n            \"Content-Type\": 'application/json'\n        console.log \"bindings = \",JSON.stringify(bindings)\n        console.log \"script = \",loggingScript\n        try\n          response = HTTP.post serverURL, args\n          console.log \"POST results = \", response\n        catch e\n          response = e.response\n        finally\n          #console.log response\n          if (response != undefined) && response.statusCode && response.statusCode == 200\n            #change all properties that are 15+ digit integers into strings to prevent Javascript from converting to floats and losing their value as IDs\n            resultString = response.content\n            resultString=resultString.replace( /(:[ ]?)\\d{15,9999}/g, (x)->\n              y = x.replace(/\\D/g,'')\n              return ': \"'+y+'\"')\n            resultJSON = JSON.parse resultString\n            if resultJSON == null\n              resultJSON = {results:[null],success:'???',queryTime:'N/A'}\n            if resultJSON.result == null\n              length = 1\n              resultJSON.result = [null]\n            else\n              #console.log resultJSON.result.data\n              length = resultJSON.result.data.length\n              console.log 'success:', resultJSON.status.code == 200, ' queryTime:', 'Not Available from Service', ' results.length:', length\n              final = {results: resultJSON.result.data, success: resultJSON.status.code==200, queryTime:'Not Available from Service'}\n              return final\n          else\n            return {results: response, success:'Error',queryTime:'N/A'}\n\n  getGraphsOnServer: (serverURL)->\n    if serverURL\n      response = HTTP.get serverURL+'/graphs'\n      return response.data.graphs\n    else\n      []\n\n  removeScript: (userID,serverURL,graphName,scriptName)->\n    Scripts.remove\n      userID: userID\n      serverURL: serverURL\n      graphName: graphName\n      scriptName: scriptName\n\n  removeURL: (userID,serverURL)->\n    Scripts.remove\n      userID: userID\n      serverURL: serverURL\n\n  updateScript: (selector, modifier)->\n    Scripts.update selector, modifier\n\n  getEntireGraph: (serverURL,graphName) ->\n    url = serverURL+'/graphs/'+graphName+'/tp/gremlin?script=[g.V(),g.E()]'\n    console.log url\n    resp = HTTP.get url\n    if resp.data.success\n      vs = resp.data.results[0]\n      es = resp.data.results[1]\n      nodes = ({id: String(v._id), x: chance.floating({min:0,max:100}), y: chance.floating({min:0,max:100}), size:1} for v in vs)\n      edges = ({id: String(e._id), label: e._label, source: String(e._outV), target: String(e._inV)} for e in es)\n      g = {nodes: nodes, edges: edges}\n    else\n      g = trigraph()\n    return g\n\n  allUserIDs: ->\n    allEntries = Meteor.users.find({}).fetch()\n    debugger\n    all = (each.emails[0].address for each in allEntries)\n    nodups = all.filter (v, i, a)->\n      a.indexOf(v) == i\n    if nodups.length == 0\n      return []\n    return nodups\n\n  deleteGraphFile: (fileName)->\n    fs = Meteor.npmRequire 'fs'\n    fs.unlink(process.env.PWD + \"/.private/graphs/\"+fileName)\n\n  deleteGraphFiles: (fileNames)->\n    fs = Meteor.npmRequire 'fs'\n    for fileName in fileNames\n      fs.unlink(process.env.PWD + \"/.private/graphs/\"+fileName)\n\n  fileExistsOnServer: (serverAddress, fileName)->\n    request = 'http://'+serverAddress+\"/exists/\"+fileName\n    console.log \"request\", request\n    try\n      response = HTTP.get(request)\n    catch e\n      response = e.response\n    finally\n      if response.statusCode && response.statusCode == 200\n        console.log \"file exists!\"\n        return true\n      else\n        console.log \"file does not exist!\"\n        return false\n\n  onceFileExistsOnServer: (serverAddress, fileName)->\n    request = 'http://'+serverAddress+\"/exists/\"+fileName\n    console.log \"request\", request\n    doesNotExist = true\n    while doesNotExist\n      try\n        response = HTTP.get(request)\n      catch e\n        response = e.response\n      finally\n        if response.statusCode && response.statusCode == 200\n          console.log \"file exists!\"\n          doesNotExist = false\n        else\n          console.log \"file does not exist! trying again\"\n    return true\n\n  onceFilesExistOnServer: (serverAddress, fileNames)->\n    for fileName in fileNames\n      request = 'http://'+serverAddress+\"/exists/\"+fileName\n      console.log \"request\", request\n      doesNotExist = true\n      while doesNotExist\n        try\n          response = HTTP.get(request)\n        catch e\n          response = e.response\n          console.log 'error=',response\n        finally\n          if response.statusCode && response.statusCode == 200\n            console.log fileName, \"exists!\"\n            doesNotExist = false\n          else\n            console.log fileName, \"does not exist! trying again\"\n    return true\n\n   discoverTinkerPopVersionAt: (serverURL)->\n     return [serverURL,'3']\n\n  getEnvironmentVariable: (varName)->\n    return process.env[varName]\n\nescapeDollarSignInStrings = (script)->\n  return script.replace(/\\$/g,'\\\\$')   #escape $ with \\$ due to Java string insertion matcher\n\n\n"
  ]
}